{"version":3,"sources":["app.js"],"names":["Constants","Math","PI","Canvas","[object Object]","width","height","this","canvas","document","createElement","ctx","getContext","SpriteSheet","i","x","y","w","s","h","l","font","o","u","M","m","page","p","g","q","v","k","A","B","T","Sprite","sprite","drawImage","img","anchor","viewport","spritePos","cameraPos","C","R","viewportSprite2uv","center","strokeStyle","strokeRect","bbox","hbox","dx","dy","r","getSpriteBoxPolygon","box","j","A45","KeyboardAdapter","handler","map","Input","Action","ATTACK","DEFLECT","DODGE","SUPER","UP","DOWN","LEFT","RIGHT","MENU","MUTE","FREEZE","arrowDirections","lt","held","reset","window","addEventListener","event","keyCode","console","log","state","direction","action","Object","values","getElementById","resize","force","dpi","devicePixelRatio","clientWidth","clientHeight","dpiWidth","dpiHeight","scale","floor","max","ceil","imageSmoothingEnabled","style","cursor","MouseAdapter","RELOAD","pointer","clientX","clientY","button","preventDefault","releaseRMBTick","pressed","released","framesHeld","keyboard","init","mouse","update","Z","tt","it","st","$","nt","J","X","Y","ht","et","rt","Geometry","pt","radianTable","sqrt","bt","p1","p2","normalizeVector","qt","cos","sin","angle","atan2","RAD","Et","kt","a","b","vector2point","vectors","vector","Bt","min","Tt","angleA1","angleA2","angleB1","angleB2","result","Nt","pos","Ct","Rt","Ht","game","camera","Lt","value","startPos","endPos","next","step","diff","NaN","Infinity","startQ","startR","endQ","endR","tileCount","abs","stepQ","sign","stepR","intersectionQ","calculateRayIntersectionAndStep","intersectionR","tilesHitBetween","vectorAdd","bounds","tilesHitInBounds","tilesHitBetweenCircle","invdx","invdy","cornerX","cornerY","ltime","ly","jt","Gt","$t","Kt","Jt","rtime","ry","ttime","tx","btime","bx","inverseRadius","lineLength","cornerdx","cornerdy","cornerDistance","innerAngle","acos","time","ix","iy","nx","ny","isNaN","innerAngleSin","angle1Sin","angle1","asin","angle2","r1","v1","r2","v2","a1","a2","delta","vectorBetween","maze","maxDistance","array2d","length","stack","Qt","cost","shift","push","fn","Array","from","activeBattle","room","Random","ei","c","d","t","str","imul","charCodeAt","seedfn","xmur3","randfn","sfc32","CROSS","CARDINALS","MazeGenerator","ai","filter","dir","cq","cr","rand","roomNumber","found","oi","cells","idx","cell","splice","possible","openCrossCells","indexOf","choice","connectors","rooms","room1","room2","up","down","left","right","ci","fi","xi","wi","groups","Set","remaining","group1","find","group","includes","group2","handled","flood","deadEnds","forEach","di","reduce","hash","walls","tiles","seed","attemptRoomPlacement","carveMaze","carveConnectors","pruneDeadEnds","homeflow","roomLookup","createRoomLookup","hi","gi","createWalls","bi","createTiles","qi","vi","Ei","C_SHIFT","32","44","46","73","Text","default","fire","recolor","gradient","createLinearGradient","addColorStop","shadow","text","toUpperCase","measureWidth","drawText","cu","cv","phrases","split","phrase","phraseWidth","Si","sum","color","fillStyle","fillRect","globalCompositeOperation","Detection","tile","tileIsPassable","Behavior","IDLE","Ri","Hi","Ii","Oi","Li","entities","entity","think","Monster","vel","facing","hp","damage","radius","mass","lineOfSight","player","CHASE","clamp","DEAD","cullt","cull","drawViewportSprite","monster_dead","monster","ShotgunBlast","spread","range","Player","vect","dot1","dot2","sides","vector2angle","arcOverlap","wallHit","angle2vector","tilesHitBy","Zi","Qi","uv","xy2uv","beginPath","arc","lineTo","closePath","fill","ReloadAnimation","frames","z","shellsMax","end","start","globalAlpha","hud_shells_full","shellsLeft","HUNT","defaultMovement","input","reload","velocityAdj","pointerXY","setLineDash","stroke","Sculptor","bounce","random","sawblade","save","translate","rotate","frame","drawSprite","restore","sawblade_eyes","Menu","BattleStreamAnimation","f","battle_stream","Movement","movers","rounds","clipVelocityEntityVsEntity","clipVelocityAgainstWalls","other","hit","intersectCircleCircle2","entityM","otherM","entityI","otherI","tilesHitByCircle","qr2xy","intersectCircleRectangle","Damage","amount","generate","It","images","loadImage","initBasicSprite","player2","bullet","monster2","hud_shells_empty","hud_shells","hud_health_frame","hud_healthbar","hud_health_fill","hud_crosshair","data","battle_spray","walls2","slice","battle_door","tileset","opts","initDynamicSprite","loadCacheSlice","source","rad","sources","S","L","F","uri","sliceCanvas","Promise","resolve","reject","image","Image","onload","onerror","err","src","roomsCleared","started","requestAnimationFrame","onFrame","currentms","draw","apply","qr","xy2qr","si","Es","ks","plan","enemies","enemy","unshift","roomsClear","spawn","uv2xy","setTransform","drawMaze","drawHud","offset","q1","q2","Error","String","drawRightText","join","ptr","JSON","stringify","grab","colors","globalOpacity","then"],"mappings":"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","file":"app.js","sourcesContent":["(function () {\n    'use strict';\n\n    const Constants = {\n        R0: 0,\n        R90: Math.PI * 0.5,\n        R180: Math.PI,\n        R270: Math.PI * 1.5,\n        R360: Math.PI * 2,\n\n        // Size in pixels of tiles in the game maze\n        TILE_WIDTH: 32,\n        TILE_HEIGHT: 32,\n\n        // Tile constants\n        TILE_FLOOR1:            0,\n        TILE_FLOOR2:            1,\n        TILE_WALL1:             2,\n        TILE_WALL2:             3,\n\n        // Wall bits, for rendering wall edges\n        WALL_TOP:      0b0000_1000,\n        WALL_RIGHT:    0b0000_0100,\n        WALL_BOTTOM:   0b0000_0010,\n        WALL_LEFT:     0b0000_0001,\n\n        // Room openings into rooms from corridors\n        OPEN_TOP:      0b1000_0000,\n        OPEN_RIGHT:    0b0100_0000,\n        OPEN_BOTTOM:   0b0010_0000,\n        OPEN_LEFT:     0b0001_0000,\n\n        PLAYER_BOUND_RADIUS: 9\n    };\n\n    /**\n     * This helper class encapsulates creating temporary off-screen canvases. Off-screen\n     * canvases are great tools for building patterns, image masks, and other components\n     * that we'll use to draw things on the primary canvas.\n     */\n    class Canvas {\n      constructor(width, height) {\n        this.canvas = document.createElement('canvas');\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.ctx = this.canvas.getContext('2d');\n      }\n    }\n\n    /**\n     * This module is generate by `gulp generateSpriteSheetData`.\n     */\n\n    const SpriteSheet =\n    /* <generated> */\n    { battle_stream:\n       [ { x: 0, y: 0, w: 1, h: 8 },\n         { x: 1, y: 0, w: 1, h: 8 },\n         { x: 2, y: 0, w: 1, h: 8 },\n         { x: 3, y: 0, w: 1, h: 8 },\n         { x: 4, y: 0, w: 1, h: 8 },\n         { x: 5, y: 0, w: 1, h: 8 },\n         { x: 6, y: 0, w: 1, h: 8 },\n         { x: 7, y: 0, w: 1, h: 8 } ],\n      blood_laser:\n       [ { x: 0, y: 8, w: 5, h: 28 },\n         { x: 5, y: 8, w: 5, h: 28 },\n         { x: 10, y: 8, w: 5, h: 28 } ],\n      bullet: [ { x: 0, y: 36, w: 32, h: 32 } ],\n      font: [ { x: 0, y: 68, w: 236, h: 6 } ],\n      hud_crosshair: [ { x: 0, y: 74, w: 9, h: 9 } ],\n      hud_healthbar: [ { x: 0, y: 83, w: 109, h: 9 }, { x: 109, y: 83, w: 109, h: 9 } ],\n      hud_shells: [ { x: 0, y: 92, w: 6, h: 7 }, { x: 6, y: 92, w: 6, h: 7 } ],\n      monster2: [ { x: 0, y: 99, w: 32, h: 32 }, { x: 32, y: 99, w: 32, h: 32 } ],\n      page: [ { x: 0, y: 131, w: 8, h: 8 } ],\n      paper: [ { x: 0, y: 139, w: 32, h: 32 }, { x: 32, y: 139, w: 32, h: 32 } ],\n      particles: [ { x: 0, y: 171, w: 11, h: 11 } ],\n      player2: [ { x: 0, y: 182, w: 32, h: 32 } ],\n      portal: [ { x: 0, y: 214, w: 32, h: 32 } ],\n      sawblade: [ { x: 0, y: 246, w: 17, h: 17 }, { x: 17, y: 246, w: 17, h: 17 } ],\n      sparkle: [ { x: 0, y: 263, w: 11, h: 11 } ],\n      tileset:\n       [ { x: 0, y: 274, w: 32, h: 32 },\n         { x: 32, y: 274, w: 32, h: 32 },\n         { x: 64, y: 274, w: 32, h: 32 },\n         { x: 96, y: 274, w: 32, h: 32 },\n         { x: 128, y: 274, w: 32, h: 32 },\n         { x: 160, y: 274, w: 32, h: 32 },\n         { x: 192, y: 274, w: 32, h: 32 },\n         { x: 224, y: 274, w: 32, h: 32 } ],\n      walls2:\n       [ { x: 0, y: 306, w: 46, h: 46 },\n         { x: 46, y: 306, w: 46, h: 46 },\n         { x: 92, y: 306, w: 46, h: 46 },\n         { x: 138, y: 306, w: 46, h: 46 },\n         { x: 184, y: 306, w: 46, h: 46 },\n         { x: 230, y: 306, w: 46, h: 46 },\n         { x: 276, y: 306, w: 46, h: 46 } ] }\n    /* </generated> */\n    ;\n\n    // The spritesheet is produced during the gulp build\n    const SPRITESHEET_URI = 'sprites.png';\n\n    /**\n     * Sprites!\n     *\n     * For this game, a \"sprite\" is a little object that has an attached image, an anchor\n     * point, a bounding box, and an optional hit box. This keeps pixel-level data about\n     * the image all in one place (by passing a Sprite around, we know what image to draw,\n     * what point in the image to rotate around, what areas of the image can get hit by\n     * things, and what areas can hit other things).\n     *\n     * Whether the bounding box or hitbox do anything isn't up to the Sprite, it would be\n     * up to the Frame that references it. (This is helpful because it's convenient for\n     * a simple game like this to have only one hit frame, but the animation may call\n     * for showing the sword swipe for 5-6 frames.)\n     */\n    class Sprite {\n      /**\n       * A small helper that draws a sprite onto a canvas, respecting the anchor point of\n       * the sprite. Note that the canvas should be PRE-TRANSLATED and PRE-ROTATED, if\n       * that's appropriate!\n       */\n      static drawSprite(ctx, sprite, u, v) {\n        ctx.drawImage(sprite.img, u - sprite.anchor.x, v - sprite.anchor.y);\n      }\n\n      static drawViewportSprite(viewport, sprite, spritePos, cameraPos) {\n        let { u, v } = this.viewportSprite2uv(viewport, sprite, spritePos, cameraPos);\n        viewport.ctx.drawImage(sprite.img, u, v);\n      }\n\n      static viewportSprite2uv(viewport, sprite, spritePos, cameraPos) {\n        return {\n          u: spritePos.x - sprite.anchor.x - cameraPos.x + viewport.center.u,\n          v: spritePos.y - sprite.anchor.y - cameraPos.y + viewport.center.v\n        };\n      }\n\n      /**\n       * Draw a sprite's bounding box, for debugging, using the same rules as drawSprite.\n       */\n      static drawBoundingBox(ctx, sprite, x, y) {\n        ctx.strokeStyle = 'rgba(0, 255, 0, 0.5)';\n        ctx.strokeRect(\n          x - sprite.anchor.x + sprite.bbox[0].x,\n          y - sprite.anchor.y + sprite.bbox[0].y,\n          sprite.bbox[1].x - sprite.bbox[0].x,\n          sprite.bbox[1].y - sprite.bbox[0].y\n        );\n      }\n\n      /**\n       * Draw a sprite's hit box, for debugging, using the same rules as drawSprite.\n       */\n      static drawHitBox(ctx, sprite, x, y) {\n        if (sprite.hbox) {\n          ctx.strokeStyle = 'rgba(255, 0, 0, 0.7)';\n          ctx.strokeRect(\n            x - sprite.anchor.x + sprite.hbox[0].x,\n            y - sprite.anchor.y + sprite.hbox[0].y,\n            sprite.hbox[1].x - sprite.hbox[0].x,\n            sprite.hbox[1].y - sprite.hbox[0].y\n          );\n        }\n      }\n\n      static getBoundingCircle(sprite, x, y) {\n        let dx = sprite.bbox[1].x - sprite.bbox[0].x;\n        let dy = sprite.bbox[1].y - sprite.bbox[0].y;\n        let r = (dx > dy ? dx : dy) / 2;\n        return {\n          x: x - sprite.anchor.x + (sprite.bbox[0].x + sprite.bbox[1].x) / 2,\n          y: y - sprite.anchor.y + (sprite.bbox[0].y + sprite.bbox[1].y) / 2,\n          r\n        };\n      }\n\n      static getBoundingBoxPolygon(sprite, x, y) {\n        return this.getSpriteBoxPolygon(sprite.anchor, sprite.bbox, x, y);\n      }\n\n      static getHitBoxPolygon(sprite, x, y) {\n        return this.getSpriteBoxPolygon(sprite.anchor, sprite.hbox, x, y);\n      }\n\n      static getSpriteBoxPolygon(anchor, box, x, y) {\n        return {\n          x: x,\n          y: y,\n          p: [\n            { x: box[0].x - anchor.x, y: box[0].y - anchor.y },\n            { x: box[1].x - anchor.x, y: box[0].y - anchor.y },\n            { x: box[1].x - anchor.x, y: box[1].y - anchor.y },\n            { x: box[0].x - anchor.x, y: box[1].y - anchor.y }\n          ]\n        };\n      }\n    }\n\n    /**\n     * The Assets module loads raw PNGs we'll use to draw the game, does any postprocessing stuff\n     * we might need to do, and then saves references to them for later.\n     */\n    class Assets {\n      static async init() {\n        this.images = {};\n        await this.loadImage(SPRITESHEET_URI);\n\n        // Base Pixel Font (see `Text.init` for additional manipulation)\n        Sprite.font = this.initBasicSprite(SpriteSheet.font[0]);\n\n        // Player\n        Sprite.player = this.initBasicSprite(SpriteSheet.player2[0]);\n\n        // Bullets\n        Sprite.bullet = this.initBasicSprite(SpriteSheet.bullet[0]);\n\n        // Enemy\n        Sprite.monster = this.initBasicSprite(SpriteSheet.monster2[0]);\n        Sprite.monster_dead = this.initBasicSprite(SpriteSheet.monster2[0]);\n\n        // GUI\n        Sprite.hud_shells_empty = this.initBasicSprite(SpriteSheet.hud_shells[0]);\n        Sprite.hud_shells_full = this.initBasicSprite(SpriteSheet.hud_shells[1]);\n        Sprite.hud_health_frame = this.initBasicSprite(SpriteSheet.hud_healthbar[0]);\n        Sprite.hud_health_fill = this.initBasicSprite(SpriteSheet.hud_healthbar[1]);\n        Sprite.hud_crosshair = this.initBasicSprite(SpriteSheet.hud_crosshair[0]);\n\n        Sprite.sawblade = this.initBasicSprite(SpriteSheet.sawblade[0]);\n        Sprite.sawblade_eyes = this.initBasicSprite(SpriteSheet.sawblade[1]);\n\n        // Pages\n        Sprite.page = await this.initBasicSprite(SpriteSheet.page[0]);\n\n        Sprite.battle_stream = SpriteSheet.battle_stream.map(data => this.initBasicSprite(data));\n        Sprite.battle_spray = SpriteSheet.walls2.slice(4, 7).map(data => this.initBasicSprite(data));\n        Sprite.battle_door = SpriteSheet.walls2.slice(1, 4).map(data => this.initBasicSprite(data));\n\n        // Tiles\n        Sprite.tiles = [];\n        Sprite.tiles[Constants.TILE_FLOOR1] = this.initBasicSprite(SpriteSheet.tileset[2]);\n        Sprite.tiles[Constants.TILE_WALL1] = this.initBasicSprite(SpriteSheet.tileset[0]);\n        Sprite.tiles[Constants.TILE_WALL2] = this.initBasicSprite(SpriteSheet.tileset[1]);\n\n        // Walls\n        Sprite.walls = this.initBasicSprite(SpriteSheet.walls2[0]);\n      };\n\n      /**\n       * Initialize a sprite by loading it from a particular slice of the given image. Provides\n       * \"sensible\" defaults for bounding box and anchor point if not provided.\n       */\n      static initBasicSprite(data, opts) {\n        return this.initDynamicSprite(this.loadCacheSlice(SPRITESHEET_URI, data.x, data.y, data.w, data.h), opts);\n      }\n\n      static rotateImage(source, rad) {\n        let canvas = new Canvas(source.width, source.height);\n        canvas.ctx.translate(source.width / 2, source.height / 2);\n        canvas.ctx.rotate(rad);\n        canvas.ctx.translate(-source.width / 2, -source.height / 2);\n        canvas.ctx.drawImage(source, 0, 0);\n        return canvas.canvas;\n      }\n\n      static overlay(...sources) {\n        let canvas = new Canvas(sources[0].width, sources[0].height);\n        for (let source of sources) {\n          canvas.ctx.drawImage(source, 0, 0);\n        }\n        return canvas.canvas;\n      }\n\n      /**\n       * Initialize a sprite by passing it a pre-defined image source (probably generated dynamically).\n       * Provides \"sensible\" defaults for bounding box and anchor point if not provided.\n       */\n      static initDynamicSprite(source, opts) {\n        let w = source.width, h = source.height;\n\n        return {\n          img: source,\n          anchor: (opts && opts.anchor) || { x: Math.floor(w / 2), y: Math.floor(h / 2) },\n          bbox: (opts && opts.bbox) || [{x: 0, y: 0 }, { x: w, y: h }],\n          hbox: opts && opts.hbox\n        };\n      }\n\n      /**\n       * This helper method retrieves a cached image, cuts the specified slice out of it, and returns it.\n       */\n      static loadCacheSlice(uri, x, y, w, h) {\n        //const source = await this.loadImage(uri);\n        const source = this.images[uri];\n        const sliceCanvas = new Canvas(w, h);\n        sliceCanvas.ctx.drawImage(source, x, y, w, h, 0, 0, w, h);\n        return sliceCanvas.canvas;\n      }\n\n      /**\n       * Load the image from the given URI and cache it.\n       */\n      static async loadImage(uri) {\n        if (this.images[uri]) return this.images[uri];\n\n        return await new Promise((resolve, reject) => {\n          let image = new Image();\n          image.onload = () => resolve(image);\n          image.onerror = (err) => reject(err);\n          image.src = uri;\n          this.images[uri] = image;\n        });\n      }\n    }\n\n    // A few quick constants (0*, 45*, 90*)\n    const A00 = 0;\n    const A45 = 0.7071067811865475;\n    const A90 = 1;\n\n    /**\n     * KeyboardAdapter\n     *\n     * Maps keyboard inputs to game inputs.\n     */\n    class KeyboardAdapter {\n      constructor(handler) {\n        this.handler = handler;\n\n        // Key Mapping:      ACTION            // Key\n        this.map = [];\n        this.map[88] = Input.Action.ATTACK;    // [X]\n        this.map[90] = Input.Action.DEFLECT;   // [Z]\n        this.map[67] = Input.Action.DODGE;     // [C]\n        this.map[32] = Input.Action.SUPER;     // [SPACEBAR]\n        this.map[38] = Input.Action.UP;        // [UpArrow]\n        this.map[40] = Input.Action.DOWN;      // [DownArrow]\n        this.map[37] = Input.Action.LEFT;      // [LeftArrow]\n        this.map[39] = Input.Action.RIGHT;     // [RightArrow]\n        this.map[87] = Input.Action.UP;        // [W]\n        this.map[83] = Input.Action.DOWN;      // [S]\n        this.map[65] = Input.Action.LEFT;      // [A]\n        this.map[68] = Input.Action.RIGHT;     // [D]\n        this.map[27] = Input.Action.MENU;      // [ESC]\n        this.map[77] = Input.Action.MUTE;      // [M]\n        this.map[70] = Input.Action.FREEZE;    // [F]\n        this.map[80] = Input.Action.FREEZE;    // [P]\n\n        // For keyboard, we support 8-point movement (S, E, SE, etc.)\n        this.arrowDirections = [\n          { x:  A00, y:  A00, m: 0 },\n          { x:  A00, y: -A90, m: 1 },\n          { x:  A00, y:  A90, m: 1 },\n          { x:  A00, y:  A00, m: 0 },\n          { x: -A90, y:  A00, m: 1 },\n          { x: -A45, y: -A45, m: 1 },\n          { x: -A45, y:  A45, m: 1 },\n          { x: -A90, y:  A00, m: 1 },\n          { x:  A90, y:  A00, m: 1 },\n          { x:  A45, y: -A45, m: 1 },\n          { x:  A45, y:  A45, m: 1 },\n          { x:  A90, y:  A00, m: 1 },\n          { x:  A00, y:  A00, m: 0 },\n          { x:  A00, y: -A90, m: 1 },\n          { x:  A00, y:  A90, m: 1 },\n          { x:  A00, y:  A00, m: 0 }\n        ];\n\n        this.held = [];\n\n        this.reset();\n      }\n\n      async init() {\n        window.addEventListener('keydown', event => {\n          let k = this.map[event.keyCode];\n          console.log(event.keyCode);\n          if (k) {\n            this.held[k] = true;\n          }\n\n          // Hack - first key pressed in window will initialize the audio.\n          //game.audio.init();\n        });\n\n        window.addEventListener('keyup', event => {\n          let k = this.map[event.keyCode];\n          if (k) {\n            this.held[k] = false;\n          }\n        });\n      }\n\n      update() {\n        // For keyboards, we want to convert the state of the various arrow keys being held down\n        // into a directional vector. We use the browser's event to handle the held state of\n        // the other action buttons, so we don't need to process them here.\n        let state = (this.held[Input.Action.UP] ? 1 : 0) +\n                    (this.held[Input.Action.DOWN] ? 2 : 0) +\n                    (this.held[Input.Action.LEFT] ? 4 : 0) +\n                    (this.held[Input.Action.RIGHT] ? 8 : 0);\n\n        this.direction = this.arrowDirections[state];\n      }\n\n      reset() {\n        this.direction = this.arrowDirections[0];\n        for (let action of Object.values(Input.Action)) {\n          this.held[action] = false;\n        }\n      }\n    }\n\n    const GAME_WIDTH = 480;\n    const GAME_HEIGHT = 270;\n\n    /**\n    * Viewport\n    *\n    * Represents the game display (for us, a canvas).\n    */\n    class Viewport {\n      async init() {\n        this.canvas = document.getElementById('canvas');\n        this.ctx = this.canvas.getContext('2d');\n        this.resize(true);\n      }\n\n      // Resize the canvas to give us approximately our desired game display size.\n      //\n      // Rather than attempt to explain it, here's a concrete example:\n      //\n      //     we start with a desired game dimension:   480x270px\n      //          get the actual browser dimensions:  1309x468px\n      //          factor in the display's DPI ratio:  2618x936px\n      //         now calculate the horizontal scale:       5.45x\n      //                     and the vertical scale:       3.46x\n      //            our new offical game scaling is:        5.4x\n      //       and our official viewport dimensions:   484x173px\n      //\n      // This approach emphasizes correct aspect ratio and maintains full-window rendering, at\n      // the potential cost of limiting visibility of the game itself in either the X or Y axis.\n      // If you use this approach, make sure your GUI can \"float\" (otherwise there may be whole\n      // UI elements the player cannot see!).\n      resize(force) {\n        let dpi = window.devicePixelRatio;\n        let width = this.canvas.clientWidth;\n        let height = this.canvas.clientHeight;\n        let dpiWidth = width * dpi;\n        let dpiHeight = height * dpi;\n\n        if (force || this.canvas.width !== dpiWidth || this.canvas.height !== dpiHeight) {\n          this.canvas.width = dpiWidth;\n          this.canvas.height = dpiHeight;\n\n          this.scale = (Math.floor(Math.max(dpiWidth / GAME_WIDTH, dpiHeight / GAME_HEIGHT) * 10) / 10);\n          this.width = Math.ceil(this.canvas.width / this.scale);\n          this.height = Math.ceil(this.canvas.height / this.scale);\n          this.center = { u: Math.floor(this.width / 2), v: Math.floor(this.height / 2) };\n          this.clientWidth = width;\n          this.clientHeight = height;\n\n                // Note: smoothing flag gets reset on every resize by some browsers, which is why\n                // we do it here.\n                this.ctx.imageSmoothingEnabled = false;\n\n                viewport.canvas.style.cursor = 'none';\n            }\n        }\n    }\n\n    // Singleton\n    const viewport = new Viewport();\n\n    /**\n     * MouseAdapter\n     *\n     * Maps mouse inputs to game inputs.\n     */\n    class MouseAdapter {\n      constructor(handler) {\n        this.handler = handler;\n\n        // Key Mapping:      ACTION            // Input\n        this.map = [];\n        this.map[0]  = Input.Action.ATTACK;    // LMB\n        this.map[2]  = Input.Action.RELOAD;    // RMB\n\n        this.held = [];\n\n        this.reset();\n      }\n\n      async init() {\n        window.addEventListener('mousemove', event => {\n          if (!this.pointer) this.pointer = {};\n          //this.handlers['mousemove'](event.movementX, event.movementY, event.clientX, event.clientY);\n          this.pointer.u = Math.floor((event.clientX * viewport.width) / viewport.clientWidth);\n          this.pointer.v = Math.floor((event.clientY * viewport.height) / viewport.clientHeight);\n        });\n\n        window.addEventListener('mouseout', () => {\n          this.pointer = undefined;\n        });\n\n        window.addEventListener('mousedown', event => {\n          let k = this.map[event.button];\n          if (k) this.held[k] = true;\n        });\n\n        window.addEventListener('mouseup', event => {\n          let k = this.map[event.button];\n          if (k) this.held[k] = false;\n        });\n\n        window.addEventListener('click', event => {\n          event.preventDefault();\n        });\n\n        window.addEventListener('contextmenu', event => {\n          let k = this.map[event.button];\n          console.log(event.button);\n          if (k) this.held[k] = true;\n          this.releaseRMBTick = 2;\n          event.preventDefault();\n        });\n\n        return this;\n      }\n\n      update() {\n        // Hacks: ideally we could use mousedown and mouseup for all clicks and preventDefault to\n        // avoid opening the browser's context menu. This hasn't worked for me so far when clicking\n        // on a canvas, so I need to use the context menu event to capture a right mouse click instead.\n        //\n        // We fake a down/up for RMB clicks, which means we can't determine how long the RMB is held\n        // (but luckily we don't need to for this game).\n        if (this.releaseRMBTick) {\n          this.releaseRMBTick--;\n          if (this.releaseRMBTick === 0) {\n            this.held[Input.Action.RELOAD] = false;\n            console.log('released');\n          }\n        }\n      }\n\n      reset() {\n        this.pointer = undefined;\n        for (let action of Object.values(Input.Action)) {\n          this.held[action] = false;\n        }\n      }\n    }\n\n    //import { GamepadAdapter } from './GamepadAdapter';\n    //import { NormalVector } from './Geometry';\n\n    /**\n     * This is our abstract game input handler.\n     *\n     * Each frame, we'll collect input data from all of our supported input adapters,\n     * and turn it into game input. This game input can then be used by the game\n     * update for the frame.\n     *\n     * The input adapters give us data like \"key X pressed\", or \"right mouse button\n     * clicked\", or \"button B\" pressed, and these are translated into a game input\n     * like \"dodge\".\n     */\n    class Input {\n        async init() {\n            // A vector representing the direction the user is pressing/facing,\n            // separate from pressing and releasing inputs. Treating \"direction\"\n            // separately makes it easier to handle gamepad sticks.\n            this.direction = { x: 0, y: 0, m: 0 };\n\n            // \"Pressed\" means an input was pressed THIS FRAME.\n            this.pressed = {};\n\n            // \"Released\" means an input was released THIS FRAME.\n            this.released = {};\n\n            // \"Held\" means an input is held down. The input was \"Pressed\" either\n            // this frame or in a past frame, and has not been \"Released\" yet.\n            this.held = {};\n\n            // How many frames was this input held down by the player. If [held]\n            // is false, it represents how long the input was last held down.\n            this.framesHeld = {};\n\n            this.keyboard = new KeyboardAdapter(this);\n            await this.keyboard.init();\n\n            this.mouse = new MouseAdapter(this);\n            await this.mouse.init();\n\n            //this.gamepad = new GamepadAdapter(this);\n            //await this.gamepad.init();\n        }\n\n        update() {\n            // We could have some kind of \"input adapter toggle\", but it's easier to just treat all inputs\n            // as valid -- if you're pressing the \"attack\" button on either gamepad or keyboard, then you're\n            // attacking. For directional input, we instead check whether there's movement on the thumbstick,\n            // and we use it if there is -- otherwise we try to extract movement from the keyboard instead.\n\n            this.keyboard.update();\n            this.mouse.update();\n            //this.gamepad.update();\n\n            for (let action of Object.values(Input.Action)) {\n                let held = this.mouse.held[action] || this.keyboard.held[action];\n                //let held = this.gamepad.held[action] || this.keyboard.held[action];\n                this.pressed[action] = !this.held[action] && held;\n                this.released[action] = this.held[action] && !held;\n\n                if (this.pressed[action]) {\n                    this.framesHeld[action] = 1;\n                } else if (this.held[action] && held) {\n                    this.framesHeld[action]++;\n                }\n\n                this.held[action] = held;\n            }\n\n            this.pointer = this.mouse.pointer;\n\n            //this.direction = this.gamepad.direction.m > 0 ? this.gamepad.direction : this.keyboard.direction;\n            this.direction = this.keyboard.direction;\n        }\n\n        onDown(action) {\n        }\n\n        onUp(action) {\n        }\n    }\n\n    // Game Inputs\n    //\n    // Note that moving the player around is actually not considered an action; it's\n    // a separate non-action input called \"direction\". It just so happens that on\n    // keyboard, for example, pressing the \"down arrow\" key is considered both a\n    // press of the in-game DOWN action and a directional input. It's up to the input\n    // consumer to decide which input is relevant (if any). For example, on a menu,\n    // we may consume the DOWN/UP actions to navigate the menu, but ignore directional\n    // inputs.\n    //\n    Input.Action = {\n      UP:      11,\n      DOWN:    12,\n      LEFT:    13,\n      RIGHT:   14,\n      ATTACK:  21,\n      RELOAD:  30,\n      DEFLECT: 22,\n      DODGE:   23,\n      SUPER:   24,\n      MENU:    96,\n      MUTE:    97,\n      FREEZE:  98\n    };\n\n    /**\n     * Geometry\n     *\n     * A horrible grab bag of math-related nonsense.\n     */\n    const Geometry = {\n      RAD: (() => {\n        let radianTable = [];\n        for (let i = 0; i <= 360; i++) {\n          radianTable[i] = Math.PI * 2 * i / 360;\n        }\n        return radianTable;\n      })(),\n\n      normalizeVector(p) {\n        let m = Math.sqrt(p.x * p.x + p.y * p.y);\n        return (m === 0) ? { x: 0, y: 0, m: 0 } : { x: p.x / m, y: p.y / m, m };\n      },\n\n      vectorBetween(p1, p2) {\n        return Geometry.normalizeVector({ x: p2.x - p1.x, y: p2.y - p1.y });\n      },\n\n      angle2vector(r, m) {\n        return { x: Math.cos(r), y: Math.sin(r), m: m || 1 };\n      },\n\n      vector2angle(v) {\n        let angle = Math.atan2(v.y, v.x);\n        if (angle < 0) angle += Geometry.RAD[360];\n        return angle;\n      },\n\n      vector2point(v) {\n        return { x: v.x * (v.m || 1), y: v.y * (v.m || 1) };\n      },\n\n      dot(a, b) {\n        [a, b] = [Geometry.vector2point(a), Geometry.vector2point(b)];\n        return a.x * b.x + a.y * b.y;\n      },\n\n      // Takes a series of vectors and denormalizes them and adds them together, usually resulting\n      // in a point in space. Wrap in normalizeVector to get a normalized vector again, if desired.\n      vectorAdd(...vectors) {\n        let v = { x: 0, y: 0, m: 1 };\n        for (let vector of vectors) {\n          v.x += vector.x * (vector.m || 1);\n          v.y += vector.y * (vector.m || 1);\n        }\n        return v;\n      },\n\n      closestAngleDifference(a, b) {\n        if (a > b) [a, b] = [b, a];\n        return Math.min(b - a, Constants.R360 + a - b);\n      },\n\n      intermediateAngle(a, b, m) {\n        if (b > Constants.R270 && a <= Constants.R90) a += Constants.R360;\n        if (a > Constants.R270 && b <= Constants.R90) b += Constants.R360;\n        let angle = (b - a) * m + a;\n        return (angle + Constants.R360) % Constants.R360;\n      },\n\n      angleBetween(angle, min, max) {\n        if (min > max) [min, max] = [max, min];\n        while (angle >= max + Geometry.RAD[360]) angle -= Geometry.RAD[360];\n        while (angle <= min - Geometry.RAD[360]) angle += Geometry.RAD[360];\n        return (angle >= min && angle < max);\n      },\n\n      arcOverlap(angleA1, angleA2, angleB1, angleB2) {\n        if (angleA1 > angleA2) [angleA1, angleA2] = [angleA2, angleA1];\n        if (angleB1 > angleB2) [angleB1, angleB2] = [angleB2, angleB1];\n\n        while (angleB2 >= angleA2 + Geometry.RAD[360]) {\n          angleB2 -= Geometry.RAD[360];\n          angleB1 -= Geometry.RAD[360];\n        }\n        while (angleB1 <= angleA1 - Geometry.RAD[360]) {\n          angleB1 += Geometry.RAD[360];\n          angleB2 += Geometry.RAD[360];\n        }\n\n        const result = [Math.max(angleA1, angleB1), Math.min(angleA2, angleB2)];\n        return result[0] > result[1] ? undefined : result;\n      },\n\n      xy2qr(pos) {\n        return { q: (pos.x / Constants.TILE_WIDTH) | 0, r: (pos.y / Constants.TILE_HEIGHT) | 0 };\n      },\n\n      qr2xy(pos) {\n        return { x: pos.q * Constants.TILE_WIDTH, y: pos.r * Constants.TILE_HEIGHT };\n      },\n\n      xy2uv(pos) {\n        return {\n          u: pos.x + viewport.center.u - game.camera.pos.x,\n          v: pos.y + viewport.center.v - game.camera.pos.y\n        };\n      },\n\n      clamp(value, min, max) {\n        return value < min ? min : (value > max ? max : value);\n      },\n\n      // The parameters to this function are (Q, Q) or (R, R) - i.e. horizontal or\n      // vertical coordinates in tile space.\n      calculateRayIntersectionAndStep(startPos, endPos) {\n        let next, step, diff = endPos - startPos;\n\n        if (diff === 0) {\n            step = NaN;\n            next = +Infinity;\n        } else if (diff > 0) {\n            step = 1 / diff;\n            next = (1 - (startPos - Math.floor(startPos))) * step;\n        } else {\n            step = -1 / diff;\n            next = (startPos - Math.floor(startPos)) * step;\n        }\n\n        return { next, step };\n      },\n\n      // https://www.genericgamedev.com/general/shooting-rays-through-tilemaps/\n      *tilesHitBetween(p1, p2) {\n        let startQ = p1.x / Constants.TILE_WIDTH, startR = p1.y / Constants.TILE_HEIGHT;\n        let endQ = p2.x / Constants.TILE_WIDTH, endR = p2.y / Constants.TILE_HEIGHT;\n        let tileCount = Math.abs(Math.floor(startQ) - Math.floor(endQ)) + Math.abs(Math.floor(startR) - Math.floor(endR));\n\n        yield { q: startQ | 0, r: startR | 0, m: 0 };\n\n        // If there's only 1 or 2 hit tiles, we don't need the math to compute the middle.\n        if (tileCount > 1) {\n          let q = startQ, r = startR, m = 0;\n          let stepQ = Math.sign(endQ - startQ);\n          let stepR = Math.sign(endR - startR);\n          let intersectionQ = Geometry.calculateRayIntersectionAndStep(startQ, endQ);\n          let intersectionR = Geometry.calculateRayIntersectionAndStep(startR, endR);\n\n          for (let i = 0; i < tileCount - 1; i++) {\n            if (intersectionQ.next < intersectionR.next) {\n              q += stepQ;\n              m += stepQ;\n              intersectionQ.next += intersectionQ.step;\n            } else {\n              r += stepR;\n              m += stepR;\n              intersectionR.next += intersectionR.step;\n            }\n            yield { q: q | 0, r: r | 0, m };\n          }\n        }\n\n        if (tileCount > 0) {\n          yield { q: endQ | 0, r: endR | 0, m: 1 };\n        }\n      },\n\n      *tilesHitBy(p, v) {\n        yield *Geometry.tilesHitBetween(p, Geometry.vectorAdd(p, v));\n      },\n\n      /**\n       * @param {XY[]} bounds  the upper-left and lower-right bounds\n       * @yields {QR}\n       */\n      *tilesHitInBounds(bounds) {\n        for (let r = Math.floor(bounds[0].y / Constants.TILE_HEIGHT); r * Constants.TILE_HEIGHT < bounds[1].y; r++) {\n          for (let q = Math.floor(bounds[0].x / Constants.TILE_WIDTH); q * Constants.TILE_WIDTH < bounds[1].x; q++) {\n            yield { q, r };\n          }\n        }\n      },\n\n      /**\n       * @param {XY} p1  the starting position\n       * @param {XY} p2  the ending position\n       * @param {number} r  the radius of the moving circle\n       * @yields {QR}\n       */\n      *tilesHitBetweenCircle(p1, p2, r) {\n        let bounds = [\n          { x: Math.min(p1.x, p2.x) - r, y: Math.min(p1.y, p2.y) - r },\n          { x: Math.max(p1.x, p2.x) + r, y: Math.max(p1.y, p2.y) + r }\n        ];\n        yield *Geometry.tilesHitInBounds(bounds);\n      },\n\n      /**\n       * @param {XY} p  the starting position\n       * @param {XY} v  the velocity (movement)\n       * @param {number} r  the radius of the moving circle\n       * @yields {QR}\n       */\n      *tilesHitByCircle(p, v, r) {\n        yield *Geometry.tilesHitBetweenCircle(p, { x: p.x + v.x, y: p.y + v.y }, r);\n      },\n\n      // https://stackoverflow.com/a/18790389/80630\n      intersectCircleRectangle(p1, p2, r, bounds) {\n        // If the bounding box around the start and end points (+radius on all\n        // sides) does not intersect with the rectangle, definitely not an\n        // intersection\n        if (Math.max(p1.x, p2.x) + r < bounds[0].x ||\n            Math.min(p1.x, p2.x) - r > bounds[1].x ||\n            Math.max(p1.y, p2.y) + r < bounds[0].y ||\n            Math.min(p1.y, p2.y) - r > bounds[1].y)\n          return;\n\n        let dx = p2.x - p1.x;\n        let dy = p2.y - p1.y;\n        let invdx = (dx === 0 ? 0 : 1 / dx);\n        let invdy = (dy === 0 ? 0 : 1 / dy);\n        let cornerX = Infinity;\n        let cornerY = Infinity;\n\n        // Check each side of the rectangle for a single-side intersection\n        // Left Side\n        if (p1.x - r < bounds[0].x && p2.x + r > bounds[0].x) {\n          let ltime = ((bounds[0].x - r) - p1.x) * invdx;\n          if (ltime >= 0 && ltime <= 1) {\n            let ly = dy * ltime + p1.y;\n            if (ly >= bounds[0].y && ly <= bounds[1].y) {\n              return { x: dx * ltime + p1.x, y: ly, t: ltime, nx: -1, ny: 0, ix: bounds[0].x, iy: ly };\n            }\n          }\n          cornerX = bounds[0].x;\n        }\n        // Right Side\n        if (p1.x + r > bounds[1].x && p2.x - r < bounds[1].x) {\n          let rtime = (p1.x - (bounds[1].x + r)) * -invdx;\n          if (rtime >= 0 && rtime <= 1) {\n            let ry = dy * rtime + p2.y;\n            if (ry >= bounds[0].y && ry <= bounds[1].y) {\n              return { x: dx * rtime + p1.x, y: ry, t: rtime, nx: 1, ny: 0, ix: bounds[1].x, iy: ry };\n            }\n          }\n          cornerX = bounds[1].x;\n        }\n        // Top Side\n        if (p1.y - r < bounds[0].y && p2.y + r > bounds[0].y) {\n          let ttime = ((bounds[0].y - r) - p1.y) * invdy;\n          if (ttime >= 0 && ttime <= 1) {\n            let tx = dx * ttime + p1.x;\n            if (tx >= bounds[0].x && tx <= bounds[1].x) {\n              return { x: tx, y: dy * ttime + p1.y, t: ttime, nx: 0, ny: -1, ix: tx, iy: bounds[0].y };\n            }\n          }\n          cornerY = bounds[0].y;\n        }\n        // Bottom Side\n        if (p1.y + r > bounds[1].y && p2.y - r < bounds[1].y) {\n          let btime = (p1.y - (bounds[1].y + r)) * -invdy;\n          if (btime >= 0 && btime <= 1) {\n            let bx = dx * btime + p1.x;\n            if (bx >= bounds[0].x && bx <= bounds[1].x) {\n              return { x: bx, y: dy * btime + p1.y, t: btime, nx: 0, ny: 1, ix: bx, iy: bounds[0].y };\n            }\n          }\n          cornerY = bounds[1].y;\n        }\n\n        // If we haven't touched anything, there is no collision\n        if (cornerX === Infinity && cornerY === Infinity) return;\n\n        // We didn't pass through a side but may be hitting the corner\n        if (cornerX !== Infinity && cornerY === Infinity) {\n          cornerY = dy > 0 ? bounds[1].y : bounds[0].y;\n        }\n        if (cornerY !== Infinity && cornerX === Infinity) {\n          cornerX = dx > 0 ? bounds[1].x : bounds[0].x;\n        }\n\n        /* Solve the triangle between the start, corner, and intersection point.\n         *\n         *           +-----------T-----------+\n         *           |                       |\n         *          L|                       |R\n         *           |                       |\n         *           C-----------B-----------+\n         *          / \\\n         *         /   \\r     _.-E\n         *        /     \\ _.-'\n         *       /    _.-I\n         *      / _.-'\n         *     S-'\n         *\n         * S = start of circle's path\n         * E = end of circle's path\n         * LTRB = sides of the rectangle\n         * I = {ix, iY} = point at which the circle intersects with the rectangle\n         * C = corner of intersection (and collision point)\n         * C=>I (r) = {nx, ny} = radius and intersection normal\n         * S=>C = cornerdist\n         * S=>I = intersectionDistance\n         * S=>E = lineLength\n         * <S = innerAngle\n         * <I = angle1\n         * <C = angle2\n         */\n        let inverseRadius = 1 / r;\n        let lineLength = Math.sqrt(dx * dx + dy * dy);\n        let cornerdx = cornerX - p1.x;\n        let cornerdy = cornerY - p1.y;\n        let cornerDistance = Math.sqrt(cornerdx * cornerdx + cornerdy * cornerdy);\n        let innerAngle = Math.acos((cornerdx * dx + cornerdy * dy) / (lineLength * cornerDistance));\n\n        // If the circle is too close, no intersection\n        if (cornerDistance < r) return;\n\n        // If inner angle is zero, it's going to hit the corner straight on.\n        if (innerAngle === 0) {\n          let time = (cornerDistance - r) / lineLength;\n\n            // Ignore if time is outside boundaries of (p1, p2)\n            if (time > 1 || time < 0) return;\n\n            let ix = time * dx + p1.x;\n            let iy = time * dy + p1.y;\n            let nx = cornerdx / cornerDistance;\n            let ny = cornerdy / cornerDistance;\n\n            return isNaN(ix) ? undefined : { x: ix, y: iy, t: time, nx, ny, ix: cornerX, iy: cornerY };\n        }\n\n        let innerAngleSin = Math.sin(innerAngle);\n        let angle1Sin = innerAngleSin * cornerDistance * inverseRadius;\n\n        // If the angle is too large, there is no collision\n        if (Math.abs(angle1Sin) > 1) return;\n\n        let angle1 = Math.PI - Math.asin(angle1Sin);\n        let angle2 = Math.PI - innerAngle - angle1;\n        let intersectionDistance = r * Math.sin(angle2) / innerAngleSin;\n        let time = intersectionDistance / lineLength;\n\n        // Ignore if time is outside boundaries of (p1, p2)\n        if (time > 1 || time < 0) return;\n\n        let ix = time * dx + p1.x;\n        let iy = time * dy + p2.y;\n        let nx = (ix - cornerX) * inverseRadius;\n        let ny = (iy - cornerY) * inverseRadius;\n\n        return isNaN(ix) ? undefined : { x: ix, y: iy, t: time, nx, ny, ix: cornerX, iy: cornerY };\n      },\n\n      // https://stackoverflow.com/questions/18683179/how-to-fix-circles-overlap-in-collision-response\n      //\n      // This is an incredibly simple implementation that ASSUMES very small velocities. It doesn't attempt\n      // to answer the question about \"when\" the intersection happened like the method above - may\n      // fix that in future.\n      intersectCircleCircle2(p1, r1, v1, p2, r2, v2) {\n        [v1, v2] = [Geometry.vector2point(v1), Geometry.vector2point(v2)];\n        let a1 = { x: p1.x + v1.x, y: p1.y + v1.y };\n        let a2 = { x: p2.x + v2.x, y: p2.y + v2.y };\n        let delta = Geometry.vectorBetween(a1, a2);\n        if (delta.m < r1 + r2) {\n          return { nx: delta.x, ny: delta.y, m: r1 + r2 - delta.m };\n        }\n      },\n\n      flood(maze, pos, maxDistance = Infinity) {\n        let result = Geometry.array2d(maze[0].length, maze.length, Infinity);\n        let stack = [{ ...pos, cost: 0 }];\n        while (stack.length > 0) {\n          let { q, r, cost } = stack.shift();\n          if (result[r][q] <= cost) continue;\n          result[r][q] = cost++;\n          if (result[r][q] >= maxDistance) continue;\n          if (maze[r][q + 1] && result[r][q + 1] > cost) stack.push({ q: q + 1, r, cost });\n          if (maze[r][q - 1] && result[r][q - 1] > cost) stack.push({ q: q - 1, r, cost });\n          if (maze[r + 1][q] && result[r + 1][q] > cost) stack.push({ q, r: r + 1, cost });\n          if (maze[r - 1][q] && result[r - 1][q] > cost) stack.push({ q, r: r - 1, cost });\n        }\n        return result;\n      },\n\n      array2d(width, height, value) {\n        let fn = typeof value === 'function' ? value : () => value;\n        return Array.from({ length: height }, () => Array.from({ length: width }, fn));\n      },\n\n      tileIsPassable(q, r) {\n        if (game.activeBattle) {\n          let room = game.activeBattle.room;\n          if (q < room.q || r < room.r || q >= room.q + room.width || r >= room.r + room.height) return false;\n        }\n        return !!game.maze.maze[r][q];\n      }\n    };\n\n    /**\n     * Seeded random number generator, using SimpleFastCounter for generator and\n     * xmur3 for hashing.\n     *\n     * https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript\n     */\n    const Random = {\n      sfc32(a, b, c, d) {\n        return () => {\n          a >>>= 0; b >>>= 0; c >>>= 0; d >>>= 0;\n          let t = (a + b) | 0;\n          a = b ^ b >>> 9;\n          b = c + (c << 3) | 0;\n          c = (c << 21 | c >>> 11);\n          d = d + 1 | 0;\n          t = t + d | 0;\n          c = c + t | 0;\n          return (t >>> 0) / 4294967296;\n        }\n      },\n\n      xmur3(str) {\n        let i, h;\n        for (i = 0, h = 1779033703 ^ str.length; i < str.length; i++) {\n          h = Math.imul(h ^ str.charCodeAt(i), 3432918353);\n          h = h << 13 | h >>> 19;\n        }\n\n        return () => {\n          h = Math.imul(h ^ h >>> 16, 2246822507);\n          h = Math.imul(h ^ h >>> 13, 3266489909);\n          return (h ^= h >>> 16) >>> 0;\n        }\n      },\n\n      seed(str) {\n        let seedfn = this.xmur3(str);\n        let randfn = this.sfc32(seedfn(), seedfn(), seedfn(), seedfn());\n\n        // If min/max are not supplied, returns a random floating point value\n        // (>=0 && <1). If they are supplied, returns a random integer value\n        // (>=min && <max).\n        return (min, max) => {\n          if (typeof min === \"number\" && typeof max === \"number\") {\n            return Math.floor(randfn() * (max - min)) + min;\n          } else {\n            return randfn();\n          }\n        };\n      }\n    };\n\n    const CROSS = [\n        { q: 0, r: 0 },\n        { q: 0, r: -1 },\n        { q: 0, r: 1 },\n        { q: -1, r: 0 },\n        { q: 1, r: 0 }\n    ];\n\n    const CARDINALS = [\n        { q: 0, r: -1 },\n        { q: 0, r: 1 },\n        { q: -1, r: 0 },\n        { q: 1, r: 0 }\n    ];\n\n    // Maze Generator - TODO\n    //\n    //\n    const MazeGenerator = {\n        openCrossCells(maze, q, r) {\n            return CROSS.filter(dir => {\n                let [cq, cr] = [q + dir.q, r + dir.r];\n                return cr >= 0 && cr < maze.length && cq >= 0 && cq < maze[0].length && !maze[cr][cq];\n            });\n        },\n\n        attemptRoomPlacement(maze, rand, bounds, width, height, roomNumber) {\n            let q = rand(0, (bounds[1].q - width) / 2) * 2 + 1;\n            let r = rand(0, (bounds[1].r - height) / 2) * 2 + 1;\n            let found = undefined;\n\n            //\n            // TUNEABLE\n            //\n            // You can never \"touch\" the spawn room (Room #1). If you touch another room,\n            // there's a 9% chance for each attempt to allow the room to be built, potentially\n            // overlapping/intersecting, or even completely eclipsing the previous room\n            // if this room is larger.\n            //\n            for (let j = 0; j < height; j++) {\n                for (let i = 0; i < width; i++) {\n                    if (maze[r+j][q+i]) return;\n                    if (maze[r+j][q+i]) roomNumber = found = maze[r+j][q+i];\n                    if (maze[r+j][q+i]===1) return;\n                }\n            }\n            if (found && rand() > 0.01) return;\n\n            for (let j = 0; j < height; j++) {\n                for (let i = 0; i < width; i++) {\n                    maze[r+j][q+i] = roomNumber;\n                }\n            }\n\n            if (roomNumber > 1) {\n                if (width >= 5 && height >= 5) {\n                    maze[r + rand(1, height - 2)][q + rand(1, width - 2)] = 0;\n                }\n                if (width >= 7 && height >= 7) {\n                    maze[r + rand(1, height - 2)][q + rand(1, width - 2)] = 0;\n                }\n                if (width >= 9 && height >= 9) {\n                    maze[r + rand(1, height - 2)][q + rand(1, width - 2)] = 0;\n                }\n            }\n\n            return { q, r, width, height, roomNumber };\n        },\n\n        carveMaze(maze, rand, startQ, startR, roomNumber) {\n            let cells = [{ q: startQ, r: startR }];\n            maze[startR][startQ] = roomNumber;\n\n            while (cells.length > 0) {\n                //\n                // TUNEABLE\n                //\n                // When carving, we can attempt to carve off any cell in our collected list. For\n                // this game, we choose 75% to keep carving off the last cell we carved (windy passage),\n                // and 25% to carve somewhere else (branch). If we choose to branch, that's the\n                // new windy passage, leaving the old one for later.\n                //\n                let idx = rand() < 0.25 ? rand(0, cells.length) : cells.length - 1;\n                let cell = cells[idx];\n                if (idx !== cells.length - 1) {\n                    cells.splice(idx, 1);\n                    cells.push(cell);\n                }\n\n                let possible = CARDINALS.filter(dir => {\n                    return MazeGenerator.openCrossCells(maze, cell.q + dir.q, cell.r + dir.r).length === 4;\n                });\n    /*\n                let possible = CARDINALS.filter(dir => {\n                    console.log(cell.r + dir.r, cell.q + dir.q);\n                    if (cell.r + dir.r < 0 || cell.r + dir.r >= maze.length || cell.q + dir.q < 0 || cell.q + dir.q >= maze[0].length) return false;\n                    if (maze[cell.r + dir.r][cell.q + dir.q]) return false;\n\n                    let openCells = CARDINALS.filter(dir2 => {\n                        let [cq, cr] = [cell.q + dir.q + dir2.q, cell.r + dir.r + dir2.r];\n                        if (cr < 0 || cr >= maze.length || cq < 0 || cq >= maze[0].length) return false;\n                        return !maze[cr][cq];\n                    });\n                    console.log([dir.q, dir.r, openCells.length]);\n\n                    return openCells.length === 3;\n                });\n                console.log(possible);\n                */\n\n                if (possible.length === 0) {\n                    cells.splice(cells.indexOf(cell), 1);\n                } else {\n                    let choice = possible[rand(0, possible.length)];\n                    maze[cell.r + choice.r][cell.q + choice.q] = roomNumber;\n                    cells.push({ q: cell.q + choice.q, r: cell.r + choice.r });\n                    console.log(cells);\n                }\n            }\n        },\n\n        carveConnectors(maze, rand) {\n            let connectors = [];\n            let rooms = [];\n\n            for (let r = 1; r < maze.length - 1; r++) {\n                for (let q = 1; q < maze.length - 1; q++) {\n                    let room1, room2, cq, cr;\n\n                    let [up, down, left, right] = [\n                        maze[r - 1][q],\n                        maze[r + 1][q],\n                        maze[r][q - 1],\n                        maze[r][q + 1]\n                    ];\n\n                    if (up && down && up !== down) {\n                        room1 = up, room2 = down, cq = 0, cr = 1;\n                    } else if (left && right && left !== right) {\n                        room1 = left, room2 = right, cq = 1, cr = 0;\n                    }\n\n                    if (room1 && room2) {\n                        if (room1 > room2) {\n                            [room1, room2] = [room2, room1];\n                        }\n                        connectors.push({ q, r, cq, cr, room1, room2 });\n                        rooms.push(room1, room2);\n                        //connectors.push({ q, r, room1: room2, room2: room1 });\n                        /*connectors[room1] = connectors[room1] || [];\n                        connectors[room1][room2] = connectors[room1][room2] || [];\n                        connectors[room1][room2].push({ q, r });\n                        connectors[room2] = connectors[room2] || [];\n                        connectors[room2][room1] = connectors[room2][room1] || [];\n                        connectors[room2][room1].push({ q, r });*/\n                    }\n                }\n            }\n\n            let groups = [...new Set(rooms)].map(a => [a]);\n            console.log(groups);\n\n            let remaining = [];\n\n            while (connectors.length > 0) {\n                let idx = rand(0, connectors.length);\n                let choice = connectors.splice(idx, 1)[0];\n                maze[choice.r][choice.q] = choice.room1;\n\n                let group1 = groups.find(group => group.includes(choice.room1));\n                let group2 = groups.find(group => group.includes(choice.room2));\n\n                connectors = connectors.filter(c => {\n                    let handled =\n                        (group1.includes(c.room1) && group2.includes(c.room2)) ||\n                        (group2.includes(c.room1) && group1.includes(c.room2));\n                    if (handled) remaining.push(c);\n                    return !handled;\n                });\n\n                if (group1 !== group2) {\n                    groups.splice(groups.indexOf(group2), 1);\n                    group1.push(...group2);\n                }\n            }\n\n            console.log(\"do REMAINING\", remaining.length);\n            for (let choice of remaining) {\n                let flood = Geometry.flood(maze, { q: choice.q + choice.cq, r: choice.r + choice.cr }, 20);\n                let value = flood[choice.r - choice.cr][choice.q - choice.cq];\n                if (value > 15 && rand() < 0.33) {\n                    maze[choice.r][choice.q] = choice.room1;\n                }\n            }\n\n            console.log(remaining);\n    /*\n            while (groups.length > 1) {\n                let a = rand(0, groups.length);\n                let b = (a + 1) % groups.length;\n                let possible = connectors.filter(pair => groups[a].includes(pair.room1) && groups[b].includes(pair.room2));\n                console.log(possible);\n                let choice = possible[rand(0, possible.length)];\n\n                maze[choice.r][choice.q] = pair.room1;\n                groups.splice(b, 1);\n                groups[a] = groups[a].concat(groups[b]);\n            }\n            */\n\n            /*for (let pair of Object.keys(connectors)) {\n                let choice = connectors[pair][rand(0, connectors[pair].length)];\n                maze[choice.r][choice.q] = 2;\n            }*/\n        },\n\n        pruneDeadEnds(maze, rand) {\n            let deadEnds = [];\n\n            for (let r = 0; r < maze.length; r++) {\n                for (let q = 0; q < maze[0].length; q++) {\n                    if (maze[r][q] && MazeGenerator.openCrossCells(maze, q, r).length >= 3) {\n                        deadEnds.push({ q, r });\n                    }\n                }\n            }\n\n            while (deadEnds.length > 0) {\n                let idx = rand(0, deadEnds.length);\n                let cell = deadEnds.splice(idx, 1)[0];\n\n                if (rand() < 0.45) {\n                    let possible = CARDINALS.filter(dir => {\n                        return MazeGenerator.openCrossCells(maze, cell.q + dir.q, cell.r + dir.r).length <= 2 &&\n                          (cell.q+dir.q) >= 0 && (cell.q+dir.q) < maze[0].length &&\n                          (cell.r+dir.r) >= 0 && (cell.r+dir.r) < maze.length;\n                    });\n                    let choice = possible[rand(0, possible.length)];\n                    if (choice) {\n                        maze[cell.r + choice.r][cell.q + choice.q] = maze[cell.r][cell.q];\n                        continue;\n                    }\n                }\n\n                if (rand() > 0.05) {\n                    maze[cell.r][cell.q] = 0;\n                    CARDINALS.forEach(dir => {\n                        let [cq, cr] = [cell.q + dir.q, cell.r + dir.r];\n                        if (maze[cr][cq] && MazeGenerator.openCrossCells(maze, cq, cr).length >= 3 &&\n                            cq >= 0 && cq < maze[0].length && cr >= 0 && cr < maze.length) {\n                            deadEnds.push({ q: cq, r: cr });\n                        }\n                    });\n                }\n            }\n        },\n\n        createRoomLookup(rooms) {\n            return rooms.reduce((hash, room) => {\n                hash[room.roomNumber] = hash[room.roomNumber] || [];\n                hash[room.roomNumber].push(room);\n                return hash;\n            }, {});\n        },\n\n        createWalls(maze, rooms) {\n            let walls = Geometry.array2d(maze[0].length, maze.length, 0);\n            for (let r = 0; r < walls.length; r++) {\n                for (let q = 0; q < walls[0].length; q++) {\n                    if (maze[r][q]) {\n                        let room = rooms[maze[r][q]];\n                        if (room && room[0]) room = room[0];\n\n                        walls[r][q] = (maze[r - 1][q] ? 0 : Constants.WALL_TOP) |\n                                      (maze[r][q + 1] ? 0 : Constants.WALL_RIGHT) |\n                                      (maze[r + 1][q] ? 0 : Constants.WALL_BOTTOM) |\n                                      (maze[r][q - 1] ? 0 : Constants.WALL_LEFT);\n\n                        if (room) {\n                            walls[r][q] |= (maze[r - 1][q] && r === room.r ? Constants.OPEN_TOP : 0) |\n                                           (maze[r][q + 1] && q === room.q + room.width - 1 ? Constants.OPEN_RIGHT : 0) |\n                                           (maze[r + 1][q] && r === room.r + room.height - 1 ? Constants.OPEN_BOTTOM : 0) |\n                                           (maze[r][q - 1] && q === room.q ? Constants.OPEN_LEFT : 0);\n                        }\n                    }\n                }\n            }\n            return walls;\n        },\n\n        createTiles(maze, rand) {\n            let tiles = Geometry.array2d(maze[0].length, maze.length, () => {\n                return (rand() < 0.1 ? Constants.TILE_WALL2 : Constants.TILE_WALL1);\n            });\n            for (let r = 0; r < tiles.length; r++) {\n                for (let q = 0; q < tiles[0].length; q++) {\n                    if (maze[r][q]) {\n                        tiles[r][q] = Constants.TILE_FLOOR1;\n                    }\n                }\n            }\n            return tiles;\n        },\n\n        generate(seed) {\n            let maze = Geometry.array2d(99, 99, 0);\n            let rand = Random.seed(seed);\n\n            let roomNumber = 1;\n\n            let result = MazeGenerator.attemptRoomPlacement(maze, rand, [{ q: 0, r: 0 }, { q: 99, r: 99 }], 7, 7, roomNumber++);\n            let rooms = [result];\n\n            for (let i = 0; i < 150; i++) {\n                let w = rand(3, 4) * 2 + 1;\n                let h = rand(3, 4) * 2 + 1;\n                result = MazeGenerator.attemptRoomPlacement(maze, rand, [{ q: 0, r: 0 }, { q: 99, r: 99 }], w, h, roomNumber);\n                if (result) rooms.push(result);\n                if (result && result.roomNumber === roomNumber) roomNumber++;\n            }\n            for (let i = 0; i < 150; i++) {\n                let w = rand(2, 4) * 2 + 1;\n                let h = rand(2, 4) * 2 + 1;\n                result = MazeGenerator.attemptRoomPlacement(maze, rand, [{ q: 0, r: 0 }, { q: 99, r: 99 }], w, h, roomNumber);\n                if (result) rooms.push(result);\n                if (result && result.roomNumber === roomNumber) roomNumber++;\n            }\n            for (let i = 0; i < 150; i++) {\n                let w = rand(1, 4) * 2 + 1;\n                let h = rand(1, 4) * 2 + 1;\n                result = MazeGenerator.attemptRoomPlacement(maze, rand, [{ q: 0, r: 0 }, { q: 99, r: 99 }], w, h, roomNumber);\n                if (result) rooms.push(result);\n                if (result && result.roomNumber === roomNumber) roomNumber++;\n            }\n\n            /*\n            random room placement\n\n            for (let i = 0; i < 900; i++) {\n                let w = rand(1, 4) * 2 + 1;\n                let h = rand(1, 4) * 2 + 1;\n                result = MazeGenerator.attemptRoomPlacement(maze, rand, [{ q: 0, r: 0 }, { q: 99, r: 99 }], w, h, roomNumber++);\n                console.log(result);\n            }\n            */\n\n            for (let r = 1; r < 99; r += 2) {\n                for (let q = 1; q < 99; q += 2) {\n                    if (MazeGenerator.openCrossCells(maze, q, r).length === 5) {\n                        MazeGenerator.carveMaze(maze, rand, q, r, roomNumber++);\n                    }\n                }\n            }\n\n            MazeGenerator.carveConnectors(maze, rand);\n\n            MazeGenerator.pruneDeadEnds(maze, rand);\n\n            let homeflow = Geometry.flood(maze, rooms[0]);\n            let roomLookup = this.createRoomLookup(rooms);\n\n            return {\n                maze,\n                walls: this.createWalls(maze, roomLookup),\n                tiles: this.createTiles(maze, rand),\n                rand,\n                rooms: roomLookup,\n                flowhome: homeflow\n            };\n        }\n    };\n\n    const C_WIDTH = 3;\n    const C_HEIGHT = 5;\n\n    // Very simple variable-width font implementation. The characters in the font strip\n    // are left-aligned in their 3x5 pixel boxes, so in order to have variable width,\n    // we just need to note the characters that AREN'T full width. Anything not in\n    // this list has full shift (3+1 = 4 pixels).\n    const C_SHIFT = {\n        32: 3,          // Space\n        44: 3,          // Comma\n        46: 3,          // Period\n        73: 2           // I\n    };\n\n    /**\n     * Text\n     *\n     * Utilities for drawing text using in-game pixel font.\n     */\n    const Text = {\n        async init() {\n            this.default = Sprite.font.img;\n            this.fire = this.recolor(this.default, ctx => {\n                let gradient = ctx.createLinearGradient(0, 0, 0, this.default.height);\n                gradient.addColorStop(0, 'rgba(240,134,51,1)');\n                gradient.addColorStop(1, 'rgba(250,220,74,1)');\n                return gradient;\n            });\n            this.shadow = this.recolor(this.default, 'rgba(240, 240, 255, 0.25)');\n        },\n\n        drawText(ctx, text, u, v, font = this.default, scale = 1) {\n            text = text.toUpperCase();\n            for (let idx = 0; idx < text.length; idx++) {\n                let c = text.charCodeAt(idx);\n                ctx.drawImage(\n                    font,\n                    (c - 32) * (C_WIDTH + 1), 0, C_WIDTH, C_HEIGHT,\n                    u, v, C_WIDTH * scale, C_HEIGHT * scale\n                );\n                u += (C_SHIFT[c] || (C_WIDTH + 1)) * scale;\n            }\n        },\n\n        drawRightText(ctx, text, u, v, font = this.default, scale = 1) {\n            text = text.toUpperCase();\n            u -= this.measureWidth(text, scale);\n            this.drawText(ctx, text, u, v, font, scale);\n        },\n\n        drawParagraph(ctx, text, u, v, w, h, font = this.default, scale = 1) {\n            let cu = u, cv = v, phrases = text.toUpperCase().split(' ');\n\n            for (let phrase of phrases) {\n                let phraseWidth = this.measureWidth(phrase, scale);\n                if (cu + phraseWidth - u > w) {\n                    cu = u;\n                    cv += (C_HEIGHT + 2) * scale;\n                }\n                this.drawText(ctx, phrase, cu, cv, font, scale);\n                cu += phraseWidth + (C_SHIFT[32] );\n            }\n        },\n\n        measureWidth(text, scale) {\n            return text.split('').reduce((sum, c) => sum + (C_SHIFT[c.charCodeAt(0)] || 4), 0) * scale;\n        },\n\n        recolor(font, color) {\n            let canvas = new Canvas(font.width, font.height);\n            canvas.ctx.fillStyle = typeof color === \"function\" ? color(canvas.ctx) : color;\n            canvas.ctx.fillRect(0, 0, font.width, font.height);\n            console.log(font.width, font.height, color, canvas);\n            canvas.ctx.globalCompositeOperation = 'destination-in';\n            canvas.ctx.drawImage(font, 0, 0);\n            return canvas.canvas;\n        },\n    };\n\n    /**\n     * Detection\n     */\n    const Detection = {\n      lineOfSight(a, b) {\n          // todo: this checks center mass\n          for (let tile of Geometry.tilesHitBetween(a.pos, b.pos)) {\n            if (!Geometry.tileIsPassable(tile.q, tile.r)) return false;\n          }\n\n          // todo: distance away\n          // todo: facing check\n          return true;\n      }\n    };\n\n    /**\n     * Behavior\n     */\n    const Behavior = {\n      IDLE:   101,\n      WANDER: 102,\n      CHASE:  103,\n      HUNT:   104,\n      FLEE:   105,\n      DEAD:   106,\n\n      ATTACK: 201,\n      RELOAD: 202,\n\n      apply(entities) {\n        for (let entity of entities) {\n          if (entity.think) entity.think();\n        }\n      }\n    };\n\n    /**\n     * Monster\n     */\n    class Monster {\n      constructor() {\n        this.pos = { x: 0, y: 0 };\n        this.vel = { x: 0, y: 0 };\n        this.facing = { x: 0, y: -1, m: 0 };\n        this.hp = 100;\n        this.damage = [];\n        this.radius = 11;\n\n        this.mass = 0.5;\n      }\n\n      think() {\n        switch (this.state) {\n          case Behavior.IDLE:\n            if (Detection.lineOfSight(this, game.player)) {\n              this.state = Behavior.CHASE;\n            }\n            break;\n          case Behavior.CHASE:\n            let diff = Geometry.vectorBetween(this.pos, game.player.pos);\n            diff.m = Geometry.clamp(diff.m, 0, 1);\n            this.vel = { x: diff.x * diff.m, y: diff.y * diff.m };\n            break;\n          case Behavior.DEAD:\n            this.vel = { x: 0, y: 0, m: 0 };\n            if (!this.cullt) this.cullt = 15;\n            this.cullt--;\n            if (this.cullt < 1) this.cull = true;\n            break;\n          default:\n            this.state = Behavior.IDLE;\n            break;\n        }\n      }\n\n      draw(viewport) {\n        // TODO\n        if (this.state === Behavior.DEAD) {\n          Sprite.drawViewportSprite(viewport, Sprite.monster_dead, this.pos, game.camera.pos);\n        } else {\n          Sprite.drawViewportSprite(viewport, Sprite.monster, this.pos, game.camera.pos);\n        }\n      }\n    }\n\n    class ShotgunBlast {\n      constructor(pos, angle) {\n        this.pos = { ...pos };\n        this.angle = angle;\n        this.spread = Geometry.RAD[70];\n        this.range = 55;\n      }\n\n      think() {\n        this.t = (this.t || 0) + 1;\n\n        if (this.t === 3) {\n          let entities = game.entities.filter(entity => entity.hp && !(entity instanceof Player));\n          for (let entity of entities) {\n            let vect = Geometry.vectorBetween(this.pos, entity.pos);\n            if (vect.m >= this.range + entity.radius) continue;\n\n            let dot1 = Geometry.vectorBetween(\n              this.pos,\n              { x: entity.pos.x - vect.y * entity.radius, y: entity.pos.y + vect.x * entity.radius }\n            );\n            let dot2 = Geometry.vectorBetween(\n              this.pos,\n              { x: entity.pos.x + vect.y * entity.radius, y: entity.pos.y - vect.x * entity.radius }\n            );\n            let sides = [Geometry.vector2angle(dot1), Geometry.vector2angle(dot2)];\n            let overlap = Geometry.arcOverlap(sides[0], sides[1], this.angle - this.spread / 2, this.angle + this.spread / 2);\n            if (!overlap) continue;\n\n            let wallHit = [];\n            let k = Geometry.vectorAdd(this.pos, Geometry.angle2vector(sides[0], vect.m));\n            for (let tile of Geometry.tilesHitBy(this.pos, Geometry.angle2vector(sides[0], vect.m))) {\n              if (!Geometry.tileIsPassable(tile.q, tile.r)) {\n                wallHit.push(tile);\n                break;\n              }\n            }\n            for (let tile of Geometry.tilesHitBy(this.pos, Geometry.angle2vector(sides[1], vect.m))) {\n              if (!Geometry.tileIsPassable(tile.q, tile.r)) {\n                wallHit.push(tile);\n                break;\n              }\n            }\n\n            if (wallHit.length < 2) {\n              // hit\n              entity.damage.push({ amount: 100, vector: vect });\n            }\n          }\n        }\n\n        if (this.t > 6) this.cull = true;\n      }\n\n      draw(viewport) {\n        // TODO\n        //Sprite.drawViewportSprite(viewport, Sprite.monster, this.pos, game.camera.pos);\n        let uv = Geometry.xy2uv(this.pos);\n        viewport.ctx.beginPath();\n        viewport.ctx.arc(uv.u, uv.v, this.range, this.angle - this.spread / 2, this.angle + this.spread / 2);\n        viewport.ctx.lineTo(uv.u, uv.v);\n        viewport.ctx.closePath();\n        viewport.ctx.fillStyle = 'rgba(255, 0, 0, 0.5)';\n        viewport.ctx.fill();\n      }\n    }\n\n    class ReloadAnimation {\n      constructor(frames) {\n        this.t = -1;\n        this.d = frames;\n        this.z = 101;\n      }\n\n      think() {\n        if (++this.t === this.d) this.cull = true;\n      }\n\n      draw(viewport) {\n        for (let i = 0; i < game.player.shellsMax; i++) {\n          let end = i * this.d / game.player.shellsMax;\n          let start = end - 3;\n\n          if (this.t >= start) {\n            let y = Math.min(10, 10 + this.t - end);\n            viewport.ctx.globalAlpha = Math.min(1, 1 + (this.t - end) / 10);\n            viewport.ctx.drawImage(Sprite.hud_shells_full.img, 15 + 6 * i, y);\n            viewport.ctx.globalAlpha = 1;\n          }\n        }\n      }\n    }\n\n    /**\n     * Player\n     */\n    class Player {\n      constructor() {\n        this.pos = { x: 0, y: 0 };\n        this.vel = { x: 0, y: 0 };\n        this.facing = { x: 0, y: -1, m: 0 };\n        this.hp = 100;\n        this.damage = [];\n        this.radius = 12;\n\n        this.shellsLeft = 4;\n        this.shellsMax = 4;\n\n        this.mass = 3;\n      }\n\n      think() {\n        switch (this.state) {\n          case Behavior.HUNT:\n            this.defaultMovement(1);\n\n            if (game.input.pressed[Input.Action.ATTACK]) {\n              if (this.shellsLeft === 0) {\n                this.reload();\n              } else {\n                this.fire();\n              }\n            }\n\n            if (game.input.pressed[Input.Action.RELOAD]) {\n              this.reload();\n            }\n\n            break;\n          case Behavior.ATTACK:\n            this.defaultMovement(1);\n            if (--this.frames <= 0) this.state = Behavior.HUNT;\n            break;\n          case Behavior.RELOAD:\n            this.defaultMovement(2.5);\n            if (--this.frames <= 0) {\n              this.shellsLeft = this.shellsMax;\n              this.state = Behavior.HUNT;\n            }\n            break;\n          default:\n            this.state = Behavior.HUNT;\n            this.frames = 0;\n            break;\n        }\n      }\n\n      defaultMovement(velocityAdj) {\n        if (game.pointerXY()) {\n          this.facing = Geometry.vectorBetween(this.pos, game.pointerXY());\n        }\n\n        let v = {\n          x: game.input.direction.x * game.input.direction.m * 1.8 * velocityAdj,\n          y: game.input.direction.y * game.input.direction.m * 1.8 * velocityAdj\n        };\n\n        this.vel.x = (this.vel.x + v.x) / 2;\n        this.vel.y = (this.vel.y + v.y) / 2;\n      }\n\n      fire() {\n        this.state = Behavior.ATTACK;\n        this.frames = 6;\n        this.shellsLeft--;\n\n        let angle = Geometry.vector2angle(this.facing);\n        game.entities.push(new ShotgunBlast(this.pos, angle));\n\n        // player knockback\n        this.vel = Geometry.vector2point({ ...Geometry.normalizeVector(this.facing), m: -1 });\n      }\n\n      reload() {\n        this.state = Behavior.RELOAD;\n        this.frames = 12;\n        game.entities.push(new ReloadAnimation(this.frames));\n      }\n\n      draw(viewport) {\n        Sprite.drawViewportSprite(viewport, Sprite.player, this.pos, game.camera.pos);\n\n        viewport.ctx.strokeStyle = 'rgba(255, 255, 64, 0.3)';\n        viewport.ctx.beginPath();\n        let uv = game.xy2uv(this.pos);\n        viewport.ctx.arc(uv.u, uv.v, Constants.PLAYER_BOUND_RADIUS, 0, 2 * Math.PI);\n        viewport.ctx.setLineDash([2, 1]);\n        viewport.ctx.stroke();\n        viewport.ctx.setLineDash([]);\n      }\n    }\n\n    /**\n     * Monster\n     */\n    class Sculptor {\n      constructor() {\n        this.pos = { x: 0, y: 0 };\n        this.vel = { x: 0, y: 0 };\n        this.facing = { x: 0, y: -1, m: 0 };\n        this.hp = 100;\n        this.damage = [];\n        this.radius = 3;\n\n        this.mass = 1;\n\n        this.bounce = true;\n      }\n\n      think() {\n        switch (this.state) {\n          case Behavior.IDLE:\n            this.facing = Geometry.angle2vector(Math.random() * Math.PI * 2);\n            this.vel = this.facing;\n            this.state = Behavior.CHASE;\n            break;\n          case Behavior.CHASE:\n            let playerAngle = Geometry.vector2angle(Geometry.vectorBetween(this.pos, game.player.pos));\n            let velAngle = Geometry.vector2angle(this.vel);\n\n            /*if (G.closestAngleDifference(velAngle, playerAngle) < C.R90) {\n                velAngle = G.intermediateAngle(velAngle, playerAngle, 0.01);\n                this.vel = G.angle2vector(velAngle);\n            }*/\n\n            let v = Geometry.normalizeVector(this.vel);\n            v.m = (v.m + 3) / 2;\n            this.vel = Geometry.vector2point(v);\n            break;\n          case Behavior.DEAD:\n            this.vel = { x: 0, y: 0, m: 0 };\n            if (!this.cullt) this.cullt = 15;\n            this.cullt--;\n            if (this.cullt < 1) this.cull = true;\n            break;\n          default:\n            this.state = Behavior.IDLE;\n            break;\n        }\n      }\n\n      draw(viewport) {\n        // TODO\n        if (this.state === Behavior.DEAD) {\n          Sprite.drawViewportSprite(viewport, Sprite.monster_dead, this.pos, game.camera.pos);\n        } else {\n          let { u, v } = Sprite.viewportSprite2uv(viewport, Sprite.sawblade, this.pos, game.camera.pos);\n          u += Sprite.sawblade.anchor.x;\n          v += Sprite.sawblade.anchor.y;\n\n          viewport.ctx.save();\n          viewport.ctx.translate(u, v);\n          viewport.ctx.rotate(game.frame / 5);\n          Sprite.drawSprite(viewport.ctx, Sprite.sawblade, 0, 0);\n          viewport.ctx.restore();\n          Sprite.drawSprite(viewport.ctx, Sprite.sawblade_eyes, u, v);\n        }\n      }\n    }\n\n    const Menu = {\n        draw(viewport) {\n\n            return;\n\n            /*\n            Text.drawText(ctx, \"Abominable Snowman\", 120, 50);\n            Text.drawText(ctx, \"Abominable Snowman\", 121, 50, Text.shadow);\n            Text.drawRightText(ctx, \"500\", 120, 70);\n            Text.drawRightText(ctx, \"1,200\", 120, 80);\n            Text.drawRightText(ctx, \"5,000\", 120, 90);\n            Text.drawRightText(ctx, \"5,000\", 121, 91, Text.shadow);\n\n\n            5px 7px 9px\n\n            draw(viewport) {\n                Sprite.drawViewportSprite(viewport, Sprite.player, this.pos, game.camera.pos);\n\n                viewport.ctx.strokeStyle = 'rgba(255, 255, 64, 0.3)';\n                viewport.ctx.beginPath();*/\n\n        }\n    };\n\n    class BattleStreamAnimation {\n      constructor(pos) {\n        this.t = -1;\n        this.d = 16;\n        this.z = -5;\n        this.pos = pos;\n      }\n\n      think() {\n        if (++this.t === this.d) this.cull = true;\n      }\n\n      draw(viewport) {\n        if (this.t >= 0 && this.t < 16) {\n          let f = Math.floor(this.t / 2);\n          Sprite.drawViewportSprite(viewport, Sprite.battle_stream[f], { x: this.pos.x, y: this.pos.y + f / 2 }, game.camera.pos);\n        }\n      }\n    }\n\n    /**\n     * Movement\n     */\n    const Movement = {\n      apply(entities) {\n        // Movement only applies to active entities with positions and velocities\n        let movers = entities.filter(entity => entity.pos && entity.vel && !entity.cull);\n\n        // Very basic \"rounds\" of collision resolution, since we have no real physics.\n        // (As usual, \"detecting\" a collision is not the hard part... we need to resolve\n        // them too!)\n        for (let rounds = 0; rounds < 5; rounds++) {\n          // Each pair of entities only needs to interact once.\n          for (let i = 0; i < movers.length - 1; i++) {\n            for (let j = i + 1; j < movers.length; j++) {\n              this.clipVelocityEntityVsEntity(movers[i], movers[j]);\n            }\n          }\n\n          for (let entity of movers) {\n            this.clipVelocityAgainstWalls(entity);\n          }\n        }\n\n        // Now we apply all movement, even if it's not going to be perfect.\n        for (let entity of movers) {\n          entity.pos.x += entity.vel.x;\n          entity.pos.y += entity.vel.y;\n        }\n      },\n\n      clipVelocityEntityVsEntity(entity, other) {\n        let hit = Geometry.intersectCircleCircle2(\n          entity.pos, entity.radius, entity.vel,\n          other.pos, other.radius, other.vel\n        );\n        if (hit) {\n          if (entity.bounce && other.bounce) {\n            entity.vel.x = -hit.nx * hit.m;\n            entity.vel.y = -hit.ny * hit.m;\n            other.vel.x = hit.nx * hit.m;\n            other.vel.y = hit.ny * hit.m;\n          } else {\n            // Not a bug: we \"add\" the mass of the opposing entity to our own velocity when deciding who\n            // is at fault for the collision. Entity velocities adjust in relation to their fault level.\n            let entityM = Geometry.normalizeVector(entity.vel).m + other.mass;\n            let otherM = Geometry.normalizeVector(other.vel).m + entity.mass;\n            let entityI = entity.bounce ? 0.1 : 1;\n            let otherI = other.bounce ? 0.1 : 1;\n            entity.vel.x -= hit.nx * hit.m * entityI * entityM / (entityM + otherM);\n            entity.vel.y -= hit.ny * hit.m * entityI * entityM / (entityM + otherM);\n            other.vel.x += hit.nx * hit.m * otherI * otherM / (entityM + otherM);\n            other.vel.y += hit.ny * hit.m * otherI * otherM / (entityM + otherM);\n          }\n        }\n      },\n\n      clipVelocityAgainstWalls(entity) {\n        for (let tile of Geometry.tilesHitByCircle(entity.pos, entity.vel, entity.radius)) {\n          if (!Geometry.tileIsPassable(tile.q, tile.r)) {\n            let bounds = [Geometry.qr2xy(tile), Geometry.qr2xy({ q: tile.q + 1, r: tile.r + 1 })];\n            let hit = Geometry.intersectCircleRectangle(\n              entity.pos,\n              { x: entity.pos.x + entity.vel.x, y: entity.pos.y + entity.vel.y },\n              entity.radius,\n              bounds\n            );\n\n            // The \"math\" part of detecting collision with walls is buried in the geometry functions\n            // above, but it's not the whole story -- if we do detect a collision, we still need to\n            // decide what to do about it.\n            //\n            // If the normal vector is horizontal or vertical, we zero out the portion of the vector\n            // moving into the wall, allowing frictionless sliding (if we wanted to apply friction,\n            // we could also reduce the other axis slightly).\n            //\n            // If the normal vector is not 90*, we \"back up\" off the wall by exactly the normal vector.\n            // If the player runs into a corner at EXACTLY a 45 degree angle, they will simply \"stick\"\n            // on it -- but one degree left or right and they'll slide around the corner onto the wall,\n            // which is the desired result.\n            if (hit) {\n              if (entity.bounce) {\n                if (hit.nx === 0) {\n                  entity.vel.y = -entity.vel.y;\n                } else if (hit.ny === 0) {\n                  entity.vel.x = -entity.vel.x;\n                } else {\n                  entity.vel.x += hit.nx;\n                  entity.vel.y += hit.ny;\n                }\n              } else {\n                if (hit.nx === 0) {\n                  entity.vel.y = hit.y - entity.pos.y;\n                } else if (hit.ny === 0) {\n                  entity.vel.x = hit.x - entity.pos.x;\n                } else {\n                  entity.vel.x += hit.nx;\n                  entity.vel.y += hit.ny;\n                }\n              }\n            }\n          }\n        }\n      }\n    };\n\n    /**\n     * Damage\n     */\n    const Damage = {\n      apply(entities) {\n        for (let entity of entities) {\n          if (typeof entity.hp === 'number') {\n            if (entity.damage.length > 0) {\n              for (let damage of entity.damage) {\n                entity.hp -= damage.amount;\n                damage.vector.m = 10; // push back amount\n                entity.vel = Geometry.vectorAdd(entity.vel, damage.vector);\n              }\n              entity.damage = [];\n            }\n            if (entity.hp <= 0) entity.state = Behavior.DEAD;\n          }\n        }\n      }\n    };\n\n    /*import { Input } from './Input';\n    import { Player } from './Player';\n    import { ScreenShake } from './ScreenShake';\n    import { Hud } from './Hud';\n    import { Menu, PauseMenu, IntroMenuA, IntroMenuB, OutroMenu } from './Menu';\n    import { Audio } from './Audio';\n    import { Assets, Sprite, drawPoly } from './Assets';\n    import { Demon1 } from './Demon1';\n    import { Canvas } from './Canvas';\n    import { Particle, PortalParticle, SuperParticle } from './Particle';\n    import { Hive } from './Hive';\n    import { Point, intersectingPolygons, intersectingCircles, RAD, vectorFromAngle, distance } from './Geometry';\n    import { HEARTBEAT } from './Config';\n    import { Tween } from './Tween';\n    */\n\n    /**\n     * Game state.\n     */\n    class Game {\n        constructor() {\n        }\n\n        async init() {\n            viewport.init();\n\n            this.input = new Input();\n            await this.input.init();\n\n            //this.maze = MazeGenerator.generate(\"apples\");\n            //this.maze = MazeGenerator.generate(\"manhattan\");\n            this.maze = MazeGenerator.generate(\"arkham\");\n            this.camera = { pos: { x: 1, y: 1 } };\n\n            await Assets.init();\n            await Text.init();\n\n            this.entities = [];\n\n            this.player = new Player();\n            console.log(this.maze.rooms);\n            this.player.pos.x = (this.maze.rooms[1][0].q + Math.floor(this.maze.rooms[1][0].width / 2)) * Constants.TILE_WIDTH + Constants.TILE_WIDTH / 2;\n            this.player.pos.y = (this.maze.rooms[1][0].r + Math.floor(this.maze.rooms[1][0].height / 2)) * Constants.TILE_WIDTH + Constants.TILE_WIDTH / 2;\n\n            this.entities.push(this.player);\n\n            this.roomsCleared = [];\n\n            /*\n\n            await Assets.init();\n\n            this.artifacts = [\n                await Assets.grayscaleNoise(this.canvas.width, this.canvas.height),\n                await Assets.grayscaleNoise(this.canvas.width, this.canvas.height),\n                await Assets.grayscaleNoise(this.canvas.width, this.canvas.height)\n            ];\n\n            this.input = new Input();\n            await this.input.init();\n\n            this.player = new Player();\n\n            this.hud = new Hud();\n\n            this.particles = [];\n            this.screenshakes = [];\n            this.menuStack = [];\n\n            this.monsters = [];\n\n            // Create, but do not initialize, the audio object. The audio object will be\n            // initialized as soon as possible by the first user input event, to meet\n            // requirements of the browser.\n            this.audio = new Audio();\n\n            this.score = 0;\n\n            this.hive = new Hive();\n\n            */\n        }\n\n        start() {\n            this.frame = 0;\n\n            this.started = true;\n            this.update();\n            this.started = false;\n\n            /*\n            this.menuStack.push(new IntroMenuA({\n                onClose: () => {\n                    this.menuStack.push(new IntroMenuB({}));\n                }\n            }));*/\n\n            //this.framems = performance.now();\n            window.requestAnimationFrame(() => this.onFrame(1));\n            //this.frame = 0;\n        }\n\n        onFrame(currentms) {\n            this.frame++;\n            viewport.resize();\n            this.update();\n            this.draw(viewport.ctx);\n            window.requestAnimationFrame(() => this.onFrame(currentms));\n        }\n\n        update() {\n            // Pull in frame by frame button pushes / keypresses / mouse clicks\n            this.input.update();\n\n            // Behavior (AI, player input, etc.)\n            Behavior.apply(this.entities);\n\n            // Apply any queued damage\n            Damage.apply(this.entities);\n\n            // Movement (apply entity velocities to position)\n            Movement.apply(this.entities);\n\n            // Culling (typically set when an entity dies)\n            this.entities = this.entities.filter(entity => !entity.cull);\n\n            // camera logic! where does it go! (an entity perhaps?)\n            let diff = {\n                x: this.player.pos.x - this.camera.pos.x,\n                y: this.player.pos.y - this.camera.pos.y\n            };\n            this.camera.pos.x += diff.x * 0.2;\n            this.camera.pos.y += diff.y * 0.2;\n\n            //this.spawnEnemy();\n\n            if (!this.activeBattle) {\n                let qr = Geometry.xy2qr(game.player.pos);\n                let room = this.maze.rooms[this.maze.maze[qr.r][qr.q]];\n                if (room && room.length) room = room[0];\n\n                if (room && !this.roomsCleared.includes(room.roomNumber) && room.width > 4 && room.height > 4 &&\n                    qr.q > room.q && qr.r > room.r && qr.q < room.q + room.width - 1 && qr.r < room.r + room.height - 1) {\n                    this.activeBattle = {\n                        room,\n                        enemies: [],\n                        plan: [\n                            {\n                                frame: this.frame + 10,\n                                x: Math.floor(Math.random() * (room.width * 32)) + room.q * 32,\n                                y: Math.floor(Math.random() * (room.height * 32)) + room.r * 32,\n                            },\n                            {\n                                frame: this.frame + 70,\n                                x: Math.floor(Math.random() * (room.width * 32)) + room.q * 32,\n                                y: Math.floor(Math.random() * (room.height * 32)) + room.r * 32,\n                            }\n                        ]\n                    };\n                    console.log(\"BATTLE STARTED\", room);\n                }\n            }\n\n            if (this.activeBattle) {\n                if (this.activeBattle.plan.length === 0) {\n                    if (this.activeBattle.enemies.filter(enemy => !enemy.cull).length === 0) {\n                        this.roomsCleared.unshift(this.activeBattle.room.roomNumber);\n                        this.activeBattle = undefined;\n                        console.log(\"BATTLE FINISHED\", this.roomsClear);\n                    }\n                } else {\n                    if (this.frame >= this.activeBattle.plan[0].frame) {\n                        let spawn = this.activeBattle.plan.shift();\n                        let monster = new Sculptor();\n                        monster.pos = { x: spawn.x, y: spawn.y };\n                        this.entities.push(monster);\n                        this.activeBattle.enemies.push(monster);\n                    }\n                }\n            }\n\n            let u = Math.floor(Math.random() * (480 + 50)) - 25,\n                v = Math.floor(Math.random() * (270 + 50)) - 25;\n            let qr = this.uv2xy({ u, v });\n            this.entities.push(new BattleStreamAnimation(qr));\n        }\n\n        spawnEnemy() {\n            let enemies = this.entities.filter(entity => entity instanceof Monster);\n            if (enemies.length < 4 && Math.random() < 0.1) {\n                let q = this.maze.rooms[1][0].q + this.maze.rand(0, this.maze.rooms[1][0].width);\n                let r = this.maze.rooms[1][0].r + this.maze.rand(0, this.maze.rooms[1][0].height);\n                let monster = new Monster();\n                monster.pos = Geometry.qr2xy({ q, r });\n                this.entities.push(monster);\n            }\n        }\n\n        draw(ctx) {\n            ctx.setTransform(1, 0, 0, 1, 0, 0);\n            ctx.scale(viewport.scale, viewport.scale);\n\n            if (this.activeBattle) {\n                ctx.fillStyle = 'rgba(128,20,20,1)';\n                ctx.fillRect(0, 0, viewport.width, viewport.height);\n            } else {\n                ctx.fillStyle = 'rgba(20,20,20,1)';\n                ctx.fillRect(0, 0, viewport.width, viewport.height);\n            }\n\n            /*ctx.fillStyle = 'rgba(150, 128, 128, 1)';\n            ctx.fillRect(10, 10, 100, 100);*/\n\n            for (let entity of this.entities) {\n                if (entity.z < 0) entity.draw(viewport);\n            }\n\n            this.drawMaze(ctx, this.maze);\n\n            for (let entity of this.entities) {\n                if (entity.z > 0 || !entity.z) entity.draw(viewport);\n            }\n\n            this.drawHud(ctx);\n\n            /*\n            ctx.fillStyle = 'rgba(150, 128, 128, 1)';\n            ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n            this.shadow.ctx.globalCompositeOperation = 'copy';\n            //this.shadow.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n            this.shadow.ctx.fillStyle = 'rgba(0, 0, 0, 0.99)';\n            this.shadow.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n            this.shadow.ctx.globalCompositeOperation = 'destination-out';\n            let grd = this.shadow.ctx.createRadialGradient(game.player.x, game.player.y, 0, game.player.x, game.player.y, 200);\n            grd.addColorStop(0, \"rgba(0, 0, 0, 1)\");\n            grd.addColorStop(0.5, \"rgba(0, 0, 0, 0.95)\");\n            grd.addColorStop(1, \"rgba(0, 0, 0, 0)\");\n            this.shadow.ctx.fillStyle = grd;\n            this.shadow.ctx.beginPath();\n            this.shadow.ctx.arc(game.player.x, game.player.y, 200, 0, 2 * Math.PI);\n            this.shadow.ctx.fill();\n\n            for (let particle of this.particles.filter(p => p instanceof PortalParticle)) {\n                let r = (particle as PortalParticle).effectiveRadius();\n                this.shadow.ctx.globalCompositeOperation = 'destination-out';\n                let grd = this.shadow.ctx.createRadialGradient(particle.x, particle.y, 0, particle.x, particle.y, r);\n                grd.addColorStop(0, \"rgba(0, 0, 0, 0.7)\");\n                grd.addColorStop(1, \"rgba(0, 0, 0, 0)\");\n                this.shadow.ctx.fillStyle = grd;\n                this.shadow.ctx.beginPath();\n                this.shadow.ctx.arc(particle.x, particle.y, r, 0, 2 * Math.PI);\n                this.shadow.ctx.fill();\n            }\n\n            this.shadow.ctx.globalCompositeOperation = 'source-atop';\n            for (let monster of this.monsters) {\n                this.shadow.ctx.beginPath();\n                this.shadow.ctx.arc(monster.x, monster.y, 200, 0, 2 * Math.PI);\n            }\n\n            /*\n              we don't even use bloodplanes (splatter terrain) anymore because i just\n              render all of them as particles\n            ctx.globalAlpha = 1 - this.bloodplanes[0][1] / this.bloodplanes[0][2];\n            ctx.globalAlpha = 0.9;\n            ctx.drawImage(this.bloodplanes[0][0].canvas, 0, 0);\n            ctx.globalAlpha = 1 - this.bloodplanes[1][1] / this.bloodplanes[1][2];\n            ctx.drawImage(this.bloodplanes[1][0].canvas, 0, 0);\n            ctx.globalAlpha = 1 - this.bloodplanes[2][1] / this.bloodplanes[2][2];\n            ctx.drawImage(this.bloodplanes[2][0].canvas, 0, 0);\n            ctx.globalAlpha = 1;\n            ctx.save();\n            let shakeX = 0, shakeY = 0;\n            this.screenshakes.forEach(shake => {\n                shakeX += shake.x;\n                shakeY += shake.y;\n            });\n            ctx.translate(shakeX, shakeY);\n\n            // low-hanging fruit here (pre-render the map since it never changes)\n            for (let i = 0; i < 16; i++) {\n                for (let j = 0; j < 10; j++) {\n                    let k = ((i * i * 13) + j * 17) % 9;\n                    Sprite.drawSprite(ctx, Sprite.tiles[k], i * 32 - 16, j * 32 - 8);\n                }\n            }\n\n            for (let particle of this.particles) if (!particle.foreground && !game.superFired) particle.draw(ctx);\n\n            this.player.draw(ctx);\n\n            //Text.renderText(ctx, 250, 120, 20, 'THE ELEPHANTS');\n            //Text.renderText(ctx, 100, 200, 64, 'AB0123456789');\n            //Text.renderText(ctx, 100, 150, 30, 'AB0123456789');\n\n            for (let monster of this.monsters) monster.draw(ctx);\n\n      //      var bubble = ctx.createLinearGradient(\n            // Let's add blue noise?\n            /*for (let i = 100; i < 300; i += 5) {\n                for(let j = 100; j < 120; j += 5) {\n                    let [x, y] = [Math.random() * 5, Math.random() * 5];\n                    ctx.fillStyle = 'rgba(0,0,0,0.5)';\n                    ctx.fillRect(i+Math.floor(x),j+Math.floor(y),1,1);\n                }\n\n            for (let particle of this.particles) if (particle.foreground) particle.draw(ctx);\n\n            ctx.drawImage(this.shadow.canvas, 0, 0);\n            let noiseLoop = Math.floor(this.frame / 8) % 3;\n            ctx.globalAlpha = 0.06;\n            ctx.drawImage(this.artifacts[noiseLoop].canvas, 0, 0);\n            ctx.globalAlpha = 1;\n\n            this.hud.draw(ctx);\n            this.hive.draw(ctx);\n\n            ctx.restore();\n\n            /*\n            if (this.frame % HEARTBEAT === 0 || (this.frame - 1) % HEARTBEAT === 0 || (this.frame - 2) % HEARTBEAT === 0) {\n                ctx.fillStyle = 'rgba(255, 255, 30, 0.3)';\n                ctx.fillRect(100, 0, 100, 10);\n            */\n\n            Menu.draw(viewport);\n        }\n\n        drawMaze(ctx, maze) {\n            let offset = {\n                x: viewport.center.u - this.camera.pos.x,\n                y: viewport.center.v - this.camera.pos.y\n            };\n\n            let r1 = this.activeBattle ? this.activeBattle.room.r : 0,\n                r2 = this.activeBattle ? this.activeBattle.room.r + this.activeBattle.room.height : maze.tiles.length,\n                q1 = this.activeBattle ? this.activeBattle.room.q : 0,\n                q2 = this.activeBattle ? this.activeBattle.room.q + this.activeBattle.room.width : maze.tiles[0].length;\n\n            for (let r = r1; r < r2; r++) {\n                for (let q = q1; q < q2; q++) {\n                    let x = q * 32 + offset.x, y = r * 32 + offset.y;\n                    if (x < -50 || y < -50 || x > 500 || y > 500) continue;\n\n                    let sprite = Sprite.tiles[maze.tiles[r][q] & 0b1111];\n                    if (!sprite) throw new Error(`${q},${r} tile ${maze.tiles[r][q]}`);\n                    ctx.drawImage(sprite.img, x, y);\n                }\n            }\n\n            for (let r = r1; r < r2; r++) {\n                for (let q = q1; q < q2; q++) {\n                    let x = q * 32 + offset.x, y = r * 32 + offset.y;\n                    if (x < -50 || y < -50 || x > 500 || y > 500) continue;\n\n                    if (maze.walls[r][q] & Constants.WALL_TOP) {\n                        ctx.drawImage(Sprite.walls.img, 5, 5, 36, 4, x - 2, y - 2, 36, 4);\n                    }\n\n                    if (maze.walls[r][q] & Constants.WALL_RIGHT) {\n                        ctx.drawImage(Sprite.walls.img, 37, 5, 4, 36, x + 30, y - 2, 4, 36);\n                    }\n\n                    if (maze.walls[r][q] & Constants.WALL_BOTTOM) {\n                        ctx.drawImage(Sprite.walls.img, 5, 37, 36, 4, x - 2, y + 30, 36, 4);\n                    }\n\n                    if (maze.walls[r][q] & Constants.WALL_LEFT) {\n                        ctx.drawImage(Sprite.walls.img, 5, 5, 4, 36, x - 2, y - 2, 4, 36);\n                    }\n\n                    if (this.activeBattle) {\n                        let f = (this.frame / 8) % 3 | 0;\n\n                        if (maze.walls[r][q] & Constants.OPEN_TOP) {\n                            ctx.drawImage(Sprite.battle_door[f].img, 5, 0, 36, 9, x - 2, y - 7, 36, 9);\n                        } else if (r === r1) {\n                            ctx.drawImage(Sprite.battle_spray[f].img, 5, 0, 36, 5, x - 2, y - 7, 36, 5);\n                        }\n\n                        if (maze.walls[r][q] & Constants.OPEN_RIGHT) {\n                            ctx.drawImage(Sprite.battle_door[f].img, 37, 5, 9, 41, x + 30, y - 2, 9, 41);\n                        } else if (r === r1 && q === q2 - 1) {\n                            ctx.drawImage(Sprite.battle_spray[f].img, 41, 0, 5, 46, x + 34, y -  7, 5, 46);\n                        }\n\n                        if (maze.walls[r][q] & Constants.OPEN_BOTTOM) {\n                            ctx.drawImage(Sprite.battle_door[f].img, 5, 37, 36, 9, x - 2, y + 30, 36, 9);\n                        }\n\n                        if (maze.walls[r][q] & Constants.OPEN_LEFT) {\n                            ctx.drawImage(Sprite.battle_door[f].img, 0, 5, 9, 41, x - 7, y - 2, 9, 41);\n                        } else if (r === r1 && q === q1) {\n                            ctx.drawImage(Sprite.battle_spray[f].img, 0, 0, 5, 46, x - 7, y -  7, 5, 46);\n                        }\n                    }\n                }\n            }\n\n            // old wall logic\n            //sprite = Sprite.walls[maze.tiles[r][q] >> 4];\n            //if (sprite) ctx.drawImage(sprite.img, x, y);\n\n            //if (this.maze.flowhome[r][q] < 100)\n            //Text.drawText(ctx, String(this.maze.flowhome[r][q]), x, y);\n\n            // commented for screenshots:\n            //Text.drawText(ctx, String(maze.tiles[r][q] >> 4), x, y);\n\n            //ctx.fillRect(q * 4 - this.camera.pos.x + this.center.pixel.u, r * 4 - this.camera.pos.y + this.center.pixel.v, 4, 4);\n        }\n\n        pointerXY() {\n            if (!this.input.pointer) return;\n            return this.uv2xy(this.input.pointer);\n        }\n\n        xy2uv(pos) {\n            return {\n                u: pos.x - this.camera.pos.x + viewport.center.u,\n                v: pos.y - this.camera.pos.y + viewport.center.v\n            };\n        }\n\n        uv2xy(pos) {\n            return {\n                x: pos.u - viewport.center.u + this.camera.pos.x,\n                y: pos.v - viewport.center.v + this.camera.pos.y\n            };\n        }\n\n        drawHud(ctx) {\n            let hp = Geometry.clamp(game.player.hp, 0, 100);\n            ctx.drawImage(Sprite.hud_health_frame.img, 2, 2);\n            ctx.drawImage(Sprite.hud_health_fill.img, 0, 0, hp + 8, 8, 2, 2, hp + 8, 8);\n\n            let sprite = Sprite.hud_shells_full;\n            for (let i = 0; i < game.player.shellsMax; i++) {\n                if (i + 1 > game.player.shellsLeft) sprite = Sprite.hud_shells_empty;\n                ctx.drawImage(sprite.img, 15 + 6 * i, 10);\n            }\n\n            ctx.drawImage(Sprite.page.img, viewport.width - 39, 10 - 1);\n            Text.drawText(ctx, 'x302', viewport.width - 30, 10);\n\n            Text.drawText(ctx, String(this.frame), viewport.width - 30, viewport.height - 28);\n\n            Text.drawRightText(ctx, [viewport.scale, viewport.width, viewport.height].join(', '), viewport.width - 4, viewport.height - 18);\n            let ptr = this.input.pointer;\n            if (ptr) {\n                Text.drawRightText(ctx, JSON.stringify(ptr), viewport.width - 4, viewport.height - 8);\n                ctx.save();\n                ctx.translate(ptr.u, ptr.v);\n                ctx.rotate(this.frame / 72);\n                ctx.drawImage(Sprite.hud_crosshair.img, -Sprite.hud_crosshair.anchor.x, -Sprite.hud_crosshair.anchor.y);\n                ctx.restore();\n                //Sprite.drawSprite(ctx, Sprite.hud_crosshair, ptr.u, ptr.v);\n            }\n\n            if (!this.grab) {\n                let colors = [\n                    'rgba(20, 20, 20)',\n                    'rgba(20, 20, 20)',\n                    'rgba(32, 32, 32)',\n                    'rgba(32, 32, 32)',\n                    'rgba(64, 6, 6)',\n                    'rgba(64, 6, 6)',\n                    'rgba(128, 0, 0)',\n                    'rgba(158, 32, 32)'\n                ];\n\n                this.grab = new Canvas(100, 100);\n                for (let i = 0; i < 100; i++) {\n                    for (let j = 0; j < 100; j++) {\n                        let c = colors[Math.floor(Math.random() * colors.length)];\n                        this.grab.ctx.fillStyle = c;\n                        this.grab.ctx.fillRect(i, j, 1, 1);\n                    }\n                }\n                this.grab.ctx.globalOpacity = 0.1;\n                this.grab.ctx.drawImage(this.grab.canvas, 0, 0, 50, 100, 1, 0, 50, 100);\n                this.grab.ctx.drawImage(this.grab.canvas, 0, 0, 50, 100, 2, 0, 50, 100);\n                this.grab.ctx.drawImage(this.grab.canvas, 0, 0, 50, 100, 3, 0, 50, 100);\n            }\n            let mark = this.frame % 100;\n            //ctx.drawImage(this.grab.canvas, mark, 0, 100 - mark, 100, 50, 50, 100 - mark, 100);\n            //ctx.drawImage(this.grab.canvas, 0, 0, mark, 100, 50 + 100 - mark, 50, mark, 100);\n        }\n    }\n\n    const game = new Game();\n\n    /**\n     * Create and launch game.\n     */\n    game.init().then(() => game.start());\n\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}