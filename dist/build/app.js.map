{"version":3,"sources":["app.js"],"names":["Constants","t","i","Math","PI","s","h","o","l","u","p","M","m","g","q","Canvas","[object Object]","width","height","this","canvas","document","createElement","ctx","getContext","SpriteSheet","x","y","w","R","Sprite","sprite","v","drawImage","img","anchor","viewport","spritePos","cameraPos","center","strokeStyle","strokeRect","bbox","hbox","dx","dy","r","getSpriteBoxPolygon","box","_","A45","KeyboardAdapter","handler","map","Input","Action","ATTACK","DEFLECT","DODGE","SUPER","UP","DOWN","LEFT","RIGHT","MENU","MUTE","FREEZE","arrowDirections","ht","held","reset","window","addEventListener","event","k","keyCode","console","log","state","direction","action","Object","values","getElementById","resize","force","dpi","devicePixelRatio","clientWidth","clientHeight","dpiWidth","dpiHeight","scale","floor","max","ceil","I","imageSmoothingEnabled","style","cursor","MouseAdapter","RELOAD","pointer","clientX","clientY","button","preventDefault","releaseRMBTick","pressed","released","framesHeld","keyboard","init","mouse","update","K","Y","J","X","W","at","j","G","$","Z","tt","it","Geometry","ut","radianTable","sqrt","pt","p1","p2","normalizeVector","Mt","cos","sin","angle","atan2","RAD","qt","bt","a","b","vector2point","vectors","vector","min","angleA1","angleA2","angleB1","angleB2","result","Lt","pos","Tt","TILE_WIDTH","TILE_HEIGHT","At","kt","game","camera","Bt","value","startPos","endPos","next","step","diff","NaN","Infinity","startQ","startR","endQ","endR","tileCount","abs","stepQ","sign","stepR","intersectionQ","calculateRayIntersectionAndStep","intersectionR","tilesHitBetween","vectorAdd","bounds","tilesHitInBounds","tilesHitBetweenCircle","invdx","invdy","cornerX","cornerY","ltime","ly","_t","Ft","Wt","zt","Vt","rtime","ry","ttime","tx","btime","bx","inverseRadius","lineLength","cornerdx","cornerdy","cornerDistance","innerAngle","acos","time","ix","iy","nx","ny","isNaN","innerAngleSin","angle1Sin","angle1","asin","angle2","r1","v1","r2","v2","a1","a2","delta","vectorBetween","maze","array2d","length","stack","Kt","cost","shift","push","fn","Array","from","Yt","Random","Xt","c","d","str","imul","charCodeAt","seedfn","xmur3","randfn","sfc32","CROSS","CARDINALS","MazeGenerator","Qt","filter","dir","cq","cr","rand","roomNumber","found","ii","cells","idx","cell","splice","possible","openCrossCells","indexOf","choice","connectors","rooms","room1","room2","up","down","left","right","ei","ri","groups","Set","group1","find","group","includes","group2","deadEnds","forEach","ni","reduce","hash","room","tiles","TILE_WALL2","TILE_WALL1","key","TILE_FLOOR1","seed","attemptRoomPlacement","carveMaze","carveConnectors","pruneDeadEnds","homeflow","flood","Jt","ci","createTiles","yi","fi","createRoomLookup","wi","C_SHIFT","32","44","46","73","Text","default","font","fire","recolor","gradient","createLinearGradient","addColorStop","shadow","text","toUpperCase","measureWidth","drawText","cu","cv","phrases","split","phrase","phraseWidth","mi","sum","color","fillStyle","fillRect","globalCompositeOperation","Detection","tile","tileIsPassable","Behavior","IDLE","bi","Ei","vi","Ri","Li","entities","entity","think","Monster","vel","facing","hp","damage","radius","mass","lineOfSight","player","CHASE","clamp","DEAD","cullt","cull","drawViewportSprite","monster_dead","monster","ShotgunBlast","spread","range","vect","dot1","dot2","sides","vector2angle","arcOverlap","wallHit","angle2vector","tilesHitBy","Fi","Wi","uv","xy2uv","beginPath","arc","lineTo","closePath","fill","ReloadAnimation","frames","shellsMax","end","start","hud_shells_full","Player","shellsLeft","HUNT","defaultMovement","input","reload","velocityAdj","pointerXY","PLAYER_BOUND_RADIUS","setLineDash","stroke","Menu","Movement","movers","rounds","clipVelocityEntityVsEntity","clipVelocityAgainstWalls","other","hit","intersectCircleCircle2","entityM","otherM","tilesHitByCircle","qr2xy","intersectCircleRectangle","Damage","amount","generate","Dt","images","initSprite","bullet","demon_walk","hud_shells_empty","hud_health_frame","hud_health_fill","edge","turn","corner","walls","initDynamicSprite","rotateImage","R180","R90","R270","overlay","uri","data","opts","loadSlice","source","rad","translate","rotate","sources","T","O","C","loadImage","sliceCanvas","Promise","resolve","reject","image","Image","onload","onerror","err","src","frame","started","requestAnimationFrame","onFrame","currentms","draw","apply","spawnEnemy","random","setTransform","drawMaze","drawHud","drawRightText","join","ptr","JSON","stringify","offset","Error","uv2xy","e","moveTo","raytrace","redgreen","highlight","then"],"mappings":"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","file":"app.js","sourcesContent":["(function () {\n    'use strict';\n\n    const Constants = {\n        R0: 0,\n        R90: Math.PI * 0.5,\n        R180: Math.PI,\n        R270: Math.PI * 1.5,\n        R360: Math.PI * 2,\n\n        // Size in pixels of tiles in the game maze\n        TILE_WIDTH: 32,\n        TILE_HEIGHT: 32,\n\n        // Tile constants\n        TILE_FLOOR1:            0,\n        TILE_FLOOR2:            1,\n        TILE_WALL1:             2,\n        TILE_WALL2:             3,\n\n        PLAYER_BOUND_RADIUS: 9\n    };\n\n    /**\n     * This helper class encapsulates creating temporary off-screen canvases. Off-screen\n     * canvases are great tools for building patterns, image masks, and other components\n     * that we'll use to draw things on the primary canvas.\n     */\n    class Canvas {\n      constructor(width, height) {\n        this.canvas = document.createElement('canvas');\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.ctx = this.canvas.getContext('2d');\n      }\n    }\n\n    /**\n     * This module is generate by `gulp generateSpriteSheetData`.\n     */\n\n    const SpriteSheet =\n    /* <generated> */\n    { bullet_1: { x: 0, y: 0, w: 32, h: 32 },\n      demon1_1: { x: 0, y: 32, w: 16, h: 22 },\n      demon1_2: { x: 16, y: 32, w: 16, h: 22 },\n      demon1_3: { x: 32, y: 32, w: 16, h: 22 },\n      demon1_4: { x: 48, y: 32, w: 16, h: 22 },\n      demon1_5: { x: 64, y: 32, w: 16, h: 22 },\n      demon1_6: { x: 80, y: 32, w: 16, h: 22 },\n      demon1_7: { x: 96, y: 32, w: 16, h: 22 },\n      demon1_8: { x: 112, y: 32, w: 16, h: 22 },\n      demon1_9: { x: 128, y: 32, w: 16, h: 22 },\n      demon1_10: { x: 144, y: 32, w: 16, h: 22 },\n      font_1: { x: 0, y: 54, w: 236, h: 6 },\n      hud_healthbar_1: { x: 0, y: 60, w: 109, h: 9 },\n      hud_healthbar_2: { x: 109, y: 60, w: 109, h: 9 },\n      hud_shells_1: { x: 0, y: 69, w: 6, h: 7 },\n      hud_shells_2: { x: 6, y: 69, w: 6, h: 7 },\n      monster2_1: { x: 0, y: 76, w: 32, h: 32 },\n      monster2_2: { x: 32, y: 76, w: 32, h: 32 },\n      paper_1: { x: 0, y: 108, w: 32, h: 32 },\n      paper_2: { x: 32, y: 108, w: 32, h: 32 },\n      particles_1: { x: 0, y: 140, w: 11, h: 11 },\n      player_1: { x: 0, y: 151, w: 64, h: 64 },\n      player_2: { x: 64, y: 151, w: 64, h: 64 },\n      player_3: { x: 128, y: 151, w: 64, h: 64 },\n      player_4: { x: 192, y: 151, w: 64, h: 64 },\n      player_5: { x: 256, y: 151, w: 64, h: 64 },\n      player_6: { x: 320, y: 151, w: 64, h: 64 },\n      player_7: { x: 384, y: 151, w: 64, h: 64 },\n      player_8: { x: 448, y: 151, w: 64, h: 64 },\n      player2_1: { x: 0, y: 215, w: 32, h: 32 },\n      portal_1: { x: 0, y: 247, w: 32, h: 32 },\n      sparkle_1: { x: 0, y: 279, w: 11, h: 11 },\n      swordmeter_1: { x: 0, y: 290, w: 48, h: 128 },\n      swordmeter_2: { x: 48, y: 290, w: 48, h: 128 },\n      swordmeter_3: { x: 96, y: 290, w: 48, h: 128 },\n      swordmeter_4: { x: 144, y: 290, w: 48, h: 128 },\n      swordmeter_5: { x: 192, y: 290, w: 48, h: 128 },\n      tiles_1: { x: 0, y: 418, w: 32, h: 32 },\n      tiles_2: { x: 32, y: 418, w: 32, h: 32 },\n      tiles_3: { x: 64, y: 418, w: 32, h: 32 },\n      tiles_4: { x: 96, y: 418, w: 32, h: 32 },\n      tiles_5: { x: 128, y: 418, w: 32, h: 32 },\n      tiles_6: { x: 160, y: 418, w: 32, h: 32 },\n      tiles_7: { x: 192, y: 418, w: 32, h: 32 },\n      tiles_8: { x: 224, y: 418, w: 32, h: 32 },\n      tiles_9: { x: 256, y: 418, w: 32, h: 32 },\n      tileset_1: { x: 0, y: 450, w: 32, h: 32 },\n      tileset_2: { x: 32, y: 450, w: 32, h: 32 },\n      tileset_3: { x: 64, y: 450, w: 32, h: 32 },\n      tileset_4: { x: 96, y: 450, w: 32, h: 32 },\n      tileset_5: { x: 128, y: 450, w: 32, h: 32 },\n      tileset_6: { x: 160, y: 450, w: 32, h: 32 },\n      tileset_7: { x: 192, y: 450, w: 32, h: 32 },\n      tileset_8: { x: 224, y: 450, w: 32, h: 32 } }\n    /* </generated> */\n    ;\n\n    const SPRITESHEET_URI = 'sprites.png'; // produced during gulp build\n\n    /**\n     * Sprites!\n     *\n     * For this game, a \"sprite\" is a little object that has an attached image, an anchor\n     * point, a bounding box, and an optional hit box. This keeps pixel-level data about\n     * the image all in one place (by passing a Sprite around, we know what image to draw,\n     * what point in the image to rotate around, what areas of the image can get hit by\n     * things, and what areas can hit other things).\n     *\n     * Whether the bounding box or hitbox do anything isn't up to the Sprite, it would be\n     * up to the Frame that references it. (This is helpful because it's convenient for\n     * a simple game like this to have only one hit frame, but the animation may call\n     * for showing the sword swipe for 5-6 frames.)\n     */\n    class Sprite {\n      /**\n       * A small helper that draws a sprite onto a canvas, respecting the anchor point of\n       * the sprite. Note that the canvas should be PRE-TRANSLATED and PRE-ROTATED, if\n       * that's appropriate!\n       */\n      static drawSprite(ctx, sprite, u, v) {\n        ctx.drawImage(sprite.img, u - sprite.anchor.x, v - sprite.anchor.y);\n      }\n\n      static drawViewportSprite(viewport, sprite, spritePos, cameraPos) {\n        viewport.ctx.drawImage(\n          sprite.img,\n          spritePos.x - sprite.anchor.x - cameraPos.x + viewport.center.u,\n          spritePos.y - sprite.anchor.y - cameraPos.y + viewport.center.v\n        );\n      }\n\n      /**\n       * Draw a sprite's bounding box, for debugging, using the same rules as drawSprite.\n       */\n      static drawBoundingBox(ctx, sprite, x, y) {\n        ctx.strokeStyle = 'rgba(0, 255, 0, 0.5)';\n        ctx.strokeRect(\n          x - sprite.anchor.x + sprite.bbox[0].x,\n          y - sprite.anchor.y + sprite.bbox[0].y,\n          sprite.bbox[1].x - sprite.bbox[0].x,\n          sprite.bbox[1].y - sprite.bbox[0].y\n        );\n      }\n\n      /**\n       * Draw a sprite's hit box, for debugging, using the same rules as drawSprite.\n       */\n      static drawHitBox(ctx, sprite, x, y) {\n        if (sprite.hbox) {\n          ctx.strokeStyle = 'rgba(255, 0, 0, 0.7)';\n          ctx.strokeRect(\n            x - sprite.anchor.x + sprite.hbox[0].x,\n            y - sprite.anchor.y + sprite.hbox[0].y,\n            sprite.hbox[1].x - sprite.hbox[0].x,\n            sprite.hbox[1].y - sprite.hbox[0].y\n          );\n        }\n      }\n\n      static getBoundingCircle(sprite, x, y) {\n        let dx = sprite.bbox[1].x - sprite.bbox[0].x;\n        let dy = sprite.bbox[1].y - sprite.bbox[0].y;\n        let r = (dx > dy ? dx : dy) / 2;\n        return {\n          x: x - sprite.anchor.x + (sprite.bbox[0].x + sprite.bbox[1].x) / 2,\n          y: y - sprite.anchor.y + (sprite.bbox[0].y + sprite.bbox[1].y) / 2,\n          r\n        };\n      }\n\n      static getBoundingBoxPolygon(sprite, x, y) {\n        return this.getSpriteBoxPolygon(sprite.anchor, sprite.bbox, x, y);\n      }\n\n      static getHitBoxPolygon(sprite, x, y) {\n        return this.getSpriteBoxPolygon(sprite.anchor, sprite.hbox, x, y);\n      }\n\n      static getSpriteBoxPolygon(anchor, box, x, y) {\n        return {\n          x: x,\n          y: y,\n          p: [\n            { x: box[0].x - anchor.x, y: box[0].y - anchor.y },\n            { x: box[1].x - anchor.x, y: box[0].y - anchor.y },\n            { x: box[1].x - anchor.x, y: box[1].y - anchor.y },\n            { x: box[0].x - anchor.x, y: box[1].y - anchor.y }\n          ]\n        };\n      }\n    }\n\n    /**\n     * The Assets module loads raw PNGs we'll use to draw the game, does any postprocessing stuff\n     * we might need to do, and then saves references to them for later.\n     */\n    class Assets {\n      static async init() {\n        this.images = {};\n\n        // Base Pixel Font (see `Text.init` for additional manipulation)\n        Sprite.font = await this.initSprite(SPRITESHEET_URI, SpriteSheet.font_1);\n\n        // Player\n        Sprite.player = await this.initSprite(SPRITESHEET_URI, SpriteSheet.player2_1);\n\n        // Bullets\n        Sprite.bullet = await this.initSprite(SPRITESHEET_URI, SpriteSheet.bullet_1);\n\n        // Enemy\n        Sprite.monster = await this.initSprite(SPRITESHEET_URI, SpriteSheet.monster2_1);\n        Sprite.monster_dead = await this.initSprite(SPRITESHEET_URI, SpriteSheet.monster2_2);\n        Sprite.demon_walk = await this.initSprite(SPRITESHEET_URI, SpriteSheet.demon1_1);\n\n        // GUI\n        Sprite.hud_shells_empty = await this.initSprite(SPRITESHEET_URI, SpriteSheet.hud_shells_1);\n        Sprite.hud_shells_full = await this.initSprite(SPRITESHEET_URI, SpriteSheet.hud_shells_2);\n        Sprite.hud_health_frame = await this.initSprite(SPRITESHEET_URI, SpriteSheet.hud_healthbar_1);\n        Sprite.hud_health_fill = await this.initSprite(SPRITESHEET_URI, SpriteSheet.hud_healthbar_2);\n\n        // Tiles\n        Sprite.tiles = [];\n        Sprite.tiles[Constants.TILE_FLOOR1] = await this.initSprite(SPRITESHEET_URI, SpriteSheet.tileset_3);\n        Sprite.tiles[Constants.TILE_WALL1] = await this.initSprite(SPRITESHEET_URI, SpriteSheet.tileset_1);\n        Sprite.tiles[Constants.TILE_WALL2] = await this.initSprite(SPRITESHEET_URI, SpriteSheet.tileset_2);\n\n        // Walls\n        let edge = await this.initSprite(SPRITESHEET_URI, SpriteSheet.tileset_5);\n        let turn = await this.initSprite(SPRITESHEET_URI, SpriteSheet.tileset_6);\n        let deadend = await this.initSprite(SPRITESHEET_URI, SpriteSheet.tileset_7);\n        let corner = await this.initSprite(SPRITESHEET_URI, SpriteSheet.tileset_8);\n\n        Sprite.walls = [];\n        Sprite.walls[0b000_100_000] =\n        Sprite.walls[0b100_100_000] =\n        Sprite.walls[0b000_100_100] =\n        Sprite.walls[0b100_100_100] = edge;\n\n        Sprite.walls[0b000_001_000] =\n        Sprite.walls[0b001_001_000] =\n        Sprite.walls[0b000_001_001] =\n        Sprite.walls[0b001_001_001] = this.initDynamicSprite(this.rotateImage(edge.img, Constants.R180));\n\n        Sprite.walls[0b010_000_000] =\n        Sprite.walls[0b110_000_000] =\n        Sprite.walls[0b011_000_000] =\n        Sprite.walls[0b111_000_000] = this.initDynamicSprite(this.rotateImage(edge.img, Constants.R90));\n\n        Sprite.walls[0b000_001_000] = this.initDynamicSprite(this.rotateImage(edge.img, Constants.R180));\n        Sprite.walls[0b000_000_010] = this.initDynamicSprite(this.rotateImage(edge.img, Constants.R270));\n\n        Sprite.walls[0b010_100_000] =\n        Sprite.walls[0b110_100_000] =\n        Sprite.walls[0b011_100_000] =\n        Sprite.walls[0b111_100_000] =\n        Sprite.walls[0b011_100_100] =\n        Sprite.walls[0b010_100_100] =\n        Sprite.walls[0b011_100_100] =\n        Sprite.walls[0b111_100_100] = turn;\n\n        Sprite.walls[0b010_001_000] =\n        Sprite.walls[0b011_001_000] =\n        Sprite.walls[0b110_001_000] =\n        Sprite.walls[0b111_001_000] =\n        Sprite.walls[0b010_001_001] =\n        Sprite.walls[0b011_001_001] =\n        Sprite.walls[0b111_001_001] =\n        Sprite.walls[0b110_001_001] = this.initDynamicSprite(this.rotateImage(turn.img, Constants.R90));\n\n        Sprite.walls[0b000_001_010] =\n        Sprite.walls[0b000_001_011] =\n        Sprite.walls[0b000_001_110] =\n        Sprite.walls[0b000_001_111] =\n        Sprite.walls[0b001_001_010] =\n        Sprite.walls[0b001_001_011] =\n        Sprite.walls[0b001_001_110] =\n        Sprite.walls[0b001_001_111] = this.initDynamicSprite(this.rotateImage(turn.img, Constants.R180));\n\n        Sprite.walls[0b000_100_010] =\n        Sprite.walls[0b000_100_011] =\n        Sprite.walls[0b000_100_110] =\n        Sprite.walls[0b000_100_111] =\n        Sprite.walls[0b100_100_010] =\n        Sprite.walls[0b100_100_011] =\n        Sprite.walls[0b100_100_110] =\n        Sprite.walls[0b100_100_111] = this.initDynamicSprite(this.rotateImage(turn.img, Constants.R270));\n\n        Sprite.walls[0b100_000_000] = corner;\n        Sprite.walls[0b001_000_000] = this.initDynamicSprite(this.rotateImage(corner.img, Constants.R90));\n        Sprite.walls[0b000_000_001] = this.initDynamicSprite(this.rotateImage(corner.img, Constants.R180));\n        Sprite.walls[0b000_000_100] = this.initDynamicSprite(this.rotateImage(corner.img, Constants.R270));\n\n        Sprite.walls[0b101_000_000] = this.initDynamicSprite(this.overlay(Sprite.walls[0b100_000_000].img, Sprite.walls[0b001_000_000].img));\n        Sprite.walls[0b000_000_101] = this.initDynamicSprite(this.overlay(Sprite.walls[0b000_000_100].img, Sprite.walls[0b000_000_001].img));\n        Sprite.walls[0b100_000_100] = this.initDynamicSprite(this.overlay(Sprite.walls[0b100_000_000].img, Sprite.walls[0b000_000_100].img));\n        Sprite.walls[0b001_000_001] = this.initDynamicSprite(this.overlay(Sprite.walls[0b001_000_000].img, Sprite.walls[0b000_000_001].img));\n\n    /*\n        let sprite = await this.initSprite(SPRITESHEET_URI, SpriteSheet.tileset_5);\n        Sprite.tiles[C.TILE_FLOOR_EDGE_L] = sprite;\n        Sprite.tiles[C.TILE_FLOOR_EDGE_T] = this.initDynamicSprite(this.rotateImage(sprite.img, Math.PI * 0.5));\n        Sprite.tiles[C.TILE_FLOOR_EDGE_R] = this.initDynamicSprite(this.rotateImage(sprite.img, Math.PI * 1.0));\n        Sprite.tiles[C.TILE_FLOOR_EDGE_B] = this.initDynamicSprite(this.rotateImage(sprite.img, Math.PI * 1.5));\n\n        sprite = await this.initSprite(SPRITESHEET_URI, SpriteSheet.tileset_7);\n        Sprite.tiles[C.TILE_FLOOR_EDGE_LT] = sprite;\n        Sprite.tiles[C.TILE_FLOOR_EDGE_TR] = this.initDynamicSprite(this.rotateImage(sprite.img, Math.PI * 0.5));\n        Sprite.tiles[C.TILE_FLOOR_EDGE_RB] = this.initDynamicSprite(this.rotateImage(sprite.img, Math.PI * 1.0));\n        Sprite.tiles[C.TILE_FLOOR_EDGE_BL] = this.initDynamicSprite(this.rotateImage(sprite.img, Math.PI * 1.5));\n\n        sprite = await this.initSprite(SPRITESHEET_URI, SpriteSheet.tileset_8);\n        Sprite.tiles[C.TILE_FLOOR_EDGE_LTR] = sprite;\n        Sprite.tiles[C.TILE_FLOOR_EDGE_TRB] = this.initDynamicSprite(this.rotateImage(sprite.img, Math.PI * 0.5));\n        Sprite.tiles[C.TILE_FLOOR_EDGE_RBL] = this.initDynamicSprite(this.rotateImage(sprite.img, Math.PI * 1.0));\n        Sprite.tiles[C.TILE_FLOOR_EDGE_BLT] = this.initDynamicSprite(this.rotateImage(sprite.img, Math.PI * 1.5));\n\n        sprite = await this.initSprite(SPRITESHEET_URI, SpriteSheet.tileset_6);\n        Sprite.tiles[C.TILE_FLOOR_EDGE_LR] = sprite;\n        Sprite.tiles[C.TILE_FLOOR_EDGE_TB] = this.initDynamicSprite(this.rotateImage(sprite.img, Math.PI * 0.5));\n    // TILE_FLOOR1:            0,\n    // TILE_FLOOR2:            1,\n    // TILE_FLOOR_EDGE_L:     20,\n    // TILE_FLOOR_EDGE_T:     21,\n    // TILE_FLOOR_EDGE_R:     22,\n    // TILE_FLOOR_EDGE_B:     23,\n    // TILE_FLOOR_EDGE_LT:    24,\n    // TILE_FLOOR_EDGE_TR:    25,\n    // TILE_FLOOR_EDGE_RB:    26,\n    // TILE_FLOOR_EDGE_BL:    27,\n    // TILE_FLOOR_EDGE_LTR:   28,\n    // TILE_FLOOR_EDGE_TRB:   29,\n    // TILE_FLOOR_EDGE_RBL:   30,\n    // TILE_FLOOR_EDGE_BLT:   31,\n    // TILE_FLOOR_EDGE_LR:    32,\n    // TILE_FLOOR_EDGE_TB:    33,\n    // TILE_FLOOR_CORNER_LT:  34,\n    // TILE_FLOOR_CORNER_TR:  35,\n    // TILE_FLOOR_CORNER_RB:  36,\n    // TILE_FLOOR_CORNER_BL:  37,\n    // TILE_FLOOR_CORNER_LR:  39,\n        Sprite.tiles[C.TILE_WALL1] = await this.initSprite(SPRITESHEET_URI, SpriteSheet.tileset_1);\n        Sprite.tiles[C.TILE_WALL2] = await this.initSprite(SPRITESHEET_URI, SpriteSheet.tileset_2);\n        */\n      };\n\n      /**\n       * Initialize a sprite by loading it from a particular slice of the given image. Provides\n       * \"sensible\" defaults for bounding box and anchor point if not provided.\n       */\n      static async initSprite(uri, data, opts) {\n        return this.initDynamicSprite(await this.loadSlice(uri, data.x, data.y, data.w, data.h), opts);\n      }\n\n      static rotateImage(source, rad) {\n        let canvas = new Canvas(source.width, source.height);\n        canvas.ctx.translate(source.width / 2, source.height / 2);\n        canvas.ctx.rotate(rad);\n        canvas.ctx.translate(-source.width / 2, -source.height / 2);\n        canvas.ctx.drawImage(source, 0, 0);\n        return canvas.canvas;\n      }\n\n      static overlay(...sources) {\n        let canvas = new Canvas(sources[0].width, sources[0].height);\n        for (let source of sources) {\n          canvas.ctx.drawImage(source, 0, 0);\n        }\n        return canvas.canvas;\n      }\n\n      /**\n       * Initialize a sprite by passing it a pre-defined image source (probably generated dynamically).\n       * Provides \"sensible\" defaults for bounding box and anchor point if not provided.\n       */\n      static initDynamicSprite(source, opts) {\n        let w = source.width, h = source.height;\n\n        return {\n          img: source,\n          anchor: (opts && opts.anchor) || { x: Math.floor(w / 2), y: Math.floor(h / 2) },\n          bbox: (opts && opts.bbox) || [{x: 0, y: 0 }, { x: w, y: h }],\n          hbox: opts && opts.hbox\n        };\n      }\n\n      /**\n       * This helper method retrieves a cached image, cuts the specified slice out of it, and returns it.\n       */\n      static async loadSlice(uri, x, y, w, h) {\n        const source = await this.loadImage(uri);\n        const sliceCanvas = new Canvas(w, h);\n        sliceCanvas.ctx.drawImage(source, x, y, w, h, 0, 0, w, h);\n        return sliceCanvas.canvas;\n      }\n\n      /**\n       * Load the image from the given URI and cache it.\n       */\n      static async loadImage(uri) {\n        if (this.images[uri]) return this.images[uri];\n\n        return await new Promise((resolve, reject) => {\n          let image = new Image();\n          image.onload = () => resolve(image);\n          image.onerror = (err) => reject(err);\n          image.src = uri;\n          this.images[uri] = image;\n        });\n      }\n    }\n\n    // A few quick constants (0*, 45*, 90*)\n    const A00 = 0;\n    const A45 = 0.7071067811865475;\n    const A90 = 1;\n\n    /**\n     * KeyboardAdapter\n     *\n     * Maps keyboard inputs to game inputs.\n     */\n    class KeyboardAdapter {\n      constructor(handler) {\n        this.handler = handler;\n\n        // Key Mapping:      ACTION            // Key\n        this.map = [];\n        this.map[88] = Input.Action.ATTACK;    // [X]\n        this.map[90] = Input.Action.DEFLECT;   // [Z]\n        this.map[67] = Input.Action.DODGE;     // [C]\n        this.map[32] = Input.Action.SUPER;     // [SPACEBAR]\n        this.map[38] = Input.Action.UP;        // [UpArrow]\n        this.map[40] = Input.Action.DOWN;      // [DownArrow]\n        this.map[37] = Input.Action.LEFT;      // [LeftArrow]\n        this.map[39] = Input.Action.RIGHT;     // [RightArrow]\n        this.map[87] = Input.Action.UP;        // [W]\n        this.map[83] = Input.Action.DOWN;      // [S]\n        this.map[65] = Input.Action.LEFT;      // [A]\n        this.map[68] = Input.Action.RIGHT;     // [D]\n        this.map[27] = Input.Action.MENU;      // [ESC]\n        this.map[77] = Input.Action.MUTE;      // [M]\n        this.map[70] = Input.Action.FREEZE;    // [F]\n        this.map[80] = Input.Action.FREEZE;    // [P]\n\n        // For keyboard, we support 8-point movement (S, E, SE, etc.)\n        this.arrowDirections = [\n          { x:  A00, y:  A00, m: 0 },\n          { x:  A00, y: -A90, m: 1 },\n          { x:  A00, y:  A90, m: 1 },\n          { x:  A00, y:  A00, m: 0 },\n          { x: -A90, y:  A00, m: 1 },\n          { x: -A45, y: -A45, m: 1 },\n          { x: -A45, y:  A45, m: 1 },\n          { x: -A90, y:  A00, m: 1 },\n          { x:  A90, y:  A00, m: 1 },\n          { x:  A45, y: -A45, m: 1 },\n          { x:  A45, y:  A45, m: 1 },\n          { x:  A90, y:  A00, m: 1 },\n          { x:  A00, y:  A00, m: 0 },\n          { x:  A00, y: -A90, m: 1 },\n          { x:  A00, y:  A90, m: 1 },\n          { x:  A00, y:  A00, m: 0 }\n        ];\n\n        this.held = [];\n\n        this.reset();\n      }\n\n      async init() {\n        window.addEventListener('keydown', event => {\n          let k = this.map[event.keyCode];\n          console.log(event.keyCode);\n          if (k) {\n            this.held[k] = true;\n          }\n\n          // Hack - first key pressed in window will initialize the audio.\n          //game.audio.init();\n        });\n\n        window.addEventListener('keyup', event => {\n          let k = this.map[event.keyCode];\n          if (k) {\n            this.held[k] = false;\n          }\n        });\n      }\n\n      update() {\n        // For keyboards, we want to convert the state of the various arrow keys being held down\n        // into a directional vector. We use the browser's event to handle the held state of\n        // the other action buttons, so we don't need to process them here.\n        let state = (this.held[Input.Action.UP] ? 1 : 0) +\n                    (this.held[Input.Action.DOWN] ? 2 : 0) +\n                    (this.held[Input.Action.LEFT] ? 4 : 0) +\n                    (this.held[Input.Action.RIGHT] ? 8 : 0);\n\n        this.direction = this.arrowDirections[state];\n      }\n\n      reset() {\n        this.direction = this.arrowDirections[0];\n        for (let action of Object.values(Input.Action)) {\n          this.held[action] = false;\n        }\n      }\n    }\n\n    const GAME_WIDTH = 480;\n    const GAME_HEIGHT = 270;\n\n    /**\n    * Viewport\n    *\n    * Represents the game display (for us, a canvas).\n    */\n    class Viewport {\n      async init() {\n        this.canvas = document.getElementById('canvas');\n        this.ctx = this.canvas.getContext('2d');\n        this.resize(true);\n      }\n\n      // Resize the canvas to give us approximately our desired game display size.\n      //\n      // Rather than attempt to explain it, here's a concrete example:\n      //\n      //     we start with a desired game dimension:   480x270px\n      //          get the actual browser dimensions:  1309x468px\n      //          factor in the display's DPI ratio:  2618x936px\n      //         now calculate the horizontal scale:       5.45x\n      //                     and the vertical scale:       3.46x\n      //            our new offical game scaling is:        5.4x\n      //       and our official viewport dimensions:   484x173px\n      //\n      // This approach emphasizes correct aspect ratio and maintains full-window rendering, at\n      // the potential cost of limiting visibility of the game itself in either the X or Y axis.\n      // If you use this approach, make sure your GUI can \"float\" (otherwise there may be whole\n      // UI elements the player cannot see!).\n      resize(force) {\n        let dpi = window.devicePixelRatio;\n        let width = this.canvas.clientWidth;\n        let height = this.canvas.clientHeight;\n        let dpiWidth = width * dpi;\n        let dpiHeight = height * dpi;\n\n        if (force || this.canvas.width !== dpiWidth || this.canvas.height !== dpiHeight) {\n          this.canvas.width = dpiWidth;\n          this.canvas.height = dpiHeight;\n\n          this.scale = (Math.floor(Math.max(dpiWidth / GAME_WIDTH, dpiHeight / GAME_HEIGHT) * 10) / 10);\n          this.width = Math.ceil(this.canvas.width / this.scale);\n          this.height = Math.ceil(this.canvas.height / this.scale);\n          this.center = { u: Math.floor(this.width / 2), v: Math.floor(this.height / 2) };\n          this.clientWidth = width;\n          this.clientHeight = height;\n\n                // Note: smoothing flag gets reset on every resize by some browsers, which is why\n                // we do it here.\n                this.ctx.imageSmoothingEnabled = false;\n\n                viewport.canvas.style.cursor = 'none';\n            }\n        }\n    }\n\n    // Singleton\n    const viewport = new Viewport();\n\n    /**\n     * MouseAdapter\n     *\n     * Maps mouse inputs to game inputs.\n     */\n    class MouseAdapter {\n      constructor(handler) {\n        this.handler = handler;\n\n        // Key Mapping:      ACTION            // Input\n        this.map = [];\n        this.map[0]  = Input.Action.ATTACK;    // LMB\n        this.map[2]  = Input.Action.RELOAD;    // RMB\n\n        this.held = [];\n\n        this.reset();\n      }\n\n      async init() {\n        window.addEventListener('mousemove', event => {\n          if (!this.pointer) this.pointer = {};\n          //this.handlers['mousemove'](event.movementX, event.movementY, event.clientX, event.clientY);\n          this.pointer.u = Math.floor((event.clientX * viewport.width) / viewport.clientWidth);\n          this.pointer.v = Math.floor((event.clientY * viewport.height) / viewport.clientHeight);\n        });\n\n        window.addEventListener('mouseout', () => {\n          this.pointer = undefined;\n        });\n\n        window.addEventListener('mousedown', event => {\n          let k = this.map[event.button];\n          if (k) this.held[k] = true;\n        });\n\n        window.addEventListener('mouseup', event => {\n          let k = this.map[event.button];\n          if (k) this.held[k] = false;\n        });\n\n        window.addEventListener('click', event => {\n          event.preventDefault();\n        });\n\n        window.addEventListener('contextmenu', event => {\n          let k = this.map[event.button];\n          console.log(event.button);\n          if (k) this.held[k] = true;\n          this.releaseRMBTick = 2;\n          event.preventDefault();\n        });\n\n        return this;\n      }\n\n      update() {\n        // Hacks: ideally we could use mousedown and mouseup for all clicks and preventDefault to\n        // avoid opening the browser's context menu. This hasn't worked for me so far when clicking\n        // on a canvas, so I need to use the context menu event to capture a right mouse click instead.\n        //\n        // We fake a down/up for RMB clicks, which means we can't determine how long the RMB is held\n        // (but luckily we don't need to for this game).\n        if (this.releaseRMBTick) {\n          this.releaseRMBTick--;\n          if (this.releaseRMBTick === 0) {\n            this.held[Input.Action.RELOAD] = false;\n            console.log('released');\n          }\n        }\n      }\n\n      reset() {\n        this.pointer = undefined;\n        for (let action of Object.values(Input.Action)) {\n          this.held[action] = false;\n        }\n      }\n    }\n\n    //import { GamepadAdapter } from './GamepadAdapter';\n    //import { NormalVector } from './Geometry';\n\n    /**\n     * This is our abstract game input handler.\n     *\n     * Each frame, we'll collect input data from all of our supported input adapters,\n     * and turn it into game input. This game input can then be used by the game\n     * update for the frame.\n     *\n     * The input adapters give us data like \"key X pressed\", or \"right mouse button\n     * clicked\", or \"button B\" pressed, and these are translated into a game input\n     * like \"dodge\".\n     */\n    class Input {\n        async init() {\n            // A vector representing the direction the user is pressing/facing,\n            // separate from pressing and releasing inputs. Treating \"direction\"\n            // separately makes it easier to handle gamepad sticks.\n            this.direction = { x: 0, y: 0, m: 0 };\n\n            // \"Pressed\" means an input was pressed THIS FRAME.\n            this.pressed = {};\n\n            // \"Released\" means an input was released THIS FRAME.\n            this.released = {};\n\n            // \"Held\" means an input is held down. The input was \"Pressed\" either\n            // this frame or in a past frame, and has not been \"Released\" yet.\n            this.held = {};\n\n            // How many frames was this input held down by the player. If [held]\n            // is false, it represents how long the input was last held down.\n            this.framesHeld = {};\n\n            this.keyboard = new KeyboardAdapter(this);\n            await this.keyboard.init();\n\n            this.mouse = new MouseAdapter(this);\n            await this.mouse.init();\n\n            //this.gamepad = new GamepadAdapter(this);\n            //await this.gamepad.init();\n        }\n\n        update() {\n            // We could have some kind of \"input adapter toggle\", but it's easier to just treat all inputs\n            // as valid -- if you're pressing the \"attack\" button on either gamepad or keyboard, then you're\n            // attacking. For directional input, we instead check whether there's movement on the thumbstick,\n            // and we use it if there is -- otherwise we try to extract movement from the keyboard instead.\n\n            this.keyboard.update();\n            this.mouse.update();\n            //this.gamepad.update();\n\n            for (let action of Object.values(Input.Action)) {\n                let held = this.mouse.held[action] || this.keyboard.held[action];\n                //let held = this.gamepad.held[action] || this.keyboard.held[action];\n                this.pressed[action] = !this.held[action] && held;\n                this.released[action] = this.held[action] && !held;\n\n                if (this.pressed[action]) {\n                    this.framesHeld[action] = 1;\n                } else if (this.held[action] && held) {\n                    this.framesHeld[action]++;\n                }\n\n                this.held[action] = held;\n            }\n\n            this.pointer = this.mouse.pointer;\n\n            //this.direction = this.gamepad.direction.m > 0 ? this.gamepad.direction : this.keyboard.direction;\n            this.direction = this.keyboard.direction;\n        }\n\n        onDown(action) {\n        }\n\n        onUp(action) {\n        }\n    }\n\n    // Game Inputs\n    //\n    // Note that moving the player around is actually not considered an action; it's\n    // a separate non-action input called \"direction\". It just so happens that on\n    // keyboard, for example, pressing the \"down arrow\" key is considered both a\n    // press of the in-game DOWN action and a directional input. It's up to the input\n    // consumer to decide which input is relevant (if any). For example, on a menu,\n    // we may consume the DOWN/UP actions to navigate the menu, but ignore directional\n    // inputs.\n    //\n    Input.Action = {\n      UP:      11,\n      DOWN:    12,\n      LEFT:    13,\n      RIGHT:   14,\n      ATTACK:  21,\n      RELOAD:  30,\n      DEFLECT: 22,\n      DODGE:   23,\n      SUPER:   24,\n      MENU:    96,\n      MUTE:    97,\n      FREEZE:  98\n    };\n\n    /**\n     * Geometry\n     *\n     * A horrible grab bag of math-related nonsense.\n     */\n    const Geometry = {\n      RAD: (() => {\n        let radianTable = [];\n        for (let i = 0; i <= 360; i++) {\n          radianTable[i] = Math.PI * 2 * i / 360;\n        }\n        return radianTable;\n      })(),\n\n      normalizeVector(p) {\n        let m = Math.sqrt(p.x * p.x + p.y * p.y);\n        return (m === 0) ? { x: 0, y: 0, m: 0 } : { x: p.x / m, y: p.y / m, m };\n      },\n\n      vectorBetween(p1, p2) {\n        return Geometry.normalizeVector({ x: p2.x - p1.x, y: p2.y - p1.y });\n      },\n\n      angle2vector(r, m) {\n        return { x: Math.cos(r), y: Math.sin(r), m: m || 1 };\n      },\n\n      vector2angle(v) {\n        let angle = Math.atan2(v.y, v.x);\n        if (angle < 0) angle += Geometry.RAD[360];\n        return angle;\n      },\n\n      vector2point(v) {\n        return { x: v.x * (v.m || 1), y: v.y * (v.m || 1) };\n      },\n\n      dot(a, b) {\n        [a, b] = [Geometry.vector2point(a), Geometry.vector2point(b)];\n        return a.x * b.x + a.y * b.y;\n      },\n\n      // Takes a series of vectors and denormalizes them and adds them together, usually resulting\n      // in a point in space. Wrap in normalizeVector to get a normalized vector again, if desired.\n      vectorAdd(...vectors) {\n        let v = { x: 0, y: 0, m: 1 };\n        for (let vector of vectors) {\n          v.x += vector.x * (vector.m || 1);\n          v.y += vector.y * (vector.m || 1);\n        }\n        return v;\n      },\n\n      angleBetween(angle, min, max) {\n        if (min > max) [min, max] = [max, min];\n        while (angle >= max + Geometry.RAD[360]) angle -= Geometry.RAD[360];\n        while (angle <= min - Geometry.RAD[360]) angle += Geometry.RAD[360];\n        return (angle >= min && angle < max);\n      },\n\n      arcOverlap(angleA1, angleA2, angleB1, angleB2) {\n        console.log([angleA1, angleA2, angleB1, angleB2].map(x => x * 360 / (Math.PI * 2)));\n        if (angleA1 > angleA2) [angleA1, angleA2] = [angleA2, angleA1];\n        if (angleB1 > angleB2) [angleB1, angleB2] = [angleB2, angleB1];\n        //while (angleA1 < 0) angleA1 += Geometry.RAD[360];\n\n        while (angleB2 >= angleA2 + Geometry.RAD[360]) {\n          angleB2 -= Geometry.RAD[360];\n          angleB1 -= Geometry.RAD[360];\n        }\n        while (angleB1 <= angleA1 - Geometry.RAD[360]) {\n          angleB1 += Geometry.RAD[360];\n          angleB2 += Geometry.RAD[360];\n        }\n\n        const result = [Math.max(angleA1, angleB1), Math.min(angleA2, angleB2)];\n        console.log([angleA1, angleA2, angleB1, angleB2, ...result].map(x => x * 360 / (Math.PI * 2)));\n        return result[0] > result[1] ? undefined : result;\n      },\n\n      xy2qr(pos) {\n        return { q: (pos.x / Constants.TILE_WIDTH) | 0, r: (pos.y / Constants.TILE_HEIGHT) | 0 };\n      },\n\n      qr2xy(pos) {\n        return { x: pos.q * Constants.TILE_WIDTH, y: pos.r * Constants.TILE_HEIGHT };\n      },\n\n      xy2uv(pos) {\n        return {\n          u: pos.x + viewport.center.u - game.camera.pos.x,\n          v: pos.y + viewport.center.v - game.camera.pos.y\n        };\n      },\n\n      clamp(value, min, max) {\n        return value < min ? min : (value > max ? max : value);\n      },\n\n      // The parameters to this function are (Q, Q) or (R, R) - i.e. horizontal or\n      // vertical coordinates in tile space.\n      calculateRayIntersectionAndStep(startPos, endPos) {\n        let next, step, diff = endPos - startPos;\n\n        if (diff === 0) {\n            step = NaN;\n            next = +Infinity;\n        } else if (diff > 0) {\n            step = 1 / diff;\n            next = (1 - (startPos - Math.floor(startPos))) * step;\n        } else {\n            step = -1 / diff;\n            next = (startPos - Math.floor(startPos)) * step;\n        }\n\n        return { next, step };\n      },\n\n      // https://www.genericgamedev.com/general/shooting-rays-through-tilemaps/\n      *tilesHitBetween(p1, p2) {\n        let startQ = p1.x / Constants.TILE_WIDTH, startR = p1.y / Constants.TILE_HEIGHT;\n        let endQ = p2.x / Constants.TILE_WIDTH, endR = p2.y / Constants.TILE_HEIGHT;\n        let tileCount = Math.abs(Math.floor(startQ) - Math.floor(endQ)) + Math.abs(Math.floor(startR) - Math.floor(endR));\n\n        yield { q: startQ | 0, r: startR | 0, m: 0 };\n\n        // If there's only 1 or 2 hit tiles, we don't need the math to compute the middle.\n        if (tileCount > 1) {\n          let q = startQ, r = startR, m = 0;\n          let stepQ = Math.sign(endQ - startQ);\n          let stepR = Math.sign(endR - startR);\n          let intersectionQ = Geometry.calculateRayIntersectionAndStep(startQ, endQ);\n          let intersectionR = Geometry.calculateRayIntersectionAndStep(startR, endR);\n\n          for (let i = 0; i < tileCount - 1; i++) {\n            if (intersectionQ.next < intersectionR.next) {\n              q += stepQ;\n              m += stepQ;\n              intersectionQ.next += intersectionQ.step;\n            } else {\n              r += stepR;\n              m += stepR;\n              intersectionR.next += intersectionR.step;\n            }\n            yield { q: q | 0, r: r | 0, m };\n          }\n        }\n\n        if (tileCount > 0) {\n          yield { q: endQ | 0, r: endR | 0, m: 1 };\n        }\n      },\n\n      *tilesHitBy(p, v) {\n        yield *Geometry.tilesHitBetween(p, Geometry.vectorAdd(p, v));\n      },\n\n      /**\n       * @param {XY[]} bounds  the upper-left and lower-right bounds\n       * @yields {QR}\n       */\n      *tilesHitInBounds(bounds) {\n        for (let r = Math.floor(bounds[0].y / Constants.TILE_HEIGHT); r * Constants.TILE_HEIGHT < bounds[1].y; r++) {\n          for (let q = Math.floor(bounds[0].x / Constants.TILE_WIDTH); q * Constants.TILE_WIDTH < bounds[1].x; q++) {\n            yield { q, r };\n          }\n        }\n      },\n\n      /**\n       * @param {XY} p1  the starting position\n       * @param {XY} p2  the ending position\n       * @param {number} r  the radius of the moving circle\n       * @yields {QR}\n       */\n      *tilesHitBetweenCircle(p1, p2, r) {\n        let bounds = [\n          { x: Math.min(p1.x, p2.x) - r, y: Math.min(p1.y, p2.y) - r },\n          { x: Math.max(p1.x, p2.x) + r, y: Math.max(p1.y, p2.y) + r }\n        ];\n        yield *Geometry.tilesHitInBounds(bounds);\n      },\n\n      /**\n       * @param {XY} p  the starting position\n       * @param {XY} v  the velocity (movement)\n       * @param {number} r  the radius of the moving circle\n       * @yields {QR}\n       */\n      *tilesHitByCircle(p, v, r) {\n        yield *Geometry.tilesHitBetweenCircle(p, { x: p.x + v.x, y: p.y + v.y }, r);\n      },\n\n      // https://stackoverflow.com/a/18790389/80630\n      intersectCircleRectangle(p1, p2, r, bounds) {\n        // If the bounding box around the start and end points (+radius on all\n        // sides) does not intersect with the rectangle, definitely not an\n        // intersection\n        if (Math.max(p1.x, p2.x) + r < bounds[0].x ||\n            Math.min(p1.x, p2.x) - r > bounds[1].x ||\n            Math.max(p1.y, p2.y) + r < bounds[0].y ||\n            Math.min(p1.y, p2.y) - r > bounds[1].y)\n          return;\n\n        let dx = p2.x - p1.x;\n        let dy = p2.y - p1.y;\n        let invdx = (dx === 0 ? 0 : 1 / dx);\n        let invdy = (dy === 0 ? 0 : 1 / dy);\n        let cornerX = Infinity;\n        let cornerY = Infinity;\n\n        // Check each side of the rectangle for a single-side intersection\n        // Left Side\n        if (p1.x - r < bounds[0].x && p2.x + r > bounds[0].x) {\n          let ltime = ((bounds[0].x - r) - p1.x) * invdx;\n          if (ltime >= 0 && ltime <= 1) {\n            let ly = dy * ltime + p1.y;\n            if (ly >= bounds[0].y && ly <= bounds[1].y) {\n              return { x: dx * ltime + p1.x, y: ly, t: ltime, nx: -1, ny: 0, ix: bounds[0].x, iy: ly };\n            }\n          }\n          cornerX = bounds[0].x;\n        }\n        // Right Side\n        if (p1.x + r > bounds[1].x && p2.x - r < bounds[1].x) {\n          let rtime = (p1.x - (bounds[1].x + r)) * -invdx;\n          if (rtime >= 0 && rtime <= 1) {\n            let ry = dy * rtime + p2.y;\n            if (ry >= bounds[0].y && ry <= bounds[1].y) {\n              return { x: dx * rtime + p1.x, y: ry, t: rtime, nx: 1, ny: 0, ix: bounds[1].x, iy: ry };\n            }\n          }\n          cornerX = bounds[1].x;\n        }\n        // Top Side\n        if (p1.y - r < bounds[0].y && p2.y + r > bounds[0].y) {\n          let ttime = ((bounds[0].y - r) - p1.y) * invdy;\n          if (ttime >= 0 && ttime <= 1) {\n            let tx = dx * ttime + p1.x;\n            if (tx >= bounds[0].x && tx <= bounds[1].x) {\n              return { x: tx, y: dy * ttime + p1.y, t: ttime, nx: 0, ny: -1, ix: tx, iy: bounds[0].y };\n            }\n          }\n          cornerY = bounds[0].y;\n        }\n        // Bottom Side\n        if (p1.y + r > bounds[1].y && p2.y - r < bounds[1].y) {\n          let btime = (p1.y - (bounds[1].y + r)) * -invdy;\n          if (btime >= 0 && btime <= 1) {\n            let bx = dx * btime + p1.x;\n            if (bx >= bounds[0].x && bx <= bounds[1].x) {\n              return { x: bx, y: dy * btime + p1.y, t: btime, nx: 0, ny: 1, ix: bx, iy: bounds[0].y };\n            }\n          }\n          cornerY = bounds[1].y;\n        }\n\n        // If we haven't touched anything, there is no collision\n        if (cornerX === Infinity && cornerY === Infinity) return;\n\n        // We didn't pass through a side but may be hitting the corner\n        if (cornerX !== Infinity && cornerY === Infinity) {\n          cornerY = dy > 0 ? bounds[1].y : bounds[0].y;\n        }\n        if (cornerY !== Infinity && cornerX === Infinity) {\n          cornerX = dx > 0 ? bounds[1].x : bounds[0].x;\n        }\n\n        /* Solve the triangle between the start, corner, and intersection point.\n         *\n         *           +-----------T-----------+\n         *           |                       |\n         *          L|                       |R\n         *           |                       |\n         *           C-----------B-----------+\n         *          / \\\n         *         /   \\r     _.-E\n         *        /     \\ _.-'\n         *       /    _.-I\n         *      / _.-'\n         *     S-'\n         *\n         * S = start of circle's path\n         * E = end of circle's path\n         * LTRB = sides of the rectangle\n         * I = {ix, iY} = point at which the circle intersects with the rectangle\n         * C = corner of intersection (and collision point)\n         * C=>I (r) = {nx, ny} = radius and intersection normal\n         * S=>C = cornerdist\n         * S=>I = intersectionDistance\n         * S=>E = lineLength\n         * <S = innerAngle\n         * <I = angle1\n         * <C = angle2\n         */\n        let inverseRadius = 1 / r;\n        let lineLength = Math.sqrt(dx * dx + dy * dy);\n        let cornerdx = cornerX - p1.x;\n        let cornerdy = cornerY - p1.y;\n        let cornerDistance = Math.sqrt(cornerdx * cornerdx + cornerdy * cornerdy);\n        let innerAngle = Math.acos((cornerdx * dx + cornerdy * dy) / (lineLength * cornerDistance));\n\n        // If the circle is too close, no intersection\n        if (cornerDistance < r) return;\n\n        // If inner angle is zero, it's going to hit the corner straight on.\n        if (innerAngle === 0) {\n          let time = (cornerDistance - r) / lineLength;\n\n            // Ignore if time is outside boundaries of (p1, p2)\n            if (time > 1 || time < 0) return;\n\n            let ix = time * dx + p1.x;\n            let iy = time * dy + p1.y;\n            let nx = cornerdx / cornerDistance;\n            let ny = cornerdy / cornerDistance;\n\n            return isNaN(ix) ? undefined : { x: ix, y: iy, t: time, nx, ny, ix: cornerX, iy: cornerY };\n        }\n\n        let innerAngleSin = Math.sin(innerAngle);\n        let angle1Sin = innerAngleSin * cornerDistance * inverseRadius;\n\n        // If the angle is too large, there is no collision\n        if (Math.abs(angle1Sin) > 1) return;\n\n        let angle1 = Math.PI - Math.asin(angle1Sin);\n        let angle2 = Math.PI - innerAngle - angle1;\n        let intersectionDistance = r * Math.sin(angle2) / innerAngleSin;\n        let time = intersectionDistance / lineLength;\n\n        // Ignore if time is outside boundaries of (p1, p2)\n        if (time > 1 || time < 0) return;\n\n        let ix = time * dx + p1.x;\n        let iy = time * dy + p2.y;\n        let nx = (ix - cornerX) * inverseRadius;\n        let ny = (iy - cornerY) * inverseRadius;\n\n        return isNaN(ix) ? undefined : { x: ix, y: iy, t: time, nx, ny, ix: cornerX, iy: cornerY };\n      },\n\n      // https://stackoverflow.com/questions/18683179/how-to-fix-circles-overlap-in-collision-response\n      //\n      // This is an incredibly simple implementation that ASSUMES very small velocities. It doesn't attempt\n      // to answer the question about \"when\" the intersection happened like the method above - may\n      // fix that in future.\n      intersectCircleCircle2(p1, r1, v1, p2, r2, v2) {\n        [v1, v2] = [Geometry.vector2point(v1), Geometry.vector2point(v2)];\n        let a1 = { x: p1.x + v1.x, y: p1.y + v1.y };\n        let a2 = { x: p2.x + v2.x, y: p2.y + v2.y };\n        let delta = Geometry.vectorBetween(a1, a2);\n        if (delta.m < r1 + r2) {\n          return { nx: delta.x, ny: delta.y, m: r1 + r2 - delta.m };\n        }\n      },\n\n      flood(maze, pos) {\n        let result = Geometry.array2d(maze[0].length, maze.length, 100);\n        console.log(result[0][0]);\n        let stack = [{ ...pos, cost: 0 }];\n        while (stack.length > 0) {\n          let { q, r, cost } = stack.shift();\n          if (result[r][q] <= cost) continue;\n          result[r][q] = cost++;\n          if (maze[r][q + 1] && result[r][q + 1] > cost) stack.push({ q: q + 1, r, cost });\n          if (maze[r][q - 1] && result[r][q - 1] > cost) stack.push({ q: q - 1, r, cost });\n          if (maze[r + 1][q] && result[r + 1][q] > cost) stack.push({ q, r: r + 1, cost });\n          if (maze[r - 1][q] && result[r - 1][q] > cost) stack.push({ q, r: r - 1, cost });\n        }\n        console.log([\"---\", result, \"---\"]);\n        return result;\n      },\n\n      array2d(width, height, value) {\n        let fn = typeof value === 'function' ? value : () => value;\n        return Array.from({ length: height }, () => Array.from({ length: width }, fn));\n      },\n\n      tileIsPassable(q, r) {\n        return !!game.maze.maze[r][q];\n      }\n    };\n\n    /**\n     * Seeded random number generator, using SimpleFastCounter for generator and\n     * xmur3 for hashing.\n     *\n     * https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript\n     */\n    const Random = {\n        sfc32(a, b, c, d) {\n            return () => {\n                a >>>= 0; b >>>= 0; c >>>= 0; d >>>= 0;\n                let t = (a + b) | 0;\n                a = b ^ b >>> 9;\n                b = c + (c << 3) | 0;\n                c = (c << 21 | c >>> 11);\n                d = d + 1 | 0;\n                t = t + d | 0;\n                c = c + t | 0;\n                return (t >>> 0) / 4294967296;\n            }\n        },\n\n        xmur3(str) {\n            let i, h;\n            for (i = 0, h = 1779033703 ^ str.length; i < str.length; i++) {\n                h = Math.imul(h ^ str.charCodeAt(i), 3432918353);\n                h = h << 13 | h >>> 19;\n            }\n\n            return () => {\n                h = Math.imul(h ^ h >>> 16, 2246822507);\n                h = Math.imul(h ^ h >>> 13, 3266489909);\n                return (h ^= h >>> 16) >>> 0;\n            }\n        },\n\n        seed(str) {\n            let seedfn = this.xmur3(str);\n            let randfn = this.sfc32(seedfn(), seedfn(), seedfn(), seedfn());\n\n            // If min/max are not supplied, returns a random floating point value\n            // (>=0 && <1). If they are supplied, returns a random integer value\n            // (>=min && <max).\n            return (min, max) => {\n                if (typeof min === \"number\" && typeof max === \"number\") {\n                    return Math.floor(randfn() * (max - min)) + min;\n                } else {\n                    return randfn();\n                }\n            };\n        }\n    };\n\n    const CROSS = [\n        { q: 0, r: 0 },\n        { q: 0, r: -1 },\n        { q: 0, r: 1 },\n        { q: -1, r: 0 },\n        { q: 1, r: 0 }\n    ];\n\n    const CARDINALS = [\n        { q: 0, r: -1 },\n        { q: 0, r: 1 },\n        { q: -1, r: 0 },\n        { q: 1, r: 0 }\n    ];\n\n    // Maze Generator - TODO\n    //\n    //\n    const MazeGenerator = {\n        openCrossCells(maze, q, r) {\n            return CROSS.filter(dir => {\n                let [cq, cr] = [q + dir.q, r + dir.r];\n                return cr >= 0 && cr < maze.length && cq >= 0 && cq < maze[0].length && !maze[cr][cq];\n            });\n        },\n\n        attemptRoomPlacement(maze, rand, bounds, width, height, roomNumber) {\n            let q = rand(0, (bounds[1].q - width) / 2) * 2 + 1;\n            let r = rand(0, (bounds[1].r - height) / 2) * 2 + 1;\n            let found = undefined;\n\n            //\n            // TUNEABLE\n            //\n            // You can never \"touch\" the spawn room (Room #1). If you touch another room,\n            // there's a 9% chance for each attempt to allow the room to be built, potentially\n            // overlapping/intersecting, or even completely eclipsing the previous room\n            // if this room is larger.\n            //\n            for (let j = 0; j < height; j++) {\n                for (let i = 0; i < width; i++) {\n                    if (maze[r+j][q+i]) roomNumber = found = maze[r+j][q+i];\n                    if (maze[r+j][q+i]===1) return;\n                }\n            }\n            if (found && rand() > 0.01) return;\n\n            for (let j = 0; j < height; j++) {\n                for (let i = 0; i < width; i++) {\n                    maze[r+j][q+i] = roomNumber;\n                }\n            }\n\n            return { q, r, width, height, roomNumber };\n        },\n\n        carveMaze(maze, rand, startQ, startR, roomNumber) {\n            let cells = [{ q: startQ, r: startR }];\n            maze[startR][startQ] = roomNumber;\n\n            while (cells.length > 0) {\n                //\n                // TUNEABLE\n                //\n                // When carving, we can attempt to carve off any cell in our collected list. For\n                // this game, we choose 75% to keep carving off the last cell we carved (windy passage),\n                // and 25% to carve somewhere else (branch). If we choose to branch, that's the\n                // new windy passage, leaving the old one for later.\n                //\n                let idx = rand() < 0.25 ? rand(0, cells.length) : cells.length - 1;\n                let cell = cells[idx];\n                if (idx !== cells.length - 1) {\n                    cells.splice(idx, 1);\n                    cells.push(cell);\n                }\n\n                let possible = CARDINALS.filter(dir => {\n                    return MazeGenerator.openCrossCells(maze, cell.q + dir.q, cell.r + dir.r).length === 4;\n                });\n    /*\n                let possible = CARDINALS.filter(dir => {\n                    console.log(cell.r + dir.r, cell.q + dir.q);\n                    if (cell.r + dir.r < 0 || cell.r + dir.r >= maze.length || cell.q + dir.q < 0 || cell.q + dir.q >= maze[0].length) return false;\n                    if (maze[cell.r + dir.r][cell.q + dir.q]) return false;\n\n                    let openCells = CARDINALS.filter(dir2 => {\n                        let [cq, cr] = [cell.q + dir.q + dir2.q, cell.r + dir.r + dir2.r];\n                        if (cr < 0 || cr >= maze.length || cq < 0 || cq >= maze[0].length) return false;\n                        return !maze[cr][cq];\n                    });\n                    console.log([dir.q, dir.r, openCells.length]);\n\n                    return openCells.length === 3;\n                });\n                console.log(possible);\n                */\n\n                if (possible.length === 0) {\n                    cells.splice(cells.indexOf(cell), 1);\n                } else {\n                    let choice = possible[rand(0, possible.length)];\n                    maze[cell.r + choice.r][cell.q + choice.q] = roomNumber;\n                    cells.push({ q: cell.q + choice.q, r: cell.r + choice.r });\n                    console.log(cells);\n                }\n            }\n        },\n\n        carveConnectors(maze, rand) {\n            let connectors = [];\n            let rooms = [];\n\n            for (let r = 1; r < maze.length - 1; r++) {\n                for (let q = 1; q < maze.length - 1; q++) {\n                    let room1, room2;\n\n                    let [up, down, left, right] = [\n                        maze[r - 1][q],\n                        maze[r + 1][q],\n                        maze[r][q - 1],\n                        maze[r][q + 1]\n                    ];\n\n                    if (up && down && up !== down) {\n                        room1 = up, room2 = down;\n                    } else if (left && right && left !== right) {\n                        room1 = left, room2 = right;\n                    }\n\n                    if (room1 && room2) {\n                        if (room1 > room2) {\n                            [room1, room2] = [room2, room1];\n                        }\n                        connectors.push({ q, r, room1, room2 });\n                        rooms.push(room1, room2);\n                        //connectors.push({ q, r, room1: room2, room2: room1 });\n                        /*connectors[room1] = connectors[room1] || [];\n                        connectors[room1][room2] = connectors[room1][room2] || [];\n                        connectors[room1][room2].push({ q, r });\n                        connectors[room2] = connectors[room2] || [];\n                        connectors[room2][room1] = connectors[room2][room1] || [];\n                        connectors[room2][room1].push({ q, r });*/\n                    }\n                }\n            }\n\n            let groups = [...new Set(rooms)].map(a => [a]);\n            console.log(groups);\n\n            while (connectors.length > 0) {\n                let idx = rand(0, connectors.length);\n                let choice = connectors.splice(idx, 1)[0];\n                maze[choice.r][choice.q] = choice.room1;\n\n                let group1 = groups.find(group => group.includes(choice.room1));\n                let group2 = groups.find(group => group.includes(choice.room2));\n\n                if (rand() > 0.2) {\n                    connectors = connectors.filter(c => !(\n                        (group1.includes(c.room1) && group2.includes(c.room2)) ||\n                        (group2.includes(c.room1) && group1.includes(c.room2))\n                    ));\n                }\n\n                if (group1 !== group2) {\n                    groups.splice(groups.indexOf(group2), 1);\n                    group1.push(...group2);\n                }\n            }\n    /*\n            while (groups.length > 1) {\n                let a = rand(0, groups.length);\n                let b = (a + 1) % groups.length;\n                let possible = connectors.filter(pair => groups[a].includes(pair.room1) && groups[b].includes(pair.room2));\n                console.log(possible);\n                let choice = possible[rand(0, possible.length)];\n\n                maze[choice.r][choice.q] = pair.room1;\n                groups.splice(b, 1);\n                groups[a] = groups[a].concat(groups[b]);\n            }\n            */\n\n            /*for (let pair of Object.keys(connectors)) {\n                let choice = connectors[pair][rand(0, connectors[pair].length)];\n                maze[choice.r][choice.q] = 2;\n            }*/\n        },\n\n        pruneDeadEnds(maze, rand) {\n            let deadEnds = [];\n\n            for (let r = 0; r < maze.length; r++) {\n                for (let q = 0; q < maze[0].length; q++) {\n                    if (maze[r][q] && MazeGenerator.openCrossCells(maze, q, r).length >= 3) {\n                        deadEnds.push({ q, r });\n                    }\n                }\n            }\n\n            while (deadEnds.length > 0) {\n                let idx = rand(0, deadEnds.length);\n                let cell = deadEnds.splice(idx, 1)[0];\n\n                if (rand() < 0.45) {\n                    let possible = CARDINALS.filter(dir => {\n                        return MazeGenerator.openCrossCells(maze, cell.q + dir.q, cell.r + dir.r).length <= 2 &&\n                          (cell.q+dir.q) >= 0 && (cell.q+dir.q) < maze[0].length &&\n                          (cell.r+dir.r) >= 0 && (cell.r+dir.r) < maze.length;\n                    });\n                    let choice = possible[rand(0, possible.length)];\n                    if (choice) {\n                        maze[cell.r + choice.r][cell.q + choice.q] = maze[cell.r][cell.q];\n                        continue;\n                    }\n                }\n\n                if (rand() > 0.05) {\n                    maze[cell.r][cell.q] = 0;\n                    CARDINALS.forEach(dir => {\n                        let [cq, cr] = [cell.q + dir.q, cell.r + dir.r];\n                        if (maze[cr][cq] && MazeGenerator.openCrossCells(maze, cq, cr).length >= 3 &&\n                            cq >= 0 && cq < maze[0].length && cr >= 0 && cr < maze.length) {\n                            deadEnds.push({ q: cq, r: cr });\n                        }\n                    });\n                }\n            }\n        },\n\n        createRoomLookup(rooms) {\n            return rooms.reduce((hash, room) => {\n                hash[room.roomNumber] = hash[room.roomNumber] || [];\n                hash[room.roomNumber].push(room);\n                return hash;\n            }, {});\n        },\n\n        createTiles(maze, rand) {\n            let tiles = Geometry.array2d(maze[0].length, maze.length, () => {\n                return (rand() < 0.1 ? Constants.TILE_WALL2 : Constants.TILE_WALL1) + (0b000_010_000 << 4);\n            });\n            for (let r = 0; r < tiles.length; r++) {\n                for (let q = 0; q < tiles[0].length; q++) {\n                    if (maze[r][q]) {\n                        let key =\n                            (maze[r - 1][q - 1] ? 0 : 0b100_000_000) +\n                            (maze[r - 1][q]     ? 0 : 0b010_000_000) +\n                            (maze[r - 1][q + 1] ? 0 : 0b001_000_000) +\n                            (maze[r][q - 1]     ? 0 : 0b000_100_000) +\n                            (maze[r][q]         ? 0 : 0b000_010_000) +\n                            (maze[r][q + 1]     ? 0 : 0b000_001_000) +\n                            (maze[r + 1][q - 1] ? 0 : 0b000_000_100) +\n                            (maze[r + 1][q]     ? 0 : 0b000_000_010) +\n                            (maze[r + 1][q + 1] ? 0 : 0b000_000_001);\n                        tiles[r][q] = (key << 4) + Constants.TILE_FLOOR1;\n                    }\n                }\n            }\n            return tiles;\n        },\n\n        generate(seed) {\n            let maze = Geometry.array2d(99, 99, 0);\n            //let rand = Random.seed(\"apples\");\n            let rand = Random.seed(seed);\n\n            let roomNumber = 1;\n\n            let result = MazeGenerator.attemptRoomPlacement(maze, rand, [{ q: 0, r: 0 }, { q: 99, r: 99 }], 11, 9, roomNumber++);\n            console.log(result);\n            let rooms = [result];\n\n            for (let i = 0; i < 100; i++) {\n                let w = rand(3, 4) * 2 + 1;\n                let h = rand(3, 4) * 2 + 1;\n                result = MazeGenerator.attemptRoomPlacement(maze, rand, [{ q: 0, r: 0 }, { q: 99, r: 99 }], w, h, roomNumber);\n                if (result) rooms.push(result);\n                if (result && result.roomNumber === roomNumber) roomNumber++;\n            }\n            for (let i = 0; i < 100; i++) {\n                let w = rand(2, 4) * 2 + 1;\n                let h = rand(2, 4) * 2 + 1;\n                result = MazeGenerator.attemptRoomPlacement(maze, rand, [{ q: 0, r: 0 }, { q: 99, r: 99 }], w, h, roomNumber);\n                if (result) rooms.push(result);\n                if (result && result.roomNumber === roomNumber) roomNumber++;\n            }\n            for (let i = 0; i < 100; i++) {\n                let w = rand(1, 4) * 2 + 1;\n                let h = rand(1, 4) * 2 + 1;\n                result = MazeGenerator.attemptRoomPlacement(maze, rand, [{ q: 0, r: 0 }, { q: 99, r: 99 }], w, h, roomNumber);\n                if (result) rooms.push(result);\n                if (result && result.roomNumber === roomNumber) roomNumber++;\n            }\n\n            /*\n            random room placement\n\n            for (let i = 0; i < 900; i++) {\n                let w = rand(1, 4) * 2 + 1;\n                let h = rand(1, 4) * 2 + 1;\n                result = MazeGenerator.attemptRoomPlacement(maze, rand, [{ q: 0, r: 0 }, { q: 99, r: 99 }], w, h, roomNumber++);\n                console.log(result);\n            }\n            */\n\n            for (let r = 1; r < 99; r += 2) {\n                for (let q = 1; q < 99; q += 2) {\n                    if (MazeGenerator.openCrossCells(maze, q, r).length === 5) {\n                        MazeGenerator.carveMaze(maze, rand, q, r, roomNumber++);\n                    }\n                }\n            }\n\n            MazeGenerator.carveConnectors(maze, rand);\n\n            MazeGenerator.pruneDeadEnds(maze, rand);\n\n            let homeflow = Geometry.flood(maze, rooms[0]);\n            return {\n                maze,\n                tiles: MazeGenerator.createTiles(maze, rand),\n                rand,\n                rooms: this.createRoomLookup(rooms),\n                flowhome: homeflow\n            };\n        }\n    };\n\n    const C_WIDTH = 3;\n    const C_HEIGHT = 5;\n\n    // Very simple variable-width font implementation. The characters in the font strip\n    // are left-aligned in their 3x5 pixel boxes, so in order to have variable width,\n    // we just need to note the characters that AREN'T full width. Anything not in\n    // this list has full shift (3+1 = 4 pixels).\n    const C_SHIFT = {\n        32: 3,          // Space\n        44: 3,          // Comma\n        46: 3,          // Period\n        73: 2           // I\n    };\n\n    /**\n     * Text\n     *\n     * Utilities for drawing text using in-game pixel font.\n     */\n    const Text = {\n        async init() {\n            this.default = Sprite.font.img;\n            this.fire = this.recolor(this.default, ctx => {\n                let gradient = ctx.createLinearGradient(0, 0, 0, this.default.height);\n                gradient.addColorStop(0, 'rgba(240,134,51,1)');\n                gradient.addColorStop(1, 'rgba(250,220,74,1)');\n                return gradient;\n            });\n            this.shadow = this.recolor(this.default, 'rgba(240, 240, 255, 0.25)');\n        },\n\n        drawText(ctx, text, u, v, font = this.default, scale = 1) {\n            text = text.toUpperCase();\n            for (let idx = 0; idx < text.length; idx++) {\n                let c = text.charCodeAt(idx);\n                ctx.drawImage(\n                    font,\n                    (c - 32) * (C_WIDTH + 1), 0, C_WIDTH, C_HEIGHT,\n                    u, v, C_WIDTH * scale, C_HEIGHT * scale\n                );\n                u += (C_SHIFT[c] || (C_WIDTH + 1)) * scale;\n            }\n        },\n\n        drawRightText(ctx, text, u, v, font = this.default, scale = 1) {\n            text = text.toUpperCase();\n            u -= this.measureWidth(text, scale);\n            this.drawText(ctx, text, u, v, font, scale);\n        },\n\n        drawParagraph(ctx, text, u, v, w, h, font = this.default, scale = 1) {\n            let cu = u, cv = v, phrases = text.toUpperCase().split(' ');\n\n            for (let phrase of phrases) {\n                let phraseWidth = this.measureWidth(phrase, scale);\n                if (cu + phraseWidth - u > w) {\n                    cu = u;\n                    cv += (C_HEIGHT + 2) * scale;\n                }\n                this.drawText(ctx, phrase, cu, cv, font, scale);\n                cu += phraseWidth + (C_SHIFT[32] );\n            }\n        },\n\n        measureWidth(text, scale) {\n            return text.split('').reduce((sum, c) => sum + (C_SHIFT[c.charCodeAt(0)] || 4), 0) * scale;\n        },\n\n        recolor(font, color) {\n            let canvas = new Canvas(font.width, font.height);\n            canvas.ctx.fillStyle = typeof color === \"function\" ? color(canvas.ctx) : color;\n            canvas.ctx.fillRect(0, 0, font.width, font.height);\n            console.log(font.width, font.height, color, canvas);\n            canvas.ctx.globalCompositeOperation = 'destination-in';\n            canvas.ctx.drawImage(font, 0, 0);\n            return canvas.canvas;\n        },\n    };\n\n    /**\n     * Detection\n     */\n    const Detection = {\n      lineOfSight(a, b) {\n          // todo: this checks center mass\n          for (let tile of Geometry.tilesHitBetween(a.pos, b.pos)) {\n            if (!Geometry.tileIsPassable(tile.q, tile.r)) return false;\n          }\n\n          // todo: distance away\n          // todo: facing check\n          return true;\n      }\n    };\n\n    /**\n     * Behavior\n     */\n    const Behavior = {\n      IDLE:   101,\n      WANDER: 102,\n      CHASE:  103,\n      HUNT:   104,\n      FLEE:   105,\n      DEAD:   106,\n\n      ATTACK: 201,\n      RELOAD: 202,\n\n      apply(entities) {\n        for (let entity of entities) {\n          if (entity.think) entity.think();\n        }\n      }\n    };\n\n    /**\n     * Monster\n     */\n    class Monster {\n      constructor() {\n        this.pos = { x: 0, y: 0 };\n        this.vel = { x: 0, y: 0 };\n        this.facing = { x: 0, y: -1, m: 0 };\n        this.hp = 100;\n        this.damage = [];\n        this.radius = 11;\n\n        this.mass = 0.5;\n      }\n\n      think() {\n        switch (this.state) {\n          case Behavior.IDLE:\n            if (Detection.lineOfSight(this, game.player)) {\n              this.state = Behavior.CHASE;\n            }\n            break;\n          case Behavior.CHASE:\n            let diff = Geometry.vectorBetween(this.pos, game.player.pos);\n            diff.m = Geometry.clamp(diff.m, 0, 1);\n            this.vel = { x: diff.x * diff.m, y: diff.y * diff.m };\n            break;\n          case Behavior.DEAD:\n            this.vel = { x: 0, y: 0, m: 0 };\n            if (!this.cullt) this.cullt = 15;\n            this.cullt--;\n            if (this.cullt < 1) this.cull = true;\n            break;\n          default:\n            this.state = Behavior.IDLE;\n            break;\n        }\n      }\n\n      draw(viewport) {\n        // TODO\n        if (this.state === Behavior.DEAD) {\n          Sprite.drawViewportSprite(viewport, Sprite.monster_dead, this.pos, game.camera.pos);\n        } else {\n          Sprite.drawViewportSprite(viewport, Sprite.monster, this.pos, game.camera.pos);\n        }\n      }\n    }\n\n    class ShotgunBlast {\n      constructor(pos, angle) {\n        this.pos = { ...pos };\n        this.angle = angle;\n        this.spread = Geometry.RAD[70];\n        this.range = 55;\n      }\n\n      think() {\n        this.t = (this.t || 0) + 1;\n\n        if (this.t === 3) {\n          let entities = game.entities.filter(entity => entity instanceof Monster);\n          for (let entity of entities) {\n            let vect = Geometry.vectorBetween(this.pos, entity.pos);\n            if (vect.m >= this.range + entity.radius) continue;\n\n            let dot1 = Geometry.vectorBetween(\n              this.pos,\n              { x: entity.pos.x - vect.y * entity.radius, y: entity.pos.y + vect.x * entity.radius }\n            );\n            let dot2 = Geometry.vectorBetween(\n              this.pos,\n              { x: entity.pos.x + vect.y * entity.radius, y: entity.pos.y - vect.x * entity.radius }\n            );\n            let sides = [Geometry.vector2angle(dot1), Geometry.vector2angle(dot2)];\n            let overlap = Geometry.arcOverlap(sides[0], sides[1], this.angle - this.spread / 2, this.angle + this.spread / 2);\n            if (!overlap) continue;\n\n            let wallHit = [];\n            let k = Geometry.vectorAdd(this.pos, Geometry.angle2vector(sides[0], vect.m));\n            for (let tile of Geometry.tilesHitBy(this.pos, Geometry.angle2vector(sides[0], vect.m))) {\n              if (!Geometry.tileIsPassable(tile.q, tile.r)) {\n                wallHit.push(tile);\n                break;\n              }\n            }\n            for (let tile of Geometry.tilesHitBy(this.pos, Geometry.angle2vector(sides[1], vect.m))) {\n              if (!Geometry.tileIsPassable(tile.q, tile.r)) {\n                wallHit.push(tile);\n                break;\n              }\n            }\n\n            if (wallHit.length < 2) {\n              // hit\n              entity.damage.push({ amount: 25, vector: vect });\n            }\n          }\n        }\n\n        if (this.t > 6) this.cull = true;\n      }\n\n      draw(viewport) {\n        // TODO\n        //Sprite.drawViewportSprite(viewport, Sprite.monster, this.pos, game.camera.pos);\n        let uv = Geometry.xy2uv(this.pos);\n        viewport.ctx.beginPath();\n        viewport.ctx.arc(uv.u, uv.v, this.range, this.angle - this.spread / 2, this.angle + this.spread / 2);\n        viewport.ctx.lineTo(uv.u, uv.v);\n        viewport.ctx.closePath();\n        viewport.ctx.fillStyle = 'rgba(255, 0, 0, 0.5)';\n        viewport.ctx.fill();\n      }\n    }\n\n    class ReloadAnimation {\n      constructor(frames) {\n        this.t = 0;\n        this.d = frames;\n      }\n\n      think() {\n        if (++this.t === this.d) this.cull = true;\n      }\n\n      draw(viewport) {\n        for (let i = 0; i < game.player.shellsMax; i++) {\n          let end = i * this.d / game.player.shellsMax;\n          let start = end - 3;\n\n          if (this.t >= start) {\n            let y = Math.min(10, 10 + this.t - end);\n            viewport.ctx.drawImage(Sprite.hud_shells_full.img, 15 + 6 * i, y);\n          }\n        }\n      }\n    }\n\n    /**\n     * Player\n     */\n    class Player {\n      constructor() {\n        this.pos = { x: 0, y: 0 };\n        this.vel = { x: 0, y: 0 };\n        this.facing = { x: 0, y: -1, m: 0 };\n        this.hp = 100;\n        this.damage = [];\n        this.radius = 12;\n\n        this.shellsLeft = 4;\n        this.shellsMax = 4;\n\n        this.mass = 3;\n      }\n\n      think() {\n        switch (this.state) {\n          case Behavior.HUNT:\n            this.defaultMovement(1);\n\n            if (game.input.pressed[Input.Action.ATTACK]) {\n              if (this.shellsLeft === 0) {\n                this.reload();\n              } else {\n                this.fire();\n              }\n            }\n\n            if (game.input.pressed[Input.Action.RELOAD]) {\n              this.reload();\n            }\n\n            break;\n          case Behavior.ATTACK:\n            this.defaultMovement(1);\n            if (--this.frames <= 0) this.state = Behavior.HUNT;\n            break;\n          case Behavior.RELOAD:\n            this.defaultMovement(2.5);\n            if (--this.frames <= 0) {\n              this.shellsLeft = this.shellsMax;\n              this.state = Behavior.HUNT;\n            }\n            break;\n          default:\n            this.state = Behavior.HUNT;\n            this.frames = 0;\n            break;\n        }\n      }\n\n      defaultMovement(velocityAdj) {\n        if (game.pointerXY()) {\n          this.facing = Geometry.vectorBetween(this.pos, game.pointerXY());\n        }\n\n        let v = {\n          x: game.input.direction.x * game.input.direction.m * 1.8 * velocityAdj,\n          y: game.input.direction.y * game.input.direction.m * 1.8 * velocityAdj\n        };\n\n        this.vel.x = (this.vel.x + v.x) / 2;\n        this.vel.y = (this.vel.y + v.y) / 2;\n      }\n\n      draw(viewport) {\n        Sprite.drawViewportSprite(viewport, Sprite.player, this.pos, game.camera.pos);\n\n        viewport.ctx.strokeStyle = 'rgba(255, 255, 64, 0.3)';\n        viewport.ctx.beginPath();\n        let uv = game.xy2uv(this.pos);\n        viewport.ctx.arc(uv.u, uv.v, Constants.PLAYER_BOUND_RADIUS, 0, 2 * Math.PI);\n        viewport.ctx.setLineDash([2, 1]);\n        viewport.ctx.stroke();\n        viewport.ctx.setLineDash([]);\n      }\n\n      fire() {\n        this.state = Behavior.ATTACK;\n        this.frames = 6;\n        this.shellsLeft--;\n\n        let angle = Geometry.vector2angle(this.facing);\n        game.entities.push(new ShotgunBlast(this.pos, angle));\n\n        this.vel = Geometry.normalizeVector(this.facing);\n        this.vel.m = 1;\n\n        /*\n        let spread = G.RAD[60];\n        let pellets = 12;\n        // shotgun: 60, 12, 10\n        // sniper: 5, 12, 40\n\n        for (let idx = 0; idx < pellets; idx++) {\n          let pelletAngle = (idx * spread / (pellets - 1)) + angle - spread / 2;\n          let pelletVector = G.angle2vector(pelletAngle);\n          let bullet = new Bullet();\n          bullet.pos = { ...this.pos };\n          bullet.vel = { x: pelletVector.x * 10, y: pelletVector.y * 10 };\n          game.entities.push(bullet);\n        }\n        */\n\n      }\n\n      reload() {\n        this.state = Behavior.RELOAD;\n        this.frames = 12;\n        game.entities.push(new ReloadAnimation(12));\n      }\n    }\n\n    const Menu = {\n        draw(viewport) {\n\n            return;\n\n            /*\n            Text.drawText(ctx, \"Abominable Snowman\", 120, 50);\n            Text.drawText(ctx, \"Abominable Snowman\", 121, 50, Text.shadow);\n            Text.drawRightText(ctx, \"500\", 120, 70);\n            Text.drawRightText(ctx, \"1,200\", 120, 80);\n            Text.drawRightText(ctx, \"5,000\", 120, 90);\n            Text.drawRightText(ctx, \"5,000\", 121, 91, Text.shadow);\n\n\n            5px 7px 9px\n\n            draw(viewport) {\n                Sprite.drawViewportSprite(viewport, Sprite.player, this.pos, game.camera.pos);\n\n                viewport.ctx.strokeStyle = 'rgba(255, 255, 64, 0.3)';\n                viewport.ctx.beginPath();*/\n\n        }\n    };\n\n    /**\n     * Movement\n     */\n    const Movement = {\n      apply(entities) {\n        // Movement only applies to active entities with positions and velocities\n        let movers = entities.filter(entity => entity.pos && entity.vel && !entity.cull);\n\n        // Very basic \"rounds\" of collision resolution, since we have no real physics.\n        // (As usual, \"detecting\" a collision is not the hard part... we need to resolve\n        // them too!)\n        for (let rounds = 0; rounds < 5; rounds++) {\n          // Each pair of entities only needs to interact once.\n          for (let i = 0; i < movers.length - 1; i++) {\n            for (let j = i + 1; j < movers.length; j++) {\n              this.clipVelocityEntityVsEntity(movers[i], movers[j]);\n            }\n          }\n\n          for (let entity of movers) {\n            this.clipVelocityAgainstWalls(entity);\n          }\n        }\n\n        // Now we apply all movement, even if it's not going to be perfect.\n        for (let entity of movers) {\n          entity.pos.x += entity.vel.x;\n          entity.pos.y += entity.vel.y;\n        }\n      },\n\n      clipVelocityEntityVsEntity(entity, other) {\n        let hit = Geometry.intersectCircleCircle2(\n          entity.pos, entity.radius, entity.vel,\n          other.pos, other.radius, other.vel\n        );\n        if (hit) {\n          // Not a bug: we \"add\" the mass of the opposing entity to our own velocity when deciding who\n          // is at fault for the collision. Entity velocities adjust in relation to their fault level.\n          let entityM = Geometry.normalizeVector(entity.vel).m + other.mass;\n          let otherM = Geometry.normalizeVector(other.vel).m + entity.mass;\n          entity.vel.x -= hit.nx * hit.m * entityM / (entityM + otherM);\n          entity.vel.y -= hit.ny * hit.m * entityM / (entityM + otherM);\n          other.vel.x += hit.nx * hit.m * otherM / (entityM + otherM);\n          other.vel.y += hit.ny * hit.m * otherM / (entityM + otherM);\n        }\n      },\n\n      clipVelocityAgainstWalls(entity) {\n        for (let tile of Geometry.tilesHitByCircle(entity.pos, entity.vel, Constants.PLAYER_BOUND_RADIUS)) {\n          if (!Geometry.tileIsPassable(tile.q, tile.r)) {\n            let bounds = [Geometry.qr2xy(tile), Geometry.qr2xy({ q: tile.q + 1, r: tile.r + 1 })];\n            let hit = Geometry.intersectCircleRectangle(\n              entity.pos,\n              { x: entity.pos.x + entity.vel.x, y: entity.pos.y + entity.vel.y },\n              Constants.PLAYER_BOUND_RADIUS,\n              bounds\n            );\n\n            // The \"math\" part of detecting collision with walls is buried in the geometry functions\n            // above, but it's not the whole story -- if we do detect a collision, we still need to\n            // decide what to do about it.\n            //\n            // If the normal vector is horizontal or vertical, we zero out the portion of the vector\n            // moving into the wall, allowing frictionless sliding (if we wanted to apply friction,\n            // we could also reduce the other axis slightly).\n            //\n            // If the normal vector is not 90*, we \"back up\" off the wall by exactly the normal vector.\n            // If the player runs into a corner at EXACTLY a 45 degree angle, they will simply \"stick\"\n            // on it -- but one degree left or right and they'll slide around the corner onto the wall,\n            // which is the desired result.\n            if (hit) {\n              if (hit.nx === 0) {\n                entity.vel.y = hit.y - entity.pos.y;\n              } else if (hit.ny === 0) {\n                entity.vel.x = hit.x - entity.pos.x;\n              } else {\n                entity.vel.x += hit.nx;\n                entity.vel.y += hit.ny;\n              }\n            }\n          }\n        }\n      }\n    };\n\n    /**\n     * Damage\n     */\n    const Damage = {\n      apply(entities) {\n        for (let entity of entities) {\n          if (typeof entity.hp === 'number') {\n            if (entity.damage.length > 0) {\n              for (let damage of entity.damage) {\n                entity.hp -= damage.amount;\n                damage.vector.m = 10; // push back amount\n                entity.vel = Geometry.vectorAdd(entity.vel, damage.vector);\n              }\n              entity.damage = [];\n            }\n            if (entity.hp <= 0) entity.state = Behavior.DEAD;\n          }\n        }\n      }\n    };\n\n    /*import { Input } from './Input';\n    import { Player } from './Player';\n    import { ScreenShake } from './ScreenShake';\n    import { Hud } from './Hud';\n    import { Menu, PauseMenu, IntroMenuA, IntroMenuB, OutroMenu } from './Menu';\n    import { Audio } from './Audio';\n    import { Assets, Sprite, drawPoly } from './Assets';\n    import { Demon1 } from './Demon1';\n    import { Canvas } from './Canvas';\n    import { Particle, PortalParticle, SuperParticle } from './Particle';\n    import { Hive } from './Hive';\n    import { Point, intersectingPolygons, intersectingCircles, RAD, vectorFromAngle, distance } from './Geometry';\n    import { HEARTBEAT } from './Config';\n    import { Tween } from './Tween';\n    */\n\n    /**\n     * Game state.\n     */\n    class Game {\n        constructor() {\n        }\n\n        async init() {\n            viewport.init();\n\n            this.input = new Input();\n            await this.input.init();\n\n            this.maze = MazeGenerator.generate(\"apples\");\n            this.camera = { pos: { x: 1, y: 1 } };\n\n            await Assets.init();\n            await Text.init();\n\n            this.entities = [];\n\n            this.player = new Player();\n            console.log(this.maze.rooms);\n            this.player.pos.x = (this.maze.rooms[1][0].q + Math.floor(this.maze.rooms[1][0].width / 2)) * Constants.TILE_WIDTH + Constants.TILE_WIDTH / 2;\n            this.player.pos.y = (this.maze.rooms[1][0].r + Math.floor(this.maze.rooms[1][0].height / 2)) * Constants.TILE_WIDTH + Constants.TILE_WIDTH / 2;\n\n            this.entities.push(this.player);\n\n            /*\n\n            await Assets.init();\n\n            this.artifacts = [\n                await Assets.grayscaleNoise(this.canvas.width, this.canvas.height),\n                await Assets.grayscaleNoise(this.canvas.width, this.canvas.height),\n                await Assets.grayscaleNoise(this.canvas.width, this.canvas.height)\n            ];\n\n            this.input = new Input();\n            await this.input.init();\n\n            this.player = new Player();\n\n            this.hud = new Hud();\n\n            this.particles = [];\n            this.screenshakes = [];\n            this.menuStack = [];\n\n            this.monsters = [];\n\n            // Create, but do not initialize, the audio object. The audio object will be\n            // initialized as soon as possible by the first user input event, to meet\n            // requirements of the browser.\n            this.audio = new Audio();\n\n            this.score = 0;\n\n            this.hive = new Hive();\n\n            */\n        }\n\n        start() {\n            this.frame = 0;\n\n            this.started = true;\n            this.update();\n            this.started = false;\n\n            /*\n            this.menuStack.push(new IntroMenuA({\n                onClose: () => {\n                    this.menuStack.push(new IntroMenuB({}));\n                }\n            }));*/\n\n            //this.framems = performance.now();\n            window.requestAnimationFrame(() => this.onFrame(1));\n            //this.frame = 0;\n        }\n\n        onFrame(currentms) {\n            this.frame++;\n            viewport.resize();\n            this.update();\n            this.draw(viewport.ctx);\n            window.requestAnimationFrame(() => this.onFrame(currentms));\n        }\n\n        update() {\n            // Pull in frame by frame button pushes / keypresses / mouse clicks\n            this.input.update();\n\n            // Behavior (AI, player input, etc.)\n            Behavior.apply(this.entities);\n\n            Damage.apply(this.entities);\n\n            // Movement (apply entity velocity to position)\n            Movement.apply(this.entities);\n\n            // camera logic! where does it go! (an entity perhaps?)\n            let diff = {\n                x: this.player.pos.x - this.camera.pos.x,\n                y: this.player.pos.y - this.camera.pos.y\n            };\n            this.camera.pos.x += diff.x * 0.2;\n            this.camera.pos.y += diff.y * 0.2;\n\n            this.spawnEnemy();\n\n            // Culling Step\n            this.entities = this.entities.filter(entity => !entity.cull);\n        }\n\n        spawnEnemy() {\n            let enemies = this.entities.filter(entity => entity instanceof Monster);\n            if (enemies.length < 4 && Math.random() < 0.1) {\n                let q = this.maze.rooms[1][0].q + this.maze.rand(0, this.maze.rooms[1][0].width);\n                let r = this.maze.rooms[1][0].r + this.maze.rand(0, this.maze.rooms[1][0].height);\n                let monster = new Monster();\n                monster.pos = Geometry.qr2xy({ q, r });\n                this.entities.push(monster);\n            }\n        }\n\n        draw(ctx) {\n            ctx.setTransform(1, 0, 0, 1, 0, 0);\n            ctx.scale(viewport.scale, viewport.scale);\n\n            ctx.fillStyle = 'rgba(48,32,48,1)';\n            ctx.fillRect(0, 0, viewport.width, viewport.height);\n\n            /*ctx.fillStyle = 'rgba(150, 128, 128, 1)';\n            ctx.fillRect(10, 10, 100, 100);*/\n\n            this.drawMaze(ctx, this.maze);\n\n            this.drawHud(ctx);\n\n            Text.drawRightText(ctx, [viewport.scale, viewport.width, viewport.height].join(', '), viewport.width - 4, 10);\n\n            /*\n            Text.drawParagraph(ctx,\n                \"Hold down fire button to decrease spread and increase range.\" +\n                \" Most critical hits, when used, will go up 175%.\",\n                121, 50, 225, 100, Text.shadow, 1);\n            Text.drawParagraph(ctx,\n                \"Hold down fire button to decrease spread and increase range.\" +\n                \" Most critical hits, when used, will go up 175%.\",\n                120, 50, 225, 100, Text.fire, 1);\n                */\n\n            let ptr = this.input.pointer;\n            if (ptr) {\n                Text.drawRightText(ctx, JSON.stringify(ptr), viewport.width - 4, 20);\n                ctx.fillStyle = 'rgba(255, 120, 120, 1)';\n                ctx.fillRect(ptr.u - 1, ptr.v - 1, 3, 3);\n            }\n\n            for (let entity of this.entities) {\n                entity.draw(viewport);\n            }\n\n            // TODO\n            // this.trace(viewport);\n\n            // x\n\n            /*\n            ctx.fillStyle = 'rgba(150, 128, 128, 1)';\n            ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n            this.shadow.ctx.globalCompositeOperation = 'copy';\n            //this.shadow.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n            this.shadow.ctx.fillStyle = 'rgba(0, 0, 0, 0.99)';\n            this.shadow.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n            this.shadow.ctx.globalCompositeOperation = 'destination-out';\n            let grd = this.shadow.ctx.createRadialGradient(game.player.x, game.player.y, 0, game.player.x, game.player.y, 200);\n            grd.addColorStop(0, \"rgba(0, 0, 0, 1)\");\n            grd.addColorStop(0.5, \"rgba(0, 0, 0, 0.95)\");\n            grd.addColorStop(1, \"rgba(0, 0, 0, 0)\");\n            this.shadow.ctx.fillStyle = grd;\n            this.shadow.ctx.beginPath();\n            this.shadow.ctx.arc(game.player.x, game.player.y, 200, 0, 2 * Math.PI);\n            this.shadow.ctx.fill();\n\n            for (let particle of this.particles.filter(p => p instanceof PortalParticle)) {\n                let r = (particle as PortalParticle).effectiveRadius();\n                this.shadow.ctx.globalCompositeOperation = 'destination-out';\n                let grd = this.shadow.ctx.createRadialGradient(particle.x, particle.y, 0, particle.x, particle.y, r);\n                grd.addColorStop(0, \"rgba(0, 0, 0, 0.7)\");\n                grd.addColorStop(1, \"rgba(0, 0, 0, 0)\");\n                this.shadow.ctx.fillStyle = grd;\n                this.shadow.ctx.beginPath();\n                this.shadow.ctx.arc(particle.x, particle.y, r, 0, 2 * Math.PI);\n                this.shadow.ctx.fill();\n            }\n\n            this.shadow.ctx.globalCompositeOperation = 'source-atop';\n            for (let monster of this.monsters) {\n                this.shadow.ctx.beginPath();\n                this.shadow.ctx.arc(monster.x, monster.y, 200, 0, 2 * Math.PI);\n            }\n\n            /*\n              we don't even use bloodplanes (splatter terrain) anymore because i just\n              render all of them as particles\n            ctx.globalAlpha = 1 - this.bloodplanes[0][1] / this.bloodplanes[0][2];\n            ctx.globalAlpha = 0.9;\n            ctx.drawImage(this.bloodplanes[0][0].canvas, 0, 0);\n            ctx.globalAlpha = 1 - this.bloodplanes[1][1] / this.bloodplanes[1][2];\n            ctx.drawImage(this.bloodplanes[1][0].canvas, 0, 0);\n            ctx.globalAlpha = 1 - this.bloodplanes[2][1] / this.bloodplanes[2][2];\n            ctx.drawImage(this.bloodplanes[2][0].canvas, 0, 0);\n            ctx.globalAlpha = 1;\n            ctx.save();\n            let shakeX = 0, shakeY = 0;\n            this.screenshakes.forEach(shake => {\n                shakeX += shake.x;\n                shakeY += shake.y;\n            });\n            ctx.translate(shakeX, shakeY);\n\n            // low-hanging fruit here (pre-render the map since it never changes)\n            for (let i = 0; i < 16; i++) {\n                for (let j = 0; j < 10; j++) {\n                    let k = ((i * i * 13) + j * 17) % 9;\n                    Sprite.drawSprite(ctx, Sprite.tiles[k], i * 32 - 16, j * 32 - 8);\n                }\n            }\n\n            for (let particle of this.particles) if (!particle.foreground && !game.superFired) particle.draw(ctx);\n\n            this.player.draw(ctx);\n\n            //Text.renderText(ctx, 250, 120, 20, 'THE ELEPHANTS');\n            //Text.renderText(ctx, 100, 200, 64, 'AB0123456789');\n            //Text.renderText(ctx, 100, 150, 30, 'AB0123456789');\n\n            for (let monster of this.monsters) monster.draw(ctx);\n\n      //      var bubble = ctx.createLinearGradient(\n            // Let's add blue noise?\n            /*for (let i = 100; i < 300; i += 5) {\n                for(let j = 100; j < 120; j += 5) {\n                    let [x, y] = [Math.random() * 5, Math.random() * 5];\n                    ctx.fillStyle = 'rgba(0,0,0,0.5)';\n                    ctx.fillRect(i+Math.floor(x),j+Math.floor(y),1,1);\n                }\n\n            for (let particle of this.particles) if (particle.foreground) particle.draw(ctx);\n\n            ctx.drawImage(this.shadow.canvas, 0, 0);\n            let noiseLoop = Math.floor(this.frame / 8) % 3;\n            ctx.globalAlpha = 0.06;\n            ctx.drawImage(this.artifacts[noiseLoop].canvas, 0, 0);\n            ctx.globalAlpha = 1;\n\n            this.hud.draw(ctx);\n            this.hive.draw(ctx);\n\n            ctx.restore();\n\n            /*\n            if (this.frame % HEARTBEAT === 0 || (this.frame - 1) % HEARTBEAT === 0 || (this.frame - 2) % HEARTBEAT === 0) {\n                ctx.fillStyle = 'rgba(255, 255, 30, 0.3)';\n                ctx.fillRect(100, 0, 100, 10);\n            */\n\n            Menu.draw(viewport);\n        }\n\n        drawMaze(ctx, maze) {\n            let offset = {\n                x: viewport.center.u - this.camera.pos.x,\n                y: viewport.center.v - this.camera.pos.y\n            };\n            for (let r = 0; r < maze.tiles.length; r++) {\n                for (let q = 0; q < maze.tiles[r].length; q++) {\n                    let x = q * 32 + offset.x, y = r * 32 + offset.y;\n                    if (x < -50 || y < -50 || x > 500 || y > 500) continue;\n\n                    let sprite = Sprite.tiles[maze.tiles[r][q] & 0b1111];\n                    if (!sprite) throw new Error(`${q},${r} tile ${maze.tiles[r][q]}`);\n                    ctx.drawImage(sprite.img, x, y);\n\n                    sprite = Sprite.walls[maze.tiles[r][q] >> 4];\n                    if (sprite) ctx.drawImage(sprite.img, x, y);\n\n                    //if (this.maze.flowhome[r][q] < 100)\n                    //Text.drawText(ctx, String(this.maze.flowhome[r][q]), x, y);\n\n                    // commented for screenshots:\n                    //Text.drawText(ctx, String(maze.tiles[r][q] >> 4), x, y);\n\n                    //ctx.fillRect(q * 4 - this.camera.pos.x + this.center.pixel.u, r * 4 - this.camera.pos.y + this.center.pixel.v, 4, 4);\n                }\n            }\n        }\n\n        pointerXY() {\n            if (!this.input.pointer) return;\n            return this.uv2xy(this.input.pointer);\n        }\n\n        xy2uv(pos) {\n            return {\n                u: pos.x - this.camera.pos.x + viewport.center.u,\n                v: pos.y - this.camera.pos.y + viewport.center.v\n            };\n        }\n\n        uv2xy(pos) {\n            return {\n                x: pos.u - viewport.center.u + this.camera.pos.x,\n                y: pos.v - viewport.center.v + this.camera.pos.y\n            };\n        }\n\n        trace(viewport) {\n            if (!this.input.pointer) return;\n            let p = this.player;\n            for (let e of this.entities) {\n                if (p === e) continue;\n                viewport.ctx.beginPath();\n                viewport.ctx.strokeStyle = 'red';\n                viewport.ctx.moveTo(viewport.center.u - this.camera.pos.x + p.pos.x,\n                    viewport.center.v - this.camera.pos.y + p.pos.y);\n                viewport.ctx.lineTo(this.input.pointer.u, this.input.pointer.v);\n                viewport.ctx.stroke();\n\n                this.raytrace(p.pos, this.pointerXY());\n            }\n        }\n\n        // https://www.genericgamedev.com/general/shooting-rays-through-tilemaps/\n        raytrace(p1, p2) {\n            let redgreen = 'green';\n\n            for (let { q, r } of Geometry.tilesHitBetween(p1, p2)) {\n                let offset = {\n                    x: viewport.center.u - this.camera.pos.x,\n                    y: viewport.center.v - this.camera.pos.y\n                };\n                if (!game.maze.maze[r][q]) redgreen = 'red';\n                let highlight = redgreen === 'red' ? 'rgba(255, 128, 128, 0.5)' : 'rgba(128, 255, 128, 0.5)';\n                viewport.ctx.fillStyle = highlight;\n                viewport.ctx.strokeStyle = highlight;\n                viewport.ctx.fillRect(q * 32 + offset.x, r * 32 + offset.y, 32, 32);\n                viewport.ctx.strokeRect(q * 32 + offset.x, r * 32 + offset.y, 32, 32);\n                if (redgreen === 'red') break;\n            }\n        }\n\n        drawHud(ctx) {\n            let hp = Geometry.clamp(game.player.hp, 0, 100);\n            ctx.drawImage(Sprite.hud_health_frame.img, 2, 2);\n            ctx.drawImage(Sprite.hud_health_fill.img, 0, 0, hp + 8, 8, 2, 2, hp + 8, 8);\n\n            let sprite = Sprite.hud_shells_full;\n            for (let i = 0; i < game.player.shellsMax; i++) {\n                if (i + 1 > game.player.shellsLeft) sprite = Sprite.hud_shells_empty;\n                ctx.drawImage(sprite.img, 15 + 6 * i, 10);\n            }\n        }\n    }\n\n    const game = new Game();\n\n    /**\n     * Create and launch game.\n     */\n    game.init().then(() => game.start());\n\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}