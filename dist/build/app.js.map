{"version":3,"sources":["app.js"],"names":["Constants","Math","PI","Canvas","[object Object]","width","height","this","canvas","document","createElement","ctx","getContext","SpriteSheet","i","x","y","w","s","h","font","o","l","u","M","m","page","g","p","v","k","A","B","T","D","Sprite","sprite","drawImage","img","anchor","viewport","spritePos","cameraPos","N","C","viewportSprite2uv","center","strokeStyle","strokeRect","bbox","hbox","dx","dy","r","getSpriteBoxPolygon","box","_","A45","KeyboardAdapter","handler","map","Input","Action","ATTACK","DEFLECT","DODGE","SUPER","UP","DOWN","LEFT","RIGHT","MENU","MUTE","FREEZE","arrowDirections","ot","held","reset","window","addEventListener","event","keyCode","console","log","state","direction","action","Object","values","getElementById","resize","force","dpi","devicePixelRatio","clientWidth","clientHeight","dpiWidth","dpiHeight","scale","floor","max","ceil","imageSmoothingEnabled","style","cursor","MouseAdapter","RELOAD","pointer","clientX","clientY","button","preventDefault","releaseRMBTick","pressed","released","framesHeld","keyboard","init","mouse","update","Z","tt","it","st","$","nt","J","X","Y","ht","et","rt","Geometry","gt","radianTable","sqrt","bt","p1","p2","normalizeVector","vt","cos","sin","angle","atan2","RAD","Et","At","a","b","vector2point","vectors","vector","Tt","min","Dt","angleA1","angleA2","angleB1","angleB2","result","Ht","pos","Nt","Ct","q","It","game","camera","Lt","value","startPos","endPos","next","step","diff","NaN","Infinity","startQ","startR","endQ","endR","tileCount","abs","stepQ","sign","stepR","intersectionQ","calculateRayIntersectionAndStep","intersectionR","tilesHitBetween","vectorAdd","bounds","tilesHitInBounds","tilesHitBetweenCircle","invdx","invdy","cornerX","cornerY","ltime","ly","_t","jt","$t","Kt","Jt","rtime","ry","ttime","tx","btime","bx","inverseRadius","lineLength","cornerdx","cornerdy","cornerDistance","innerAngle","acos","time","ix","iy","nx","ny","isNaN","innerAngleSin","angle1Sin","angle1","asin","angle2","r1","v1","r2","v2","a1","a2","delta","vectorBetween","maze","maxDistance","array2d","length","stack","Qt","cost","shift","push","fn","Array","from","activeBattle","room","Map","ei","ri","MapLoader","ai","rooms","reduce","hash","roomNumber","walls","rand","tiles","oi","ptr","tunnels","roomLookup","createRoomLookup","hi","yi","createWalls","ci","createTiles","random","C_SHIFT","32","44","46","73","Text","default","fire","recolor","gradient","createLinearGradient","addColorStop","shadow","text","toUpperCase","idx","c","charCodeAt","measureWidth","drawText","cu","cv","phrases","split","phrase","phraseWidth","di","sum","color","fillStyle","fillRect","globalCompositeOperation","Detection","tile","tileIsPassable","Behavior","IDLE","pi","bi","vi","ki","Ei","entities","entity","think","Monster","vel","facing","hp","damage","radius","mass","lineOfSight","player","CHASE","clamp","DEAD","cullt","cull","drawViewportSprite","monster_dead","monster","ShotgunBlast","spread","range","t","filter","Player","vect","dot1","dot2","sides","vector2angle","arcOverlap","wallHit","angle2vector","tilesHitBy","Pi","Ui","Vi","uv","xy2uv","beginPath","arc","lineTo","closePath","fill","ReloadAnimation","frames","d","z","shellsMax","end","start","globalAlpha","hud_shells_full","zzfxX","top","AudioContext","webkitAudioContext","Audio","sound","shotgun","n","e","f","G","I","P","V","j","E","F","H","tan","round","createBufferSource","createBuffer","getChannelData","set","buffer","connect","destination","shellsLeft","HUNT","defaultMovement","input","reload","velocityAdj","pointerXY","playShotgun","setLineDash","stroke","Sculptor","bounce","dist","sawblade","save","translate","rotate","frame","drawSprite","restore","sawblade_eyes","Menu","BattleStreamAnimation","battle_stream","Movement","movers","rounds","clipVelocityEntityVsEntity","clipVelocityAgainstWalls","other","hit","intersectCircleCircle2","entityM","otherM","entityI","otherI","tilesHitByCircle","qr2xy","intersectCircleRectangle","HealthChunkAnimation","amount","gravity","hud_health_chunk","Damage","knockback","load","Rt","images","loadImage","initBasicSprite","player2","bullet","monster2","hud_shells_empty","hud_shells","hud_health_frame","hud_healthbar","hud_health_fill","hud_crosshair","data","battle_spray","walls2","slice","battle_door","tileset","battle_bg","initDynamicSprite","createBattleBackground","opts","loadCacheSlice","source","rad","sources","L","uri","sliceCanvas","Promise","resolve","reject","image","Image","onload","onerror","err","src","clearRect","roomsCleared","started","requestAnimationFrame","onFrame","currentms","draw","apply","qr","xy2qr","includes","si","ms","gs","plan","enemies","enemy","unshift","roomsClear","spawn","uv2xy","setTransform","drawMaze","drawHud","ky","offset","q1","q2","Error","String","drawRightText","join","JSON","stringify","grab","colors","globalOpacity","then"],"mappings":"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","file":"app.js","sourcesContent":["(function () {\n    'use strict';\n\n    const Constants = {\n        R0: 0,\n        R20: Math.PI  *  20 / 360,\n        R70: Math.PI  *  70 / 360,\n        R90: Math.PI  *  90 / 360,\n        R180: Math.PI * 180 / 360,\n        R270: Math.PI * 270 / 360,\n        R360: Math.PI * 360 / 360,\n\n        // Size in pixels of tiles in the game maze\n        TILE_WIDTH: 32,\n        TILE_HEIGHT: 32,\n\n        // Tile constants\n        TILE_FLOOR1:            0,\n        TILE_FLOOR2:            1,\n        TILE_WALL1:             2,\n        TILE_WALL2:             3,\n\n        // Wall bits, for rendering wall edges\n        WALL_TOP:      0b0000_1000,\n        WALL_RIGHT:    0b0000_0100,\n        WALL_BOTTOM:   0b0000_0010,\n        WALL_LEFT:     0b0000_0001,\n\n        // Room openings into rooms from corridors\n        OPEN_TOP:      0b1000_0000,\n        OPEN_RIGHT:    0b0100_0000,\n        OPEN_BOTTOM:   0b0010_0000,\n        OPEN_LEFT:     0b0001_0000,\n\n        PLAYER_BOUND_RADIUS: 9\n    };\n\n    /**\n     * This helper class encapsulates creating temporary off-screen canvases. Off-screen\n     * canvases are great tools for building patterns, image masks, and other components\n     * that we'll use to draw things on the primary canvas.\n     */\n    class Canvas {\n      constructor(width, height) {\n        this.canvas = document.createElement('canvas');\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.ctx = this.canvas.getContext('2d');\n      }\n    }\n\n    /**\n     * This module is generated by `gulp refreshAssets`.\n     */\n    const SpriteSheet =\n    /* <generated> */\n    { battle_stream:\n       [ { x: 0, y: 0, w: 1, h: 8 },\n         { x: 1, y: 0, w: 1, h: 8 },\n         { x: 2, y: 0, w: 1, h: 8 },\n         { x: 3, y: 0, w: 1, h: 8 },\n         { x: 4, y: 0, w: 1, h: 8 },\n         { x: 5, y: 0, w: 1, h: 8 },\n         { x: 6, y: 0, w: 1, h: 8 },\n         { x: 7, y: 0, w: 1, h: 8 } ],\n      bullet: [ { x: 0, y: 8, w: 32, h: 32 } ],\n      font: [ { x: 0, y: 40, w: 236, h: 6 } ],\n      hud_crosshair: [ { x: 0, y: 46, w: 9, h: 9 } ],\n      hud_healthbar:\n       [ { x: 0, y: 55, w: 109, h: 9 },\n         { x: 109, y: 55, w: 109, h: 9 },\n         { x: 218, y: 55, w: 109, h: 9 } ],\n      hud_shells: [ { x: 0, y: 64, w: 6, h: 7 }, { x: 6, y: 64, w: 6, h: 7 } ],\n      lovetoad:\n       [ { x: 0, y: 71, w: 19, h: 19 },\n         { x: 19, y: 71, w: 19, h: 19 },\n         { x: 38, y: 71, w: 19, h: 19 },\n         { x: 57, y: 71, w: 19, h: 19 },\n         { x: 76, y: 71, w: 19, h: 19 } ],\n      monster2: [ { x: 0, y: 90, w: 32, h: 32 }, { x: 32, y: 90, w: 32, h: 32 } ],\n      page: [ { x: 0, y: 122, w: 8, h: 8 } ],\n      paper: [ { x: 0, y: 130, w: 32, h: 32 }, { x: 32, y: 130, w: 32, h: 32 } ],\n      particles: [ { x: 0, y: 162, w: 11, h: 11 } ],\n      player2: [ { x: 0, y: 173, w: 32, h: 32 } ],\n      sawblade: [ { x: 0, y: 205, w: 17, h: 17 }, { x: 17, y: 205, w: 17, h: 17 } ],\n      sparkle: [ { x: 0, y: 222, w: 11, h: 11 } ],\n      spitter:\n       [ { x: 0, y: 233, w: 19, h: 19 },\n         { x: 19, y: 233, w: 19, h: 19 },\n         { x: 38, y: 233, w: 19, h: 19 },\n         { x: 57, y: 233, w: 19, h: 19 },\n         { x: 76, y: 233, w: 19, h: 19 } ],\n      tileset:\n       [ { x: 0, y: 252, w: 32, h: 32 },\n         { x: 32, y: 252, w: 32, h: 32 },\n         { x: 64, y: 252, w: 32, h: 32 },\n         { x: 96, y: 252, w: 32, h: 32 },\n         { x: 128, y: 252, w: 32, h: 32 },\n         { x: 160, y: 252, w: 32, h: 32 },\n         { x: 192, y: 252, w: 32, h: 32 },\n         { x: 224, y: 252, w: 32, h: 32 } ],\n      walls2:\n       [ { x: 0, y: 284, w: 46, h: 46 },\n         { x: 46, y: 284, w: 46, h: 46 },\n         { x: 92, y: 284, w: 46, h: 46 },\n         { x: 138, y: 284, w: 46, h: 46 },\n         { x: 184, y: 284, w: 46, h: 46 },\n         { x: 230, y: 284, w: 46, h: 46 },\n         { x: 276, y: 284, w: 46, h: 46 } ] }\n    /* </generated> */\n    ;\n\n    // The spritesheet is produced during the gulp build\n    const SPRITESHEET_URI = 'sprites.png';\n\n    /**\n     * Sprites!\n     *\n     * For this game, a \"sprite\" is a little object that has an attached image, an anchor\n     * point, a bounding box, and an optional hit box. This keeps pixel-level data about\n     * the image all in one place (by passing a Sprite around, we know what image to draw,\n     * what point in the image to rotate around, what areas of the image can get hit by\n     * things, and what areas can hit other things).\n     *\n     * Whether the bounding box or hitbox do anything isn't up to the Sprite, it would be\n     * up to the Frame that references it. (This is helpful because it's convenient for\n     * a simple game like this to have only one hit frame, but the animation may call\n     * for showing the sword swipe for 5-6 frames.)\n     */\n    class Sprite {\n      /**\n       * A small helper that draws a sprite onto a canvas, respecting the anchor point of\n       * the sprite. Note that the canvas should be PRE-TRANSLATED and PRE-ROTATED, if\n       * that's appropriate!\n       */\n      static drawSprite(ctx, sprite, u, v) {\n        ctx.drawImage(sprite.img, u - sprite.anchor.x, v - sprite.anchor.y);\n      }\n\n      static drawViewportSprite(viewport, sprite, spritePos, cameraPos) {\n        let { u, v } = this.viewportSprite2uv(viewport, sprite, spritePos, cameraPos);\n        viewport.ctx.drawImage(sprite.img, u, v);\n      }\n\n      static viewportSprite2uv(viewport, sprite, spritePos, cameraPos) {\n        return {\n          u: spritePos.x - sprite.anchor.x - cameraPos.x + viewport.center.u,\n          v: spritePos.y - sprite.anchor.y - cameraPos.y + viewport.center.v\n        };\n      }\n\n      /**\n       * Draw a sprite's bounding box, for debugging, using the same rules as drawSprite.\n       */\n      static drawBoundingBox(ctx, sprite, x, y) {\n        ctx.strokeStyle = 'rgba(0, 255, 0, 0.5)';\n        ctx.strokeRect(\n          x - sprite.anchor.x + sprite.bbox[0].x,\n          y - sprite.anchor.y + sprite.bbox[0].y,\n          sprite.bbox[1].x - sprite.bbox[0].x,\n          sprite.bbox[1].y - sprite.bbox[0].y\n        );\n      }\n\n      /**\n       * Draw a sprite's hit box, for debugging, using the same rules as drawSprite.\n       */\n      static drawHitBox(ctx, sprite, x, y) {\n        if (sprite.hbox) {\n          ctx.strokeStyle = 'rgba(255, 0, 0, 0.7)';\n          ctx.strokeRect(\n            x - sprite.anchor.x + sprite.hbox[0].x,\n            y - sprite.anchor.y + sprite.hbox[0].y,\n            sprite.hbox[1].x - sprite.hbox[0].x,\n            sprite.hbox[1].y - sprite.hbox[0].y\n          );\n        }\n      }\n\n      static getBoundingCircle(sprite, x, y) {\n        let dx = sprite.bbox[1].x - sprite.bbox[0].x;\n        let dy = sprite.bbox[1].y - sprite.bbox[0].y;\n        let r = (dx > dy ? dx : dy) / 2;\n        return {\n          x: x - sprite.anchor.x + (sprite.bbox[0].x + sprite.bbox[1].x) / 2,\n          y: y - sprite.anchor.y + (sprite.bbox[0].y + sprite.bbox[1].y) / 2,\n          r\n        };\n      }\n\n      static getBoundingBoxPolygon(sprite, x, y) {\n        return this.getSpriteBoxPolygon(sprite.anchor, sprite.bbox, x, y);\n      }\n\n      static getHitBoxPolygon(sprite, x, y) {\n        return this.getSpriteBoxPolygon(sprite.anchor, sprite.hbox, x, y);\n      }\n\n      static getSpriteBoxPolygon(anchor, box, x, y) {\n        return {\n          x: x,\n          y: y,\n          p: [\n            { x: box[0].x - anchor.x, y: box[0].y - anchor.y },\n            { x: box[1].x - anchor.x, y: box[0].y - anchor.y },\n            { x: box[1].x - anchor.x, y: box[1].y - anchor.y },\n            { x: box[0].x - anchor.x, y: box[1].y - anchor.y }\n          ]\n        };\n      }\n    }\n\n    /**\n     * The Assets module loads raw PNGs we'll use to draw the game, does any postprocessing stuff\n     * we might need to do, and then saves references to them for later.\n     */\n    class Assets {\n      static async init() {\n        this.images = {};\n        await this.loadImage(SPRITESHEET_URI);\n\n        // Base Pixel Font (see `Text.init` for additional manipulation)\n        Sprite.font = this.initBasicSprite(SpriteSheet.font[0]);\n\n        // Player\n        Sprite.player = this.initBasicSprite(SpriteSheet.player2[0]);\n\n        // Bullets\n        Sprite.bullet = this.initBasicSprite(SpriteSheet.bullet[0]);\n\n        // Enemy\n        Sprite.monster = this.initBasicSprite(SpriteSheet.monster2[0]);\n        Sprite.monster_dead = this.initBasicSprite(SpriteSheet.monster2[0]);\n\n        // GUI\n        Sprite.hud_shells_empty = this.initBasicSprite(SpriteSheet.hud_shells[0]);\n        Sprite.hud_shells_full = this.initBasicSprite(SpriteSheet.hud_shells[1]);\n        Sprite.hud_health_frame = this.initBasicSprite(SpriteSheet.hud_healthbar[0]);\n        Sprite.hud_health_fill = this.initBasicSprite(SpriteSheet.hud_healthbar[1]);\n        Sprite.hud_health_chunk = this.initBasicSprite(SpriteSheet.hud_healthbar[2]);\n        Sprite.hud_crosshair = this.initBasicSprite(SpriteSheet.hud_crosshair[0]);\n\n        Sprite.sawblade = this.initBasicSprite(SpriteSheet.sawblade[0]);\n        Sprite.sawblade_eyes = this.initBasicSprite(SpriteSheet.sawblade[1]);\n\n        // Pages\n        Sprite.page = await this.initBasicSprite(SpriteSheet.page[0]);\n\n        Sprite.battle_stream = SpriteSheet.battle_stream.map(data => this.initBasicSprite(data));\n        Sprite.battle_spray = SpriteSheet.walls2.slice(4, 7).map(data => this.initBasicSprite(data));\n        Sprite.battle_door = SpriteSheet.walls2.slice(1, 4).map(data => this.initBasicSprite(data));\n\n        // Tiles\n        Sprite.tiles = [];\n        Sprite.tiles[Constants.TILE_FLOOR1] = this.initBasicSprite(SpriteSheet.tileset[2]);\n        Sprite.tiles[Constants.TILE_WALL1] = this.initBasicSprite(SpriteSheet.tileset[0]);\n        Sprite.tiles[Constants.TILE_WALL2] = this.initBasicSprite(SpriteSheet.tileset[1]);\n\n        // Walls\n        Sprite.walls = this.initBasicSprite(SpriteSheet.walls2[0]);\n\n        Sprite.battle_bg = this.initDynamicSprite(this.createBattleBackground());\n      };\n\n      /**\n       * Initialize a sprite by loading it from a particular slice of the given image. Provides\n       * \"sensible\" defaults for bounding box and anchor point if not provided.\n       */\n      static initBasicSprite(data, opts) {\n        return this.initDynamicSprite(this.loadCacheSlice(SPRITESHEET_URI, data.x, data.y, data.w, data.h), opts);\n      }\n\n      static rotateImage(source, rad) {\n        let canvas = new Canvas(source.width, source.height);\n        canvas.ctx.translate(source.width / 2, source.height / 2);\n        canvas.ctx.rotate(rad);\n        canvas.ctx.translate(-source.width / 2, -source.height / 2);\n        canvas.ctx.drawImage(source, 0, 0);\n        return canvas.canvas;\n      }\n\n      static overlay(...sources) {\n        let canvas = new Canvas(sources[0].width, sources[0].height);\n        for (let source of sources) {\n          canvas.ctx.drawImage(source, 0, 0);\n        }\n        return canvas.canvas;\n      }\n\n      /**\n       * Initialize a sprite by passing it a pre-defined image source (probably generated dynamically).\n       * Provides \"sensible\" defaults for bounding box and anchor point if not provided.\n       */\n      static initDynamicSprite(source, opts) {\n        let w = source.width, h = source.height;\n\n        return {\n          img: source,\n          anchor: (opts && opts.anchor) || { x: Math.floor(w / 2), y: Math.floor(h / 2) },\n          bbox: (opts && opts.bbox) || [{x: 0, y: 0 }, { x: w, y: h }],\n          hbox: opts && opts.hbox\n        };\n      }\n\n      /**\n       * This helper method retrieves a cached image, cuts the specified slice out of it, and returns it.\n       */\n      static loadCacheSlice(uri, x, y, w, h) {\n        //const source = await this.loadImage(uri);\n        const source = this.images[uri];\n        const sliceCanvas = new Canvas(w, h);\n        sliceCanvas.ctx.drawImage(source, x, y, w, h, 0, 0, w, h);\n        return sliceCanvas.canvas;\n      }\n\n      /**\n       * Load the image from the given URI and cache it.\n       */\n      static async loadImage(uri) {\n        if (this.images[uri]) return this.images[uri];\n\n        return await new Promise((resolve, reject) => {\n          let image = new Image();\n          image.onload = () => resolve(image);\n          image.onerror = (err) => reject(err);\n          image.src = uri;\n          this.images[uri] = image;\n        });\n      }\n\n      static createBattleBackground() {\n        let canvas = new Canvas(500, 300);\n        let gradient = canvas.ctx.createLinearGradient(0, 0, 0, 270);\n        gradient.addColorStop(0, 'rgba(128,20,20,1)');\n        gradient.addColorStop(1, 'rgba(191,31,31,1)');\n        canvas.ctx.fillStyle = gradient;\n        canvas.ctx.fillRect(0, 0, 500, 300);\n        for (let i = 0; i < 500; i++) {\n          canvas.ctx.clearRect(i, 299 - Math.random() * 20, 3, 30);\n        }\n        return canvas.canvas;\n      }\n    }\n\n    // A few quick constants (0*, 45*, 90*)\n    const A00 = 0;\n    const A45 = 0.7071067811865475;\n    const A90 = 1;\n\n    /**\n     * KeyboardAdapter\n     *\n     * Maps keyboard inputs to game inputs.\n     */\n    class KeyboardAdapter {\n      constructor(handler) {\n        this.handler = handler;\n\n        // Key Mapping:      ACTION            // Key\n        this.map = [];\n        this.map[88] = Input.Action.ATTACK;    // [X]\n        this.map[90] = Input.Action.DEFLECT;   // [Z]\n        this.map[67] = Input.Action.DODGE;     // [C]\n        this.map[32] = Input.Action.SUPER;     // [SPACEBAR]\n        this.map[38] = Input.Action.UP;        // [UpArrow]\n        this.map[40] = Input.Action.DOWN;      // [DownArrow]\n        this.map[37] = Input.Action.LEFT;      // [LeftArrow]\n        this.map[39] = Input.Action.RIGHT;     // [RightArrow]\n        this.map[87] = Input.Action.UP;        // [W]\n        this.map[83] = Input.Action.DOWN;      // [S]\n        this.map[65] = Input.Action.LEFT;      // [A]\n        this.map[68] = Input.Action.RIGHT;     // [D]\n        this.map[27] = Input.Action.MENU;      // [ESC]\n        this.map[77] = Input.Action.MUTE;      // [M]\n        this.map[70] = Input.Action.FREEZE;    // [F]\n        this.map[80] = Input.Action.FREEZE;    // [P]\n\n        // For keyboard, we support 8-point movement (S, E, SE, etc.)\n        this.arrowDirections = [\n          { x:  A00, y:  A00, m: 0 },\n          { x:  A00, y: -A90, m: 1 },\n          { x:  A00, y:  A90, m: 1 },\n          { x:  A00, y:  A00, m: 0 },\n          { x: -A90, y:  A00, m: 1 },\n          { x: -A45, y: -A45, m: 1 },\n          { x: -A45, y:  A45, m: 1 },\n          { x: -A90, y:  A00, m: 1 },\n          { x:  A90, y:  A00, m: 1 },\n          { x:  A45, y: -A45, m: 1 },\n          { x:  A45, y:  A45, m: 1 },\n          { x:  A90, y:  A00, m: 1 },\n          { x:  A00, y:  A00, m: 0 },\n          { x:  A00, y: -A90, m: 1 },\n          { x:  A00, y:  A90, m: 1 },\n          { x:  A00, y:  A00, m: 0 }\n        ];\n\n        this.held = [];\n\n        this.reset();\n      }\n\n      async init() {\n        window.addEventListener('keydown', event => {\n          let k = this.map[event.keyCode];\n          console.log(event.keyCode);\n          if (k) {\n            this.held[k] = true;\n          }\n\n          // Hack - first key pressed in window will initialize the audio.\n          //game.audio.init();\n        });\n\n        window.addEventListener('keyup', event => {\n          let k = this.map[event.keyCode];\n          if (k) {\n            this.held[k] = false;\n          }\n        });\n      }\n\n      update() {\n        // For keyboards, we want to convert the state of the various arrow keys being held down\n        // into a directional vector. We use the browser's event to handle the held state of\n        // the other action buttons, so we don't need to process them here.\n        let state = (this.held[Input.Action.UP] ? 1 : 0) +\n                    (this.held[Input.Action.DOWN] ? 2 : 0) +\n                    (this.held[Input.Action.LEFT] ? 4 : 0) +\n                    (this.held[Input.Action.RIGHT] ? 8 : 0);\n\n        this.direction = this.arrowDirections[state];\n      }\n\n      reset() {\n        this.direction = this.arrowDirections[0];\n        for (let action of Object.values(Input.Action)) {\n          this.held[action] = false;\n        }\n      }\n    }\n\n    const GAME_WIDTH = 480;\n    const GAME_HEIGHT = 270;\n\n    /**\n    * Viewport\n    *\n    * Represents the game display (for us, a canvas).\n    */\n    class Viewport {\n      async init() {\n        this.canvas = document.getElementById('canvas');\n        this.ctx = this.canvas.getContext('2d');\n        this.resize(true);\n      }\n\n      // Resize the canvas to give us approximately our desired game display size.\n      //\n      // Rather than attempt to explain it, here's a concrete example:\n      //\n      //     we start with a desired game dimension:   480x270px\n      //          get the actual browser dimensions:  1309x468px\n      //          factor in the display's DPI ratio:  2618x936px\n      //         now calculate the horizontal scale:       5.45x\n      //                     and the vertical scale:       3.46x\n      //            our new offical game scaling is:        5.4x\n      //       and our official viewport dimensions:   484x173px\n      //\n      // This approach emphasizes correct aspect ratio and maintains full-window rendering, at\n      // the potential cost of limiting visibility of the game itself in either the X or Y axis.\n      // If you use this approach, make sure your GUI can \"float\" (otherwise there may be whole\n      // UI elements the player cannot see!).\n      resize(force) {\n        let dpi = window.devicePixelRatio;\n        let width = this.canvas.clientWidth;\n        let height = this.canvas.clientHeight;\n        let dpiWidth = width * dpi;\n        let dpiHeight = height * dpi;\n\n        if (force || this.canvas.width !== dpiWidth || this.canvas.height !== dpiHeight) {\n          this.canvas.width = dpiWidth;\n          this.canvas.height = dpiHeight;\n\n          this.scale = (Math.floor(Math.max(dpiWidth / GAME_WIDTH, dpiHeight / GAME_HEIGHT) * 10) / 10);\n          this.width = Math.ceil(this.canvas.width / this.scale);\n          this.height = Math.ceil(this.canvas.height / this.scale);\n          this.center = { u: Math.floor(this.width / 2), v: Math.floor(this.height / 2) };\n          this.clientWidth = width;\n          this.clientHeight = height;\n\n                // Note: smoothing flag gets reset on every resize by some browsers, which is why\n                // we do it here.\n                this.ctx.imageSmoothingEnabled = false;\n\n                viewport.canvas.style.cursor = 'none';\n            }\n        }\n    }\n\n    // Singleton\n    const viewport = new Viewport();\n\n    /**\n     * MouseAdapter\n     *\n     * Maps mouse inputs to game inputs.\n     */\n    class MouseAdapter {\n      constructor(handler) {\n        this.handler = handler;\n\n        // Key Mapping:      ACTION            // Input\n        this.map = [];\n        this.map[0]  = Input.Action.ATTACK;    // LMB\n        this.map[2]  = Input.Action.RELOAD;    // RMB\n\n        this.held = [];\n\n        this.reset();\n      }\n\n      async init() {\n        window.addEventListener('mousemove', event => {\n          if (!this.pointer) this.pointer = {};\n          //this.handlers['mousemove'](event.movementX, event.movementY, event.clientX, event.clientY);\n          this.pointer.u = Math.floor((event.clientX * viewport.width) / viewport.clientWidth);\n          this.pointer.v = Math.floor((event.clientY * viewport.height) / viewport.clientHeight);\n        });\n\n        window.addEventListener('mouseout', () => {\n          this.pointer = undefined;\n        });\n\n        window.addEventListener('mousedown', event => {\n          let k = this.map[event.button];\n          if (k) this.held[k] = true;\n        });\n\n        window.addEventListener('mouseup', event => {\n          let k = this.map[event.button];\n          if (k) this.held[k] = false;\n        });\n\n        window.addEventListener('click', event => {\n          event.preventDefault();\n        });\n\n        window.addEventListener('contextmenu', event => {\n          let k = this.map[event.button];\n          console.log(event.button);\n          if (k) this.held[k] = true;\n          this.releaseRMBTick = 2;\n          event.preventDefault();\n        });\n\n        return this;\n      }\n\n      update() {\n        // Hacks: ideally we could use mousedown and mouseup for all clicks and preventDefault to\n        // avoid opening the browser's context menu. This hasn't worked for me so far when clicking\n        // on a canvas, so I need to use the context menu event to capture a right mouse click instead.\n        //\n        // We fake a down/up for RMB clicks, which means we can't determine how long the RMB is held\n        // (but luckily we don't need to for this game).\n        if (this.releaseRMBTick) {\n          this.releaseRMBTick--;\n          if (this.releaseRMBTick === 0) {\n            this.held[Input.Action.RELOAD] = false;\n            console.log('released');\n          }\n        }\n      }\n\n      reset() {\n        this.pointer = undefined;\n        for (let action of Object.values(Input.Action)) {\n          this.held[action] = false;\n        }\n      }\n    }\n\n    //import { GamepadAdapter } from './GamepadAdapter';\n    //import { NormalVector } from './Geometry';\n\n    /**\n     * This is our abstract game input handler.\n     *\n     * Each frame, we'll collect input data from all of our supported input adapters,\n     * and turn it into game input. This game input can then be used by the game\n     * update for the frame.\n     *\n     * The input adapters give us data like \"key X pressed\", or \"right mouse button\n     * clicked\", or \"button B\" pressed, and these are translated into a game input\n     * like \"dodge\".\n     */\n    class Input {\n        async init() {\n            // A vector representing the direction the user is pressing/facing,\n            // separate from pressing and releasing inputs. Treating \"direction\"\n            // separately makes it easier to handle gamepad sticks.\n            this.direction = { x: 0, y: 0, m: 0 };\n\n            // \"Pressed\" means an input was pressed THIS FRAME.\n            this.pressed = {};\n\n            // \"Released\" means an input was released THIS FRAME.\n            this.released = {};\n\n            // \"Held\" means an input is held down. The input was \"Pressed\" either\n            // this frame or in a past frame, and has not been \"Released\" yet.\n            this.held = {};\n\n            // How many frames was this input held down by the player. If [held]\n            // is false, it represents how long the input was last held down.\n            this.framesHeld = {};\n\n            this.keyboard = new KeyboardAdapter(this);\n            await this.keyboard.init();\n\n            this.mouse = new MouseAdapter(this);\n            await this.mouse.init();\n\n            //this.gamepad = new GamepadAdapter(this);\n            //await this.gamepad.init();\n        }\n\n        update() {\n            // We could have some kind of \"input adapter toggle\", but it's easier to just treat all inputs\n            // as valid -- if you're pressing the \"attack\" button on either gamepad or keyboard, then you're\n            // attacking. For directional input, we instead check whether there's movement on the thumbstick,\n            // and we use it if there is -- otherwise we try to extract movement from the keyboard instead.\n\n            this.keyboard.update();\n            this.mouse.update();\n            //this.gamepad.update();\n\n            for (let action of Object.values(Input.Action)) {\n                let held = this.mouse.held[action] || this.keyboard.held[action];\n                //let held = this.gamepad.held[action] || this.keyboard.held[action];\n                this.pressed[action] = !this.held[action] && held;\n                this.released[action] = this.held[action] && !held;\n\n                if (this.pressed[action]) {\n                    this.framesHeld[action] = 1;\n                } else if (this.held[action] && held) {\n                    this.framesHeld[action]++;\n                }\n\n                this.held[action] = held;\n            }\n\n            this.pointer = this.mouse.pointer;\n\n            //this.direction = this.gamepad.direction.m > 0 ? this.gamepad.direction : this.keyboard.direction;\n            this.direction = this.keyboard.direction;\n        }\n\n        onDown(action) {\n        }\n\n        onUp(action) {\n        }\n    }\n\n    // Game Inputs\n    //\n    // Note that moving the player around is actually not considered an action; it's\n    // a separate non-action input called \"direction\". It just so happens that on\n    // keyboard, for example, pressing the \"down arrow\" key is considered both a\n    // press of the in-game DOWN action and a directional input. It's up to the input\n    // consumer to decide which input is relevant (if any). For example, on a menu,\n    // we may consume the DOWN/UP actions to navigate the menu, but ignore directional\n    // inputs.\n    //\n    Input.Action = {\n      UP:      11,\n      DOWN:    12,\n      LEFT:    13,\n      RIGHT:   14,\n      ATTACK:  21,\n      RELOAD:  30,\n      DEFLECT: 22,\n      DODGE:   23,\n      SUPER:   24,\n      MENU:    96,\n      MUTE:    97,\n      FREEZE:  98\n    };\n\n    /**\n     * Geometry\n     *\n     * A horrible grab bag of math-related nonsense.\n     */\n    const Geometry = {\n      RAD: (() => {\n        let radianTable = [];\n        for (let i = 0; i <= 360; i++) {\n          radianTable[i] = Math.PI * 2 * i / 360;\n        }\n        return radianTable;\n      })(),\n\n      normalizeVector(p) {\n        let m = Math.sqrt(p.x * p.x + p.y * p.y);\n        return (m === 0) ? { x: 0, y: 0, m: 0 } : { x: p.x / m, y: p.y / m, m };\n      },\n\n      vectorBetween(p1, p2) {\n        return Geometry.normalizeVector({ x: p2.x - p1.x, y: p2.y - p1.y });\n      },\n\n      angle2vector(r, m) {\n        return { x: Math.cos(r), y: Math.sin(r), m: m || 1 };\n      },\n\n      vector2angle(v) {\n        let angle = Math.atan2(v.y, v.x);\n        if (angle < 0) angle += Geometry.RAD[360];\n        return angle;\n      },\n\n      vector2point(v) {\n        return { x: v.x * (v.m || 1), y: v.y * (v.m || 1) };\n      },\n\n      dot(a, b) {\n        [a, b] = [Geometry.vector2point(a), Geometry.vector2point(b)];\n        return a.x * b.x + a.y * b.y;\n      },\n\n      // Takes a series of vectors and denormalizes them and adds them together, usually resulting\n      // in a point in space. Wrap in normalizeVector to get a normalized vector again, if desired.\n      vectorAdd(...vectors) {\n        let v = { x: 0, y: 0, m: 1 };\n        for (let vector of vectors) {\n          v.x += vector.x * (vector.m || 1);\n          v.y += vector.y * (vector.m || 1);\n        }\n        return v;\n      },\n\n      closestAngleDifference(a, b) {\n        if (a > b) [a, b] = [b, a];\n        return Math.min(b - a, Constants.R360 + a - b);\n      },\n\n      intermediateAngle(a, b, m) {\n        if (b > Constants.R270 && a <= Constants.R90) a += Constants.R360;\n        if (a > Constants.R270 && b <= Constants.R90) b += Constants.R360;\n        let angle = (b - a) * m + a;\n        return (angle + Constants.R360) % Constants.R360;\n      },\n\n      angleBetween(angle, min, max) {\n        if (min > max) [min, max] = [max, min];\n        while (angle >= max + Geometry.RAD[360]) angle -= Geometry.RAD[360];\n        while (angle <= min - Geometry.RAD[360]) angle += Geometry.RAD[360];\n        return (angle >= min && angle < max);\n      },\n\n      arcOverlap(angleA1, angleA2, angleB1, angleB2) {\n        if (angleA1 > angleA2) [angleA1, angleA2] = [angleA2, angleA1];\n        if (angleB1 > angleB2) [angleB1, angleB2] = [angleB2, angleB1];\n\n        while (angleB2 >= angleA2 + Geometry.RAD[360]) {\n          angleB2 -= Geometry.RAD[360];\n          angleB1 -= Geometry.RAD[360];\n        }\n        while (angleB1 <= angleA1 - Geometry.RAD[360]) {\n          angleB1 += Geometry.RAD[360];\n          angleB2 += Geometry.RAD[360];\n        }\n\n        const result = [Math.max(angleA1, angleB1), Math.min(angleA2, angleB2)];\n        return result[0] > result[1] ? undefined : result;\n      },\n\n      xy2qr(pos) {\n        return { q: (pos.x / Constants.TILE_WIDTH) | 0, r: (pos.y / Constants.TILE_HEIGHT) | 0 };\n      },\n\n      qr2xy(pos) {\n        return { x: pos.q * Constants.TILE_WIDTH, y: pos.r * Constants.TILE_HEIGHT };\n      },\n\n      xy2uv(pos) {\n        return {\n          u: pos.x + viewport.center.u - game.camera.pos.x,\n          v: pos.y + viewport.center.v - game.camera.pos.y\n        };\n      },\n\n      clamp(value, min, max) {\n        return value < min ? min : (value > max ? max : value);\n      },\n\n      // The parameters to this function are (Q, Q) or (R, R) - i.e. horizontal or\n      // vertical coordinates in tile space.\n      calculateRayIntersectionAndStep(startPos, endPos) {\n        let next, step, diff = endPos - startPos;\n\n        if (diff === 0) {\n            step = NaN;\n            next = +Infinity;\n        } else if (diff > 0) {\n            step = 1 / diff;\n            next = (1 - (startPos - Math.floor(startPos))) * step;\n        } else {\n            step = -1 / diff;\n            next = (startPos - Math.floor(startPos)) * step;\n        }\n\n        return { next, step };\n      },\n\n      // https://www.genericgamedev.com/general/shooting-rays-through-tilemaps/\n      *tilesHitBetween(p1, p2) {\n        let startQ = p1.x / Constants.TILE_WIDTH, startR = p1.y / Constants.TILE_HEIGHT;\n        let endQ = p2.x / Constants.TILE_WIDTH, endR = p2.y / Constants.TILE_HEIGHT;\n        let tileCount = Math.abs(Math.floor(startQ) - Math.floor(endQ)) + Math.abs(Math.floor(startR) - Math.floor(endR));\n\n        yield { q: startQ | 0, r: startR | 0, m: 0 };\n\n        // If there's only 1 or 2 hit tiles, we don't need the math to compute the middle.\n        if (tileCount > 1) {\n          let q = startQ, r = startR, m = 0;\n          let stepQ = Math.sign(endQ - startQ);\n          let stepR = Math.sign(endR - startR);\n          let intersectionQ = Geometry.calculateRayIntersectionAndStep(startQ, endQ);\n          let intersectionR = Geometry.calculateRayIntersectionAndStep(startR, endR);\n\n          for (let i = 0; i < tileCount - 1; i++) {\n            if (intersectionQ.next < intersectionR.next) {\n              q += stepQ;\n              m += stepQ;\n              intersectionQ.next += intersectionQ.step;\n            } else {\n              r += stepR;\n              m += stepR;\n              intersectionR.next += intersectionR.step;\n            }\n            yield { q: q | 0, r: r | 0, m };\n          }\n        }\n\n        if (tileCount > 0) {\n          yield { q: endQ | 0, r: endR | 0, m: 1 };\n        }\n      },\n\n      *tilesHitBy(p, v) {\n        yield *Geometry.tilesHitBetween(p, Geometry.vectorAdd(p, v));\n      },\n\n      /**\n       * @param {XY[]} bounds  the upper-left and lower-right bounds\n       * @yields {QR}\n       */\n      *tilesHitInBounds(bounds) {\n        for (let r = Math.floor(bounds[0].y / Constants.TILE_HEIGHT); r * Constants.TILE_HEIGHT < bounds[1].y; r++) {\n          for (let q = Math.floor(bounds[0].x / Constants.TILE_WIDTH); q * Constants.TILE_WIDTH < bounds[1].x; q++) {\n            yield { q, r };\n          }\n        }\n      },\n\n      /**\n       * @param {XY} p1  the starting position\n       * @param {XY} p2  the ending position\n       * @param {number} r  the radius of the moving circle\n       * @yields {QR}\n       */\n      *tilesHitBetweenCircle(p1, p2, r) {\n        let bounds = [\n          { x: Math.min(p1.x, p2.x) - r, y: Math.min(p1.y, p2.y) - r },\n          { x: Math.max(p1.x, p2.x) + r, y: Math.max(p1.y, p2.y) + r }\n        ];\n        yield *Geometry.tilesHitInBounds(bounds);\n      },\n\n      /**\n       * @param {XY} p  the starting position\n       * @param {XY} v  the velocity (movement)\n       * @param {number} r  the radius of the moving circle\n       * @yields {QR}\n       */\n      *tilesHitByCircle(p, v, r) {\n        yield *Geometry.tilesHitBetweenCircle(p, { x: p.x + v.x, y: p.y + v.y }, r);\n      },\n\n      // https://stackoverflow.com/a/18790389/80630\n      intersectCircleRectangle(p1, p2, r, bounds) {\n        // If the bounding box around the start and end points (+radius on all\n        // sides) does not intersect with the rectangle, definitely not an\n        // intersection\n        if (Math.max(p1.x, p2.x) + r < bounds[0].x ||\n            Math.min(p1.x, p2.x) - r > bounds[1].x ||\n            Math.max(p1.y, p2.y) + r < bounds[0].y ||\n            Math.min(p1.y, p2.y) - r > bounds[1].y)\n          return;\n\n        let dx = p2.x - p1.x;\n        let dy = p2.y - p1.y;\n        let invdx = (dx === 0 ? 0 : 1 / dx);\n        let invdy = (dy === 0 ? 0 : 1 / dy);\n        let cornerX = Infinity;\n        let cornerY = Infinity;\n\n        // Check each side of the rectangle for a single-side intersection\n        // Left Side\n        if (p1.x - r < bounds[0].x && p2.x + r > bounds[0].x) {\n          let ltime = ((bounds[0].x - r) - p1.x) * invdx;\n          if (ltime >= 0 && ltime <= 1) {\n            let ly = dy * ltime + p1.y;\n            if (ly >= bounds[0].y && ly <= bounds[1].y) {\n              return { x: dx * ltime + p1.x, y: ly, t: ltime, nx: -1, ny: 0, ix: bounds[0].x, iy: ly };\n            }\n          }\n          cornerX = bounds[0].x;\n        }\n        // Right Side\n        if (p1.x + r > bounds[1].x && p2.x - r < bounds[1].x) {\n          let rtime = (p1.x - (bounds[1].x + r)) * -invdx;\n          if (rtime >= 0 && rtime <= 1) {\n            let ry = dy * rtime + p2.y;\n            if (ry >= bounds[0].y && ry <= bounds[1].y) {\n              return { x: dx * rtime + p1.x, y: ry, t: rtime, nx: 1, ny: 0, ix: bounds[1].x, iy: ry };\n            }\n          }\n          cornerX = bounds[1].x;\n        }\n        // Top Side\n        if (p1.y - r < bounds[0].y && p2.y + r > bounds[0].y) {\n          let ttime = ((bounds[0].y - r) - p1.y) * invdy;\n          if (ttime >= 0 && ttime <= 1) {\n            let tx = dx * ttime + p1.x;\n            if (tx >= bounds[0].x && tx <= bounds[1].x) {\n              return { x: tx, y: dy * ttime + p1.y, t: ttime, nx: 0, ny: -1, ix: tx, iy: bounds[0].y };\n            }\n          }\n          cornerY = bounds[0].y;\n        }\n        // Bottom Side\n        if (p1.y + r > bounds[1].y && p2.y - r < bounds[1].y) {\n          let btime = (p1.y - (bounds[1].y + r)) * -invdy;\n          if (btime >= 0 && btime <= 1) {\n            let bx = dx * btime + p1.x;\n            if (bx >= bounds[0].x && bx <= bounds[1].x) {\n              return { x: bx, y: dy * btime + p1.y, t: btime, nx: 0, ny: 1, ix: bx, iy: bounds[0].y };\n            }\n          }\n          cornerY = bounds[1].y;\n        }\n\n        // If we haven't touched anything, there is no collision\n        if (cornerX === Infinity && cornerY === Infinity) return;\n\n        // We didn't pass through a side but may be hitting the corner\n        if (cornerX !== Infinity && cornerY === Infinity) {\n          cornerY = dy > 0 ? bounds[1].y : bounds[0].y;\n        }\n        if (cornerY !== Infinity && cornerX === Infinity) {\n          cornerX = dx > 0 ? bounds[1].x : bounds[0].x;\n        }\n\n        /* Solve the triangle between the start, corner, and intersection point.\n         *\n         *           +-----------T-----------+\n         *           |                       |\n         *          L|                       |R\n         *           |                       |\n         *           C-----------B-----------+\n         *          / \\\n         *         /   \\r     _.-E\n         *        /     \\ _.-'\n         *       /    _.-I\n         *      / _.-'\n         *     S-'\n         *\n         * S = start of circle's path\n         * E = end of circle's path\n         * LTRB = sides of the rectangle\n         * I = {ix, iY} = point at which the circle intersects with the rectangle\n         * C = corner of intersection (and collision point)\n         * C=>I (r) = {nx, ny} = radius and intersection normal\n         * S=>C = cornerdist\n         * S=>I = intersectionDistance\n         * S=>E = lineLength\n         * <S = innerAngle\n         * <I = angle1\n         * <C = angle2\n         */\n        let inverseRadius = 1 / r;\n        let lineLength = Math.sqrt(dx * dx + dy * dy);\n        let cornerdx = cornerX - p1.x;\n        let cornerdy = cornerY - p1.y;\n        let cornerDistance = Math.sqrt(cornerdx * cornerdx + cornerdy * cornerdy);\n        let innerAngle = Math.acos((cornerdx * dx + cornerdy * dy) / (lineLength * cornerDistance));\n\n        // If the circle is too close, no intersection\n        if (cornerDistance < r) return;\n\n        // If inner angle is zero, it's going to hit the corner straight on.\n        if (innerAngle === 0) {\n          let time = (cornerDistance - r) / lineLength;\n\n            // Ignore if time is outside boundaries of (p1, p2)\n            if (time > 1 || time < 0) return;\n\n            let ix = time * dx + p1.x;\n            let iy = time * dy + p1.y;\n            let nx = cornerdx / cornerDistance;\n            let ny = cornerdy / cornerDistance;\n\n            return isNaN(ix) ? undefined : { x: ix, y: iy, t: time, nx, ny, ix: cornerX, iy: cornerY };\n        }\n\n        let innerAngleSin = Math.sin(innerAngle);\n        let angle1Sin = innerAngleSin * cornerDistance * inverseRadius;\n\n        // If the angle is too large, there is no collision\n        if (Math.abs(angle1Sin) > 1) return;\n\n        let angle1 = Math.PI - Math.asin(angle1Sin);\n        let angle2 = Math.PI - innerAngle - angle1;\n        let intersectionDistance = r * Math.sin(angle2) / innerAngleSin;\n        let time = intersectionDistance / lineLength;\n\n        // Ignore if time is outside boundaries of (p1, p2)\n        if (time > 1 || time < 0) return;\n\n        let ix = time * dx + p1.x;\n        let iy = time * dy + p2.y;\n        let nx = (ix - cornerX) * inverseRadius;\n        let ny = (iy - cornerY) * inverseRadius;\n\n        return isNaN(ix) ? undefined : { x: ix, y: iy, t: time, nx, ny, ix: cornerX, iy: cornerY };\n      },\n\n      // https://stackoverflow.com/questions/18683179/how-to-fix-circles-overlap-in-collision-response\n      //\n      // This is an incredibly simple implementation that ASSUMES very small velocities. It doesn't attempt\n      // to answer the question about \"when\" the intersection happened like the method above - may\n      // fix that in future.\n      intersectCircleCircle2(p1, r1, v1, p2, r2, v2) {\n        [v1, v2] = [Geometry.vector2point(v1), Geometry.vector2point(v2)];\n        let a1 = { x: p1.x + v1.x, y: p1.y + v1.y };\n        let a2 = { x: p2.x + v2.x, y: p2.y + v2.y };\n        let delta = Geometry.vectorBetween(a1, a2);\n        if (delta.m < r1 + r2) {\n          return { nx: delta.x, ny: delta.y, m: r1 + r2 - delta.m };\n        }\n      },\n\n      flood(maze, pos, maxDistance = Infinity) {\n        let result = Geometry.array2d(maze[0].length, maze.length, Infinity);\n        let stack = [{ ...pos, cost: 0 }];\n        while (stack.length > 0) {\n          let { q, r, cost } = stack.shift();\n          if (result[r][q] <= cost) continue;\n          result[r][q] = cost++;\n          if (result[r][q] >= maxDistance) continue;\n          if (maze[r][q + 1] && result[r][q + 1] > cost) stack.push({ q: q + 1, r, cost });\n          if (maze[r][q - 1] && result[r][q - 1] > cost) stack.push({ q: q - 1, r, cost });\n          if (maze[r + 1][q] && result[r + 1][q] > cost) stack.push({ q, r: r + 1, cost });\n          if (maze[r - 1][q] && result[r - 1][q] > cost) stack.push({ q, r: r - 1, cost });\n        }\n        return result;\n      },\n\n      array2d(width, height, value) {\n        let fn = typeof value === 'function' ? value : () => value;\n        return Array.from({ length: height }, () => Array.from({ length: width }, fn));\n      },\n\n      tileIsPassable(q, r) {\n        if (game.activeBattle) {\n          let room = game.activeBattle.room;\n          if (q < room.q || r < room.r || q >= room.q + room.w || r >= room.r + room.h) return false;\n        }\n        return !!game.maze.maze[r][q];\n      }\n    };\n\n    /**\n     * This module is generated by `gulp refreshAssets`.\n     */\n    const Map =\n    /* <generated> */\n    { w: 34,\n      h: 24,\n      rooms:\n       [ [ 5, 1, 5, 3, 3 ],\n         [ 15, 3, 6, 4, 4 ],\n         [ 8, 5, 4, 5, 5 ],\n         [ 28, 7, 3, 3, 6 ],\n         [ 20, 8, 4, 6, 7 ],\n         [ 30, 11, 3, 3, 8 ],\n         [ 10, 12, 5, 6, 9 ],\n         [ 4, 13, 1, 1, 1 ],\n         [ 29, 15, 3, 3, 10 ],\n         [ 16, 19, 4, 4, 11 ],\n         [ 28, 19, 3, 3, 12 ] ],\n      tunnels:\n       [ 40,\n         1,\n         1,\n         1,\n         30,\n         1,\n         1,\n         1,\n         1,\n         30,\n         1,\n         1,\n         1,\n         1,\n         7,\n         1,\n         1,\n         1,\n         1,\n         19,\n         4,\n         6,\n         1,\n         1,\n         1,\n         1,\n         1,\n         1,\n         1,\n         17,\n         4,\n         1,\n         1,\n         4,\n         1,\n         1,\n         1,\n         1,\n         1,\n         2,\n         17,\n         3,\n         1,\n         1,\n         1,\n         2,\n         1,\n         1,\n         1,\n         1,\n         1,\n         1,\n         1,\n         2,\n         16,\n         1,\n         1,\n         1,\n         1,\n         1,\n         1,\n         1,\n         2,\n         3,\n         6,\n         7,\n         1,\n         8,\n         2,\n         2,\n         1,\n         1,\n         1,\n         1,\n         1,\n         1,\n         2,\n         1,\n         1,\n         3,\n         1,\n         1,\n         3,\n         2,\n         1,\n         1,\n         8,\n         4,\n         1,\n         1,\n         1,\n         2,\n         5,\n         2,\n         1,\n         1,\n         1,\n         2,\n         1,\n         1,\n         1,\n         1,\n         1,\n         7,\n         1,\n         1,\n         8,\n         1,\n         1,\n         1,\n         2,\n         2,\n         1,\n         1,\n         1,\n         2,\n         5,\n         6,\n         1,\n         1,\n         1,\n         1,\n         7,\n         3,\n         2,\n         2,\n         1,\n         1,\n         1,\n         2,\n         1,\n         1,\n         4,\n         1,\n         3,\n         1,\n         1,\n         1,\n         1,\n         1,\n         1,\n         4,\n         1,\n         1,\n         1,\n         2,\n         2,\n         1,\n         1,\n         1,\n         1,\n         1,\n         4,\n         3,\n         1,\n         1,\n         3,\n         1,\n         1,\n         2,\n         1,\n         1,\n         1,\n         1,\n         1,\n         1,\n         1,\n         1,\n         1,\n         2,\n         2,\n         2,\n         1,\n         1,\n         1,\n         3,\n         1,\n         3,\n         1,\n         1,\n         3,\n         1,\n         1,\n         1,\n         1,\n         1,\n         1,\n         3,\n         1,\n         1,\n         1,\n         1,\n         4,\n         5,\n         2,\n         1,\n         5,\n         5,\n         1,\n         1,\n         1,\n         1,\n         4,\n         1,\n         1,\n         1,\n         1,\n         1,\n         1,\n         1,\n         1,\n         1,\n         2,\n         1,\n         1,\n         2,\n         5,\n         1,\n         6,\n         1,\n         1,\n         5,\n         1,\n         1,\n         1,\n         1,\n         3,\n         2,\n         2,\n         4,\n         4,\n         1,\n         1,\n         13,\n         1,\n         1,\n         1,\n         1,\n         3,\n         1,\n         1,\n         2,\n         2,\n         1,\n         1,\n         4,\n         1,\n         1,\n         21,\n         3,\n         1,\n         1,\n         2,\n         5,\n         21,\n         1,\n         1,\n         2,\n         2,\n         1,\n         1,\n         4,\n         1,\n         20,\n         1,\n         1,\n         1,\n         6,\n         3,\n         1,\n         1,\n         20,\n         1,\n         1,\n         1,\n         1,\n         1,\n         1,\n         1,\n         1,\n         1,\n         3,\n         1,\n         1,\n         20,\n         1,\n         1,\n         1 ] }\n    /* </generated> */\n    ;\n\n    // Maze Generator - TODO\n    //\n    //\n    const MapLoader = {\n        createRoomLookup(rooms) {\n            return rooms.reduce((hash, room) => {\n                hash[room.roomNumber] = room;\n                return hash;\n            }, {});\n        },\n\n        createWalls(maze, rooms) {\n            let walls = Geometry.array2d(maze[0].length, maze.length, 0);\n            console.log(maze[0].length, maze.length, \"fook\");\n            for (let r = 0; r < walls.length; r++) {\n                for (let q = 0; q < walls[0].length; q++) {\n                    if (maze[r][q]) {\n                        let room = rooms[maze[r][q]];\n\n                        console.log(maze[18][5]);\n\n                        console.log(r,q,room,maze[r+1]);\n                        console.log(walls[r]);\n                        console.log(maze[r-1][q]);\n                        console.log(maze[r+1][q]);\n                        console.log(maze[r][q -1]);\n                        console.log(maze[r][q +1]);\n                        walls[r][q] = (maze[r - 1][q] ? 0 : Constants.WALL_TOP) |\n                                      (maze[r][q + 1] ? 0 : Constants.WALL_RIGHT) |\n                                      (maze[r + 1][q] ? 0 : Constants.WALL_BOTTOM) |\n                                      (maze[r][q - 1] ? 0 : Constants.WALL_LEFT);\n\n                        if (room) {\n                            walls[r][q] |= (maze[r - 1][q] && r === room.r ? Constants.OPEN_TOP : 0) |\n                                           (maze[r][q + 1] && q === room.q + room.width - 1 ? Constants.OPEN_RIGHT : 0) |\n                                           (maze[r + 1][q] && r === room.r + room.height - 1 ? Constants.OPEN_BOTTOM : 0) |\n                                           (maze[r][q - 1] && q === room.q ? Constants.OPEN_LEFT : 0);\n                        }\n                    }\n                }\n            }\n            return walls;\n        },\n\n        createTiles(maze, rand) {\n            let tiles = Geometry.array2d(maze[0].length, maze.length, () => {\n                return (rand() < 0.1 ? Constants.TILE_WALL2 : Constants.TILE_WALL1);\n            });\n            for (let r = 0; r < tiles.length; r++) {\n                for (let q = 0; q < tiles[0].length; q++) {\n                    if (maze[r][q]) {\n                        tiles[r][q] = Constants.TILE_FLOOR1;\n                    }\n                }\n            }\n            return tiles;\n        },\n\n        load() {\n            let maze = Geometry.array2d(Map.w, Map.h, 0);\n            let rooms = Map.rooms.map(room => ({\n                q: room[0], r: room[1], w: room[2], h: room[3], roomNumber: room[4]\n            }));\n\n            let ptr = 0;\n            for (let next of Map.tunnels) {\n                ptr += next;\n                maze[(ptr / Map.w) | 0][ptr % Map.w] = 2;\n            }\n\n            for (let room of rooms) {\n                for (let r = 0; r < room.h; r++) {\n                    for (let q = 0; q < room.w; q++) {\n                        maze[room.r + r][room.q + q] = room.roomNumber;\n                    }\n                }\n            }\n\n            let roomLookup = this.createRoomLookup(rooms);\n\n            return {\n                maze,\n                walls: this.createWalls(maze, roomLookup),\n                tiles: this.createTiles(maze, Math.random),\n                rooms: roomLookup\n            };\n        }\n    };\n\n    const C_WIDTH = 3;\n    const C_HEIGHT = 5;\n\n    // Very simple variable-width font implementation. The characters in the font strip\n    // are left-aligned in their 3x5 pixel boxes, so in order to have variable width,\n    // we just need to note the characters that AREN'T full width. Anything not in\n    // this list has full shift (3+1 = 4 pixels).\n    const C_SHIFT = {\n        32: 3,          // Space\n        44: 3,          // Comma\n        46: 3,          // Period\n        73: 2           // I\n    };\n\n    /**\n     * Text\n     *\n     * Utilities for drawing text using in-game pixel font.\n     */\n    const Text = {\n        async init() {\n            this.default = Sprite.font.img;\n            this.fire = this.recolor(this.default, ctx => {\n                let gradient = ctx.createLinearGradient(0, 0, 0, this.default.height);\n                gradient.addColorStop(0, 'rgba(240,134,51,1)');\n                gradient.addColorStop(1, 'rgba(250,220,74,1)');\n                return gradient;\n            });\n            this.shadow = this.recolor(this.default, 'rgba(240, 240, 255, 0.25)');\n        },\n\n        drawText(ctx, text, u, v, font = this.default, scale = 1) {\n            text = text.toUpperCase();\n            for (let idx = 0; idx < text.length; idx++) {\n                let c = text.charCodeAt(idx);\n                ctx.drawImage(\n                    font,\n                    (c - 32) * (C_WIDTH + 1), 0, C_WIDTH, C_HEIGHT,\n                    u, v, C_WIDTH * scale, C_HEIGHT * scale\n                );\n                u += (C_SHIFT[c] || (C_WIDTH + 1)) * scale;\n            }\n        },\n\n        drawRightText(ctx, text, u, v, font = this.default, scale = 1) {\n            text = text.toUpperCase();\n            u -= this.measureWidth(text, scale);\n            this.drawText(ctx, text, u, v, font, scale);\n        },\n\n        drawParagraph(ctx, text, u, v, w, h, font = this.default, scale = 1) {\n            let cu = u, cv = v, phrases = text.toUpperCase().split(' ');\n\n            for (let phrase of phrases) {\n                let phraseWidth = this.measureWidth(phrase, scale);\n                if (cu + phraseWidth - u > w) {\n                    cu = u;\n                    cv += (C_HEIGHT + 2) * scale;\n                }\n                this.drawText(ctx, phrase, cu, cv, font, scale);\n                cu += phraseWidth + (C_SHIFT[32] );\n            }\n        },\n\n        measureWidth(text, scale) {\n            return text.split('').reduce((sum, c) => sum + (C_SHIFT[c.charCodeAt(0)] || 4), 0) * scale;\n        },\n\n        recolor(font, color) {\n            let canvas = new Canvas(font.width, font.height);\n            canvas.ctx.fillStyle = typeof color === \"function\" ? color(canvas.ctx) : color;\n            canvas.ctx.fillRect(0, 0, font.width, font.height);\n            console.log(font.width, font.height, color, canvas);\n            canvas.ctx.globalCompositeOperation = 'destination-in';\n            canvas.ctx.drawImage(font, 0, 0);\n            return canvas.canvas;\n        },\n    };\n\n    /**\n     * Detection\n     */\n    const Detection = {\n      lineOfSight(a, b) {\n          // todo: this checks center mass\n          for (let tile of Geometry.tilesHitBetween(a.pos, b.pos)) {\n            if (!Geometry.tileIsPassable(tile.q, tile.r)) return false;\n          }\n\n          // todo: distance away\n          // todo: facing check\n          return true;\n      }\n    };\n\n    /**\n     * Behavior\n     */\n    const Behavior = {\n      IDLE:   101,\n      WANDER: 102,\n      CHASE:  103,\n      HUNT:   104,\n      FLEE:   105,\n      DEAD:   106,\n\n      ATTACK: 201,\n      RELOAD: 202,\n\n      apply(entities) {\n        for (let entity of entities) {\n          if (entity.think) entity.think();\n        }\n      }\n    };\n\n    /**\n     * Monster\n     */\n    class Monster {\n      constructor() {\n        this.pos = { x: 0, y: 0 };\n        this.vel = { x: 0, y: 0 };\n        this.facing = { x: 0, y: -1, m: 0 };\n        this.hp = 100;\n        this.damage = [];\n        this.radius = 11;\n\n        this.mass = 0.5;\n      }\n\n      think() {\n        switch (this.state) {\n          case Behavior.IDLE:\n            if (Detection.lineOfSight(this, game.player)) {\n              this.state = Behavior.CHASE;\n            }\n            break;\n          case Behavior.CHASE:\n            let diff = Geometry.vectorBetween(this.pos, game.player.pos);\n            diff.m = Geometry.clamp(diff.m, 0, 1);\n            this.vel = { x: diff.x * diff.m, y: diff.y * diff.m };\n            break;\n          case Behavior.DEAD:\n            this.vel = { x: 0, y: 0, m: 0 };\n            if (!this.cullt) this.cullt = 15;\n            this.cullt--;\n            if (this.cullt < 1) this.cull = true;\n            break;\n          default:\n            this.state = Behavior.IDLE;\n            break;\n        }\n      }\n\n      draw(viewport) {\n        // TODO\n        if (this.state === Behavior.DEAD) {\n          Sprite.drawViewportSprite(viewport, Sprite.monster_dead, this.pos, game.camera.pos);\n        } else {\n          Sprite.drawViewportSprite(viewport, Sprite.monster, this.pos, game.camera.pos);\n        }\n      }\n    }\n\n    class ShotgunBlast {\n      constructor(pos, angle) {\n        this.pos = { ...pos };\n        this.angle = angle;\n        this.spread = Geometry.RAD[70];\n        this.range = 55;\n      }\n\n      think() {\n        this.t = (this.t || 0) + 1;\n\n        if (this.t === 3) {\n          let entities = game.entities.filter(entity => entity.hp && !(entity instanceof Player));\n          for (let entity of entities) {\n            let vect = Geometry.vectorBetween(this.pos, entity.pos);\n            if (vect.m >= this.range + entity.radius) continue;\n\n            let dot1 = Geometry.vectorBetween(\n              this.pos,\n              { x: entity.pos.x - vect.y * entity.radius, y: entity.pos.y + vect.x * entity.radius }\n            );\n            let dot2 = Geometry.vectorBetween(\n              this.pos,\n              { x: entity.pos.x + vect.y * entity.radius, y: entity.pos.y - vect.x * entity.radius }\n            );\n            let sides = [Geometry.vector2angle(dot1), Geometry.vector2angle(dot2)];\n            let overlap = Geometry.arcOverlap(sides[0], sides[1], this.angle - this.spread / 2, this.angle + this.spread / 2);\n            if (!overlap) continue;\n\n            let wallHit = [];\n            let k = Geometry.vectorAdd(this.pos, Geometry.angle2vector(sides[0], vect.m));\n            for (let tile of Geometry.tilesHitBy(this.pos, Geometry.angle2vector(sides[0], vect.m))) {\n              if (!Geometry.tileIsPassable(tile.q, tile.r)) {\n                wallHit.push(tile);\n                break;\n              }\n            }\n            for (let tile of Geometry.tilesHitBy(this.pos, Geometry.angle2vector(sides[1], vect.m))) {\n              if (!Geometry.tileIsPassable(tile.q, tile.r)) {\n                wallHit.push(tile);\n                break;\n              }\n            }\n\n            if (wallHit.length < 2) {\n              // hit\n              entity.damage.push({ amount: 100, vector: vect, knockback: 9 });\n            }\n          }\n        }\n\n        if (this.t > 6) this.cull = true;\n      }\n\n      draw(viewport) {\n        // TODO\n        //Sprite.drawViewportSprite(viewport, Sprite.monster, this.pos, game.camera.pos);\n        let uv = Geometry.xy2uv(this.pos);\n        viewport.ctx.beginPath();\n        viewport.ctx.arc(uv.u, uv.v, this.range, this.angle - this.spread / 2, this.angle + this.spread / 2);\n        viewport.ctx.lineTo(uv.u, uv.v);\n        viewport.ctx.closePath();\n        viewport.ctx.fillStyle = 'rgba(255, 0, 0, 0.5)';\n        viewport.ctx.fill();\n      }\n    }\n\n    class ReloadAnimation {\n      constructor(frames) {\n        this.t = -1;\n        this.d = frames;\n        this.z = 101;\n      }\n\n      think() {\n        if (++this.t === this.d) this.cull = true;\n      }\n\n      draw(viewport) {\n        for (let i = 0; i < game.player.shellsMax; i++) {\n          let end = i * this.d / game.player.shellsMax;\n          let start = end - 3;\n\n          if (this.t >= start) {\n            let y = Math.min(10, 10 + this.t - end);\n            viewport.ctx.globalAlpha = Math.min(1, 1 + (this.t - end) / 10);\n            viewport.ctx.drawImage(Sprite.hud_shells_full.img, 15 + 6 * i, y);\n            viewport.ctx.globalAlpha = 1;\n          }\n        }\n      }\n    }\n\n    // zzfxP() - the sound player -- returns a AudioBufferSourceNode\n    const zzfxP=(...t)=>{let e=zzfxX.createBufferSource(),f=zzfxX.createBuffer(t.length,t[0].length,zzfxR);t.map((d,i)=>f.getChannelData(i).set(d)),e.buffer=f,e.connect(zzfxX.destination),e.start();return e};\n\n    // zzfxG() - the sound generator -- returns an array of sample data\n    const zzfxG=(a=1,t=.05,h=220,M=0,n=0,s=.1,i=0,r=1,o=0,z=0,e=0,f=0,m=0,x=0,b=0,d=0,u=0,c=1,G=0,I=zzfxR,P=99+M*I,V=n*I,g=s*I,j=G*I,k=u*I,l=2*Math.PI,p=(a=>0<a?1:-1),q=P+j+V+g+k,v=(o*=500*l/I**2),w=(h*=(1+2*t*Math.random()-t)*l/I),y=p(b)*l/4,A=0,B=0,C=0,D=0,E=0,F=0,H=1,J=[])=>{for(;C<q;J[C++]=F)++E>100*d&&(E=0,F=A*h*Math.sin(B*b*l/I-y),F=p(F=i?1<i?2<i?3<i?Math.sin((F%l)**3):Math.max(Math.min(Math.tan(F),1),-1):1-(2*F/l%2+2)%2:1-4*Math.abs(Math.round(F/l)-F/l):Math.sin(F))*Math.abs(F)**r*a*zzfxV*(C<P?C/P:C<P+j?1-(C-P)/j*(1-c):C<P+j+V?c:C<q-k?(q-C-k)/g*c:0),F=k?F/2+(k>C?0:(C<q-k?1:(C-q)/k)*J[C-k|0]/2):F),A+=1-x+1e9*(Math.sin(C)+1)%2*x,B+=1-x+1e9*(Math.sin(C)**2+1)%2*x,h+=o+=500*z*l/I**3,H&&++H>f*I&&(h+=e*l/I,w+=e*l/I,H=0),m&&++D>m*I&&(h=w,o=v,D=1,H=H||1);return J};\n\n    // zzfxV - global volume\n    const zzfxV=.3;\n\n    // zzfxR - global sample rate\n    const zzfxR=44100;\n\n    // zzfxX - the common audio context\n    const zzfxX=new(top.AudioContext||webkitAudioContext);\n\n    const Audio = {\n        async init() {\n            // Note: terser has a bug that prevents it from handling a spread array with holes.\n            // That is: `f(...[,,3])` generates invalid javascript `f(,,3)`.\n            // We can work around that bug with a little helper shim.\n            let cache = sound => zzfxG(...sound);\n            Audio.shotgun = cache([,.01,140,.01,.02,.45,4,2.42,.1,-0.1,,,,1.2,,.3,.04,.8,.02]);\n\n        },\n\n        playShotgun() {\n            zzfxP(Audio.shotgun);\n    /*\n            zzfx(...[,,925,.04,.3,.6,1,.3,,6.27,-184,.09,.17]); // Game Over\n    zzfx(...[,,537,.02,.02,.22,1,1.59,-6.98,4.97]); // Heart\n    zzfx(...[1.5,.8,270,,.1,,1,1.5,,,,,,,,.1,.01]); // Piano\n    zzfx(...[,,129,.01,,.15,,,,,,,,5]); // Drum\n    */\n        }\n    };\n\n    /**\n     * Player\n     */\n    class Player {\n      constructor() {\n        this.pos = { x: 0, y: 0 };\n        this.vel = { x: 0, y: 0 };\n        this.facing = { x: 0, y: -1, m: 0 };\n        this.hp = 100;\n        this.damage = [];\n        this.radius = 12;\n\n        this.shellsLeft = 4;\n        this.shellsMax = 4;\n\n        this.mass = 3;\n      }\n\n      think() {\n        switch (this.state) {\n          case Behavior.HUNT:\n            this.defaultMovement(1);\n\n            if (game.input.pressed[Input.Action.ATTACK]) {\n              if (this.shellsLeft === 0) {\n                this.reload();\n              } else {\n                this.fire();\n              }\n            }\n\n            if (game.input.pressed[Input.Action.RELOAD]) {\n              this.reload();\n            }\n\n            break;\n          case Behavior.ATTACK:\n            this.defaultMovement(1);\n            if (--this.frames <= 0) this.state = Behavior.HUNT;\n            break;\n          case Behavior.RELOAD:\n            this.defaultMovement(2.5);\n            if (--this.frames <= 0) {\n              this.shellsLeft = this.shellsMax;\n              this.state = Behavior.HUNT;\n            }\n            break;\n          default:\n            this.state = Behavior.HUNT;\n            this.frames = 0;\n            break;\n        }\n      }\n\n      defaultMovement(velocityAdj) {\n        if (game.pointerXY()) {\n          this.facing = Geometry.vectorBetween(this.pos, game.pointerXY());\n        }\n\n        let v = {\n          x: game.input.direction.x * game.input.direction.m * 1.8 * velocityAdj,\n          y: game.input.direction.y * game.input.direction.m * 1.8 * velocityAdj\n        };\n\n        this.vel.x = (this.vel.x + v.x) / 2;\n        this.vel.y = (this.vel.y + v.y) / 2;\n      }\n\n      fire() {\n        Audio.playShotgun();\n\n        this.state = Behavior.ATTACK;\n        this.frames = 6;\n        this.shellsLeft--;\n\n        let angle = Geometry.vector2angle(this.facing);\n        game.entities.push(new ShotgunBlast(this.pos, angle));\n\n        // player knockback\n        this.vel = Geometry.vector2point({ ...Geometry.normalizeVector(this.facing), m: -1 });\n      }\n\n      reload() {\n        this.state = Behavior.RELOAD;\n        this.frames = 12;\n        game.entities.push(new ReloadAnimation(this.frames));\n      }\n\n      draw(viewport) {\n        Sprite.drawViewportSprite(viewport, Sprite.player, this.pos, game.camera.pos);\n\n        viewport.ctx.strokeStyle = 'rgba(255, 255, 64, 0.3)';\n        viewport.ctx.beginPath();\n        let uv = game.xy2uv(this.pos);\n        viewport.ctx.arc(uv.u, uv.v, Constants.PLAYER_BOUND_RADIUS, 0, 2 * Math.PI);\n        viewport.ctx.setLineDash([2, 1]);\n        viewport.ctx.stroke();\n        viewport.ctx.setLineDash([]);\n      }\n    }\n\n    /**\n     * Monster\n     */\n    class Sculptor {\n      constructor() {\n        this.pos = { x: 0, y: 0 };\n        this.vel = { x: 0, y: 0 };\n        this.facing = { x: 0, y: -1, m: 0 };\n        this.hp = 100;\n        this.damage = [];\n        this.radius = 3;\n\n        this.mass = 1;\n\n        this.bounce = true;\n      }\n\n      think() {\n        switch (this.state) {\n          case Behavior.IDLE:\n            // Kick off at random angles, but, it looks weird to have straight horizontal\n            // or vertical angles - so avoid anything within +- 20 degrees of a straight angle.\n            let angle = Math.random() * Constants.R360;\n            if (angle % Constants.R90 < Constants.R20) angle += Constants.R20;\n            if (angle % Constants.R90 > Constants.R70) angle -= Constants.R20;\n            this.facing = Geometry.angle2vector(angle);\n            this.vel = this.facing;\n            this.state = Behavior.CHASE;\n            break;\n          case Behavior.CHASE:\n            let playerAngle = Geometry.vector2angle(Geometry.vectorBetween(this.pos, game.player.pos));\n            let velAngle = Geometry.vector2angle(this.vel);\n\n            /*if (G.closestAngleDifference(velAngle, playerAngle) < C.R90) {\n                velAngle = G.intermediateAngle(velAngle, playerAngle, 0.01);\n                this.vel = G.angle2vector(velAngle);\n            }*/\n\n            let v = Geometry.normalizeVector(this.vel);\n            v.m = (v.m + 2.5) / 2;\n            this.vel = Geometry.vector2point(v);\n\n            let dist = Geometry.vectorBetween(this.pos, game.player.pos);\n            if (dist.m <= this.radius + game.player.radius) {\n              game.player.damage.push({ amount: 5, vector: dist, knockback: 3 });\n            }\n\n            break;\n          case Behavior.DEAD:\n            this.vel = { x: 0, y: 0, m: 0 };\n            if (!this.cullt) this.cullt = 15;\n            this.cullt--;\n            if (this.cullt < 1) this.cull = true;\n            break;\n          default:\n            this.state = Behavior.IDLE;\n            break;\n        }\n      }\n\n      draw(viewport) {\n        // TODO\n        if (this.state === Behavior.DEAD) {\n          Sprite.drawViewportSprite(viewport, Sprite.monster_dead, this.pos, game.camera.pos);\n        } else {\n          let { u, v } = Sprite.viewportSprite2uv(viewport, Sprite.sawblade, this.pos, game.camera.pos);\n          u += Sprite.sawblade.anchor.x;\n          v += Sprite.sawblade.anchor.y;\n\n          viewport.ctx.save();\n          viewport.ctx.translate(u, v);\n          viewport.ctx.rotate(game.frame / 5);\n          Sprite.drawSprite(viewport.ctx, Sprite.sawblade, 0, 0);\n          viewport.ctx.restore();\n          Sprite.drawSprite(viewport.ctx, Sprite.sawblade_eyes, u, v);\n        }\n      }\n    }\n\n    const Menu = {\n        draw(viewport) {\n\n            return;\n\n            /*\n            Text.drawText(ctx, \"Abominable Snowman\", 120, 50);\n            Text.drawText(ctx, \"Abominable Snowman\", 121, 50, Text.shadow);\n            Text.drawRightText(ctx, \"500\", 120, 70);\n            Text.drawRightText(ctx, \"1,200\", 120, 80);\n            Text.drawRightText(ctx, \"5,000\", 120, 90);\n            Text.drawRightText(ctx, \"5,000\", 121, 91, Text.shadow);\n\n\n            5px 7px 9px\n\n            draw(viewport) {\n                Sprite.drawViewportSprite(viewport, Sprite.player, this.pos, game.camera.pos);\n\n                viewport.ctx.strokeStyle = 'rgba(255, 255, 64, 0.3)';\n                viewport.ctx.beginPath();*/\n\n        }\n    };\n\n    class BattleStreamAnimation {\n      constructor(pos) {\n        this.t = -1;\n        this.d = 16;\n        this.z = -5;\n        this.pos = pos;\n      }\n\n      think() {\n        if (++this.t === this.d) this.cull = true;\n      }\n\n      draw(viewport) {\n        if (this.t >= 0 && this.t < 16) {\n          let f = Math.floor(this.t / 2);\n          Sprite.drawViewportSprite(viewport, Sprite.battle_stream[f], { x: this.pos.x, y: this.pos.y + f }, game.camera.pos);\n        }\n      }\n    }\n\n    /**\n     * Movement\n     */\n    const Movement = {\n      apply(entities) {\n        // Movement only applies to active entities with positions and velocities\n        let movers = entities.filter(entity => entity.pos && entity.vel && !entity.cull);\n\n        // Very basic \"rounds\" of collision resolution, since we have no real physics.\n        // (As usual, \"detecting\" a collision is not the hard part... we need to resolve\n        // them too!)\n        for (let rounds = 0; rounds < 5; rounds++) {\n          // Each pair of entities only needs to interact once.\n          for (let i = 0; i < movers.length - 1; i++) {\n            for (let j = i + 1; j < movers.length; j++) {\n              this.clipVelocityEntityVsEntity(movers[i], movers[j]);\n            }\n          }\n\n          for (let entity of movers) {\n            this.clipVelocityAgainstWalls(entity);\n          }\n        }\n\n        // Now we apply all movement, even if it's not going to be perfect.\n        for (let entity of movers) {\n          entity.pos.x += entity.vel.x;\n          entity.pos.y += entity.vel.y;\n        }\n      },\n\n      clipVelocityEntityVsEntity(entity, other) {\n        let hit = Geometry.intersectCircleCircle2(\n          entity.pos, entity.radius, entity.vel,\n          other.pos, other.radius, other.vel\n        );\n        if (hit) {\n          if (entity.bounce && other.bounce) {\n            entity.vel.x = -hit.nx * hit.m;\n            entity.vel.y = -hit.ny * hit.m;\n            other.vel.x = hit.nx * hit.m;\n            other.vel.y = hit.ny * hit.m;\n          } else {\n            // Not a bug: we \"add\" the mass of the opposing entity to our own velocity when deciding who\n            // is at fault for the collision. Entity velocities adjust in relation to their fault level.\n            let entityM = Geometry.normalizeVector(entity.vel).m + other.mass;\n            let otherM = Geometry.normalizeVector(other.vel).m + entity.mass;\n            let entityI = entity.bounce ? 0.1 : 1;\n            let otherI = other.bounce ? 0.1 : 1;\n            entity.vel.x -= hit.nx * hit.m * entityI * entityM / (entityM + otherM);\n            entity.vel.y -= hit.ny * hit.m * entityI * entityM / (entityM + otherM);\n            other.vel.x += hit.nx * hit.m * otherI * otherM / (entityM + otherM);\n            other.vel.y += hit.ny * hit.m * otherI * otherM / (entityM + otherM);\n          }\n        }\n      },\n\n      clipVelocityAgainstWalls(entity) {\n        for (let tile of Geometry.tilesHitByCircle(entity.pos, entity.vel, entity.radius)) {\n          if (!Geometry.tileIsPassable(tile.q, tile.r)) {\n            let bounds = [Geometry.qr2xy(tile), Geometry.qr2xy({ q: tile.q + 1, r: tile.r + 1 })];\n            let hit = Geometry.intersectCircleRectangle(\n              entity.pos,\n              { x: entity.pos.x + entity.vel.x, y: entity.pos.y + entity.vel.y },\n              entity.radius,\n              bounds\n            );\n\n            // The \"math\" part of detecting collision with walls is buried in the geometry functions\n            // above, but it's not the whole story -- if we do detect a collision, we still need to\n            // decide what to do about it.\n            //\n            // If the normal vector is horizontal or vertical, we zero out the portion of the vector\n            // moving into the wall, allowing frictionless sliding (if we wanted to apply friction,\n            // we could also reduce the other axis slightly).\n            //\n            // If the normal vector is not 90*, we \"back up\" off the wall by exactly the normal vector.\n            // If the player runs into a corner at EXACTLY a 45 degree angle, they will simply \"stick\"\n            // on it -- but one degree left or right and they'll slide around the corner onto the wall,\n            // which is the desired result.\n            if (hit) {\n              if (entity.bounce) {\n                if (hit.nx === 0) {\n                  entity.vel.y = -entity.vel.y;\n                } else if (hit.ny === 0) {\n                  entity.vel.x = -entity.vel.x;\n                } else {\n                  entity.vel.x += hit.nx;\n                  entity.vel.y += hit.ny;\n                }\n              } else {\n                if (hit.nx === 0) {\n                  entity.vel.y = hit.y - entity.pos.y;\n                } else if (hit.ny === 0) {\n                  entity.vel.x = hit.x - entity.pos.x;\n                } else {\n                  entity.vel.x += hit.nx;\n                  entity.vel.y += hit.ny;\n                }\n              }\n            }\n          }\n        }\n      }\n    };\n\n    class HealthChunkAnimation {\n      constructor(start, amount) {\n        this.start = start;\n        this.amount = amount;\n        this.t = -1;\n        this.d = 20;\n        this.z = 101;\n        this.y = 5;\n        this.vel = -0.7;\n        this.gravity = 0.09;\n      }\n\n      think() {\n        if (++this.t === this.d) this.cull = true;\n        this.y += this.vel;\n        this.vel += this.gravity;\n      }\n\n      draw(viewport) {\n        let x = this.start - this.amount + 8;\n\n        if (this.t > 15) viewport.ctx.globalAlpha = 1 - this.t * 0.1;\n        viewport.ctx.drawImage(\n          Sprite.hud_health_chunk.img,\n          x, 3, this.amount, 3,\n          x + 2, this.y, this.amount, 3\n        );\n        viewport.ctx.globalAlpha = 1;\n      }\n    }\n\n    /**\n     * Damage\n     */\n    const Damage = {\n      apply(entities) {\n        for (let entity of entities) {\n          if (typeof entity.hp === 'number') {\n            if (entity.damage.length > 0) {\n              for (let damage of entity.damage) {\n                if (entity instanceof Player) {\n                  game.entities.push(new HealthChunkAnimation(entity.hp, damage.amount));\n                }\n                entity.hp -= damage.amount;\n                damage.vector.m = damage.knockback;\n                entity.vel = Geometry.vectorAdd(entity.vel, damage.vector);\n              }\n              entity.damage = [];\n            }\n            if (entity.hp <= 0) entity.state = Behavior.DEAD;\n          }\n        }\n      }\n    };\n\n    /*import { Input } from './Input';\n    import { Player } from './Player';\n    import { ScreenShake } from './ScreenShake';\n    import { Hud } from './Hud';\n    import { Menu, PauseMenu, IntroMenuA, IntroMenuB, OutroMenu } from './Menu';\n    import { Audio } from './Audio';\n    import { Assets, Sprite, drawPoly } from './Assets';\n    import { Demon1 } from './Demon1';\n    import { Canvas } from './Canvas';\n    import { Particle, PortalParticle, SuperParticle } from './Particle';\n    import { Hive } from './Hive';\n    import { Point, intersectingPolygons, intersectingCircles, RAD, vectorFromAngle, distance } from './Geometry';\n    import { HEARTBEAT } from './Config';\n    import { Tween } from './Tween';\n    */\n\n    /**\n     * Game state.\n     */\n    class Game {\n        constructor() {\n        }\n\n        async init() {\n            viewport.init();\n\n            this.input = new Input();\n            await this.input.init();\n\n            await Audio.init();\n\n            this.maze = MapLoader.load();\n            this.camera = { pos: { x: 1, y: 1 } };\n\n            await Assets.init();\n            await Text.init();\n\n            this.entities = [];\n\n            this.player = new Player();\n            console.log(this.maze.rooms);\n            this.player.pos.x = (this.maze.rooms[1].q + Math.floor(this.maze.rooms[1].w / 2)) * Constants.TILE_WIDTH + Constants.TILE_WIDTH / 2;\n            this.player.pos.y = (this.maze.rooms[1].r + Math.floor(this.maze.rooms[1].h / 2)) * Constants.TILE_WIDTH + Constants.TILE_WIDTH / 2;\n\n            this.entities.push(this.player);\n\n            this.roomsCleared = [];\n\n            /*\n\n            await Assets.init();\n\n            this.artifacts = [\n                await Assets.grayscaleNoise(this.canvas.width, this.canvas.height),\n                await Assets.grayscaleNoise(this.canvas.width, this.canvas.height),\n                await Assets.grayscaleNoise(this.canvas.width, this.canvas.height)\n            ];\n\n            this.input = new Input();\n            await this.input.init();\n\n            this.player = new Player();\n\n            this.hud = new Hud();\n\n            this.particles = [];\n            this.screenshakes = [];\n            this.menuStack = [];\n\n            this.monsters = [];\n\n            // Create, but do not initialize, the audio object. The audio object will be\n            // initialized as soon as possible by the first user input event, to meet\n            // requirements of the browser.\n            this.audio = new Audio();\n\n            this.score = 0;\n\n            this.hive = new Hive();\n\n            */\n        }\n\n        start() {\n            this.frame = 0;\n\n            this.started = true;\n            this.update();\n            this.started = false;\n\n            /*\n            this.menuStack.push(new IntroMenuA({\n                onClose: () => {\n                    this.menuStack.push(new IntroMenuB({}));\n                }\n            }));*/\n\n            //this.framems = performance.now();\n            window.requestAnimationFrame(() => this.onFrame(1));\n            //this.frame = 0;\n        }\n\n        onFrame(currentms) {\n            this.frame++;\n            viewport.resize();\n            this.update();\n            this.draw(viewport.ctx);\n            window.requestAnimationFrame(() => this.onFrame(currentms));\n        }\n\n        update() {\n            // Pull in frame by frame button pushes / keypresses / mouse clicks\n            this.input.update();\n\n            // Behavior (AI, player input, etc.)\n            Behavior.apply(this.entities);\n\n            // Apply any queued damage\n            Damage.apply(this.entities);\n\n            // Movement (apply entity velocities to position)\n            Movement.apply(this.entities);\n\n            // Culling (typically set when an entity dies)\n            this.entities = this.entities.filter(entity => !entity.cull);\n\n            // camera logic! where does it go! (an entity perhaps?)\n            let diff = {\n                x: this.player.pos.x - this.camera.pos.x,\n                y: this.player.pos.y - this.camera.pos.y\n            };\n            this.camera.pos.x += diff.x * 0.2;\n            this.camera.pos.y += diff.y * 0.2;\n\n            //this.spawnEnemy();\n\n            if (!this.activeBattle) {\n                let qr = Geometry.xy2qr(game.player.pos);\n                let room = this.maze.rooms[this.maze.maze[qr.r][qr.q]];\n\n                console.log(this.maze.maze[qr.r][qr.q]);\n                console.log(room);\n                if (room && room.roomNumber >= 3 && !this.roomsCleared.includes(room.roomNumber) && room.w >= 3 && room.h >= 4 &&\n                    qr.q > room.q && qr.r > room.r && qr.q < room.q + room.w - 1 && qr.r < room.r + room.h - 1) {\n                    this.activeBattle = {\n                        room,\n                        enemies: [],\n                        start: this.frame,\n                        plan: [\n                            {\n                                frame: this.frame + 10,\n                                x: Math.floor(Math.random() * (room.w * 32)) + room.q * 32,\n                                y: Math.floor(Math.random() * (room.h * 32)) + room.r * 32,\n                            },\n                            {\n                                frame: this.frame + 50,\n                                x: Math.floor(Math.random() * (room.w * 32)) + room.q * 32,\n                                y: Math.floor(Math.random() * (room.h * 32)) + room.r * 32,\n                            },\n                            {\n                                frame: this.frame + 90,\n                                x: Math.floor(Math.random() * (room.w * 32)) + room.q * 32,\n                                y: Math.floor(Math.random() * (room.h * 32)) + room.r * 32,\n                            }\n                        ]\n                    };\n                    console.log(\"BATTLE STARTED\", room);\n                }\n            }\n\n            if (this.activeBattle) {\n                if (this.activeBattle.plan.length === 0) {\n                    if (this.activeBattle.enemies.filter(enemy => !enemy.cull).length === 0) {\n                        this.roomsCleared.unshift(this.activeBattle.room.roomNumber);\n                        this.activeBattle = undefined;\n                        console.log(\"BATTLE FINISHED\", this.roomsClear);\n                    }\n                } else {\n                    if (this.frame >= this.activeBattle.plan[0].frame) {\n                        let spawn = this.activeBattle.plan.shift();\n                        let monster = new Sculptor();\n                        monster.pos = { x: spawn.x, y: spawn.y };\n                        this.entities.push(monster);\n                        this.activeBattle.enemies.push(monster);\n                    }\n                }\n            }\n\n            let u = Math.floor(Math.random() * (480 + 50)) - 25,\n                v = Math.floor(Math.random() * (270 + 50)) - 25;\n            let qr = this.uv2xy({ u, v });\n            this.entities.push(new BattleStreamAnimation(qr));\n        }\n\n        spawnEnemy() {\n            let enemies = this.entities.filter(entity => entity instanceof Monster);\n            if (enemies.length < 4 && Math.random() < 0.1) {\n                let q = this.maze.rooms[1][0].q + this.maze.rand(0, this.maze.rooms[1][0].width);\n                let r = this.maze.rooms[1][0].r + this.maze.rand(0, this.maze.rooms[1][0].height);\n                let monster = new Monster();\n                monster.pos = Geometry.qr2xy({ q, r });\n                this.entities.push(monster);\n            }\n        }\n\n        draw(ctx) {\n            ctx.setTransform(1, 0, 0, 1, 0, 0);\n            ctx.scale(viewport.scale, viewport.scale);\n\n            ctx.fillStyle = 'rgba(20,20,20,1)';\n            ctx.fillRect(0, 0, viewport.width, viewport.height);\n            if (this.activeBattle) {\n                ctx.fillStyle = 'rgba(128,20,20,1)';\n                let y = Math.min(0, (this.frame - this.activeBattle.start) * 8 - 300);\n                ctx.drawImage(Sprite.battle_bg.img, 0, y);\n            }\n\n            /*ctx.fillStyle = 'rgba(150, 128, 128, 1)';\n            ctx.fillRect(10, 10, 100, 100);*/\n\n            for (let entity of this.entities) {\n                if (entity.z < 0) entity.draw(viewport);\n            }\n\n            this.drawMaze(ctx, this.maze);\n\n            for (let entity of this.entities) {\n                if (entity.z > 0 || !entity.z) entity.draw(viewport);\n            }\n\n            this.drawHud(ctx);\n\n            let ky = this.frame;\n            Text.drawText(ctx, 'FIGHT', ky * 10, 100, Text.shadow, 4);\n            Text.drawText(ctx, 'FIGHT', ky * 10, 100, Text.default, 4);\n\n            for (let entity of this.entities) {\n                if (entity.z && entity.z > 100) entity.draw(viewport);\n            }\n\n            /*\n            ctx.fillStyle = 'rgba(150, 128, 128, 1)';\n            ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n            this.shadow.ctx.globalCompositeOperation = 'copy';\n            //this.shadow.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n            this.shadow.ctx.fillStyle = 'rgba(0, 0, 0, 0.99)';\n            this.shadow.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n            this.shadow.ctx.globalCompositeOperation = 'destination-out';\n            let grd = this.shadow.ctx.createRadialGradient(game.player.x, game.player.y, 0, game.player.x, game.player.y, 200);\n            grd.addColorStop(0, \"rgba(0, 0, 0, 1)\");\n            grd.addColorStop(0.5, \"rgba(0, 0, 0, 0.95)\");\n            grd.addColorStop(1, \"rgba(0, 0, 0, 0)\");\n            this.shadow.ctx.fillStyle = grd;\n            this.shadow.ctx.beginPath();\n            this.shadow.ctx.arc(game.player.x, game.player.y, 200, 0, 2 * Math.PI);\n            this.shadow.ctx.fill();\n\n            for (let particle of this.particles.filter(p => p instanceof PortalParticle)) {\n                let r = (particle as PortalParticle).effectiveRadius();\n                this.shadow.ctx.globalCompositeOperation = 'destination-out';\n                let grd = this.shadow.ctx.createRadialGradient(particle.x, particle.y, 0, particle.x, particle.y, r);\n                grd.addColorStop(0, \"rgba(0, 0, 0, 0.7)\");\n                grd.addColorStop(1, \"rgba(0, 0, 0, 0)\");\n                this.shadow.ctx.fillStyle = grd;\n                this.shadow.ctx.beginPath();\n                this.shadow.ctx.arc(particle.x, particle.y, r, 0, 2 * Math.PI);\n                this.shadow.ctx.fill();\n            }\n\n            this.shadow.ctx.globalCompositeOperation = 'source-atop';\n            for (let monster of this.monsters) {\n                this.shadow.ctx.beginPath();\n                this.shadow.ctx.arc(monster.x, monster.y, 200, 0, 2 * Math.PI);\n            }\n\n            /*\n              we don't even use bloodplanes (splatter terrain) anymore because i just\n              render all of them as particles\n            ctx.globalAlpha = 1 - this.bloodplanes[0][1] / this.bloodplanes[0][2];\n            ctx.globalAlpha = 0.9;\n            ctx.drawImage(this.bloodplanes[0][0].canvas, 0, 0);\n            ctx.globalAlpha = 1 - this.bloodplanes[1][1] / this.bloodplanes[1][2];\n            ctx.drawImage(this.bloodplanes[1][0].canvas, 0, 0);\n            ctx.globalAlpha = 1 - this.bloodplanes[2][1] / this.bloodplanes[2][2];\n            ctx.drawImage(this.bloodplanes[2][0].canvas, 0, 0);\n            ctx.globalAlpha = 1;\n            ctx.save();\n            let shakeX = 0, shakeY = 0;\n            this.screenshakes.forEach(shake => {\n                shakeX += shake.x;\n                shakeY += shake.y;\n            });\n            ctx.translate(shakeX, shakeY);\n\n            // low-hanging fruit here (pre-render the map since it never changes)\n            for (let i = 0; i < 16; i++) {\n                for (let j = 0; j < 10; j++) {\n                    let k = ((i * i * 13) + j * 17) % 9;\n                    Sprite.drawSprite(ctx, Sprite.tiles[k], i * 32 - 16, j * 32 - 8);\n                }\n            }\n\n            for (let particle of this.particles) if (!particle.foreground && !game.superFired) particle.draw(ctx);\n\n            this.player.draw(ctx);\n\n            //Text.renderText(ctx, 250, 120, 20, 'THE ELEPHANTS');\n            //Text.renderText(ctx, 100, 200, 64, 'AB0123456789');\n            //Text.renderText(ctx, 100, 150, 30, 'AB0123456789');\n\n            for (let monster of this.monsters) monster.draw(ctx);\n\n      //      var bubble = ctx.createLinearGradient(\n            // Let's add blue noise?\n            /*for (let i = 100; i < 300; i += 5) {\n                for(let j = 100; j < 120; j += 5) {\n                    let [x, y] = [Math.random() * 5, Math.random() * 5];\n                    ctx.fillStyle = 'rgba(0,0,0,0.5)';\n                    ctx.fillRect(i+Math.floor(x),j+Math.floor(y),1,1);\n                }\n\n            for (let particle of this.particles) if (particle.foreground) particle.draw(ctx);\n\n            ctx.drawImage(this.shadow.canvas, 0, 0);\n            let noiseLoop = Math.floor(this.frame / 8) % 3;\n            ctx.globalAlpha = 0.06;\n            ctx.drawImage(this.artifacts[noiseLoop].canvas, 0, 0);\n            ctx.globalAlpha = 1;\n\n            this.hud.draw(ctx);\n            this.hive.draw(ctx);\n\n            ctx.restore();\n\n            /*\n            if (this.frame % HEARTBEAT === 0 || (this.frame - 1) % HEARTBEAT === 0 || (this.frame - 2) % HEARTBEAT === 0) {\n                ctx.fillStyle = 'rgba(255, 255, 30, 0.3)';\n                ctx.fillRect(100, 0, 100, 10);\n            */\n\n            Menu.draw(viewport);\n        }\n\n        drawMaze(ctx, maze) {\n            let offset = {\n                x: viewport.center.u - this.camera.pos.x,\n                y: viewport.center.v - this.camera.pos.y\n            };\n\n            let r1 = this.activeBattle ? this.activeBattle.room.r : 0,\n                r2 = this.activeBattle ? this.activeBattle.room.r + this.activeBattle.room.h : maze.tiles.length,\n                q1 = this.activeBattle ? this.activeBattle.room.q : 0,\n                q2 = this.activeBattle ? this.activeBattle.room.q + this.activeBattle.room.w : maze.tiles[0].length;\n\n            for (let r = r1; r < r2; r++) {\n                for (let q = q1; q < q2; q++) {\n                    let x = q * 32 + offset.x, y = r * 32 + offset.y;\n                    if (x < -50 || y < -50 || x > 500 || y > 500) continue;\n\n                    let sprite = Sprite.tiles[maze.tiles[r][q] & 0b1111];\n                    if (!sprite) throw new Error(`${q},${r} tile ${maze.tiles[r][q]}`);\n                    ctx.drawImage(sprite.img, x, y);\n                }\n            }\n\n            for (let r = r1; r < r2; r++) {\n                for (let q = q1; q < q2; q++) {\n                    let x = q * 32 + offset.x, y = r * 32 + offset.y;\n                    if (x < -50 || y < -50 || x > 500 || y > 500) continue;\n\n                    if (maze.walls[r][q] & Constants.WALL_TOP) {\n                        ctx.drawImage(Sprite.walls.img, 5, 5, 36, 4, x - 2, y - 2, 36, 4);\n                    }\n\n                    if (maze.walls[r][q] & Constants.WALL_RIGHT) {\n                        ctx.drawImage(Sprite.walls.img, 37, 5, 4, 36, x + 30, y - 2, 4, 36);\n                    }\n\n                    if (maze.walls[r][q] & Constants.WALL_BOTTOM) {\n                        ctx.drawImage(Sprite.walls.img, 5, 37, 36, 4, x - 2, y + 30, 36, 4);\n                    }\n\n                    if (maze.walls[r][q] & Constants.WALL_LEFT) {\n                        ctx.drawImage(Sprite.walls.img, 5, 5, 4, 36, x - 2, y - 2, 4, 36);\n                    }\n\n                    if (this.activeBattle) {\n                        let f = (this.frame / 8) % 3 | 0;\n\n                        if (maze.walls[r][q] & Constants.OPEN_TOP) {\n                            ctx.drawImage(Sprite.battle_door[f].img, 5, 0, 36, 9, x - 2, y - 7, 36, 9);\n                        } else if (r === r1) {\n                            ctx.drawImage(Sprite.battle_spray[f].img, 5, 0, 36, 5, x - 2, y - 7, 36, 5);\n                        }\n\n                        if (maze.walls[r][q] & Constants.OPEN_RIGHT) {\n                            ctx.drawImage(Sprite.battle_door[f].img, 37, 5, 9, 41, x + 30, y - 2, 9, 41);\n                        } else if (r === r1 && q === q2 - 1) {\n                            ctx.drawImage(Sprite.battle_spray[f].img, 41, 0, 5, 46, x + 34, y -  7, 5, 46);\n                        }\n\n                        if (maze.walls[r][q] & Constants.OPEN_BOTTOM) {\n                            ctx.drawImage(Sprite.battle_door[f].img, 5, 37, 36, 9, x - 2, y + 30, 36, 9);\n                        }\n\n                        if (maze.walls[r][q] & Constants.OPEN_LEFT) {\n                            ctx.drawImage(Sprite.battle_door[f].img, 0, 5, 9, 41, x - 7, y - 2, 9, 41);\n                        } else if (r === r1 && q === q1) {\n                            ctx.drawImage(Sprite.battle_spray[f].img, 0, 0, 5, 46, x - 7, y -  7, 5, 46);\n                        }\n                    }\n                }\n            }\n\n            // old wall logic\n            //sprite = Sprite.walls[maze.tiles[r][q] >> 4];\n            //if (sprite) ctx.drawImage(sprite.img, x, y);\n\n            //if (this.maze.flowhome[r][q] < 100)\n            //Text.drawText(ctx, String(this.maze.flowhome[r][q]), x, y);\n\n            // commented for screenshots:\n            //Text.drawText(ctx, String(maze.tiles[r][q] >> 4), x, y);\n\n            //ctx.fillRect(q * 4 - this.camera.pos.x + this.center.pixel.u, r * 4 - this.camera.pos.y + this.center.pixel.v, 4, 4);\n        }\n\n        pointerXY() {\n            if (!this.input.pointer) return;\n            return this.uv2xy(this.input.pointer);\n        }\n\n        xy2uv(pos) {\n            return {\n                u: pos.x - this.camera.pos.x + viewport.center.u,\n                v: pos.y - this.camera.pos.y + viewport.center.v\n            };\n        }\n\n        uv2xy(pos) {\n            return {\n                x: pos.u - viewport.center.u + this.camera.pos.x,\n                y: pos.v - viewport.center.v + this.camera.pos.y\n            };\n        }\n\n        drawHud(ctx) {\n            let hp = Geometry.clamp(game.player.hp, 0, 100);\n            ctx.drawImage(Sprite.hud_health_frame.img, 2, 2);\n            ctx.drawImage(Sprite.hud_health_fill.img, 0, 0, hp + 8, 8, 2, 2, hp + 8, 8);\n\n            let sprite = Sprite.hud_shells_full;\n            for (let i = 0; i < game.player.shellsMax; i++) {\n                if (i + 1 > game.player.shellsLeft) sprite = Sprite.hud_shells_empty;\n                ctx.drawImage(sprite.img, 15 + 6 * i, 10);\n            }\n\n            ctx.drawImage(Sprite.page.img, viewport.width - 39, 10 - 1);\n            Text.drawText(ctx, 'x302', viewport.width - 30, 10);\n\n            Text.drawText(ctx, String(this.frame), viewport.width - 30, viewport.height - 28);\n\n            Text.drawRightText(ctx, [viewport.scale, viewport.width, viewport.height].join(', '), viewport.width - 4, viewport.height - 18);\n            let ptr = this.input.pointer;\n            if (ptr) {\n                Text.drawRightText(ctx, JSON.stringify(ptr), viewport.width - 4, viewport.height - 8);\n                ctx.save();\n                ctx.translate(ptr.u, ptr.v);\n                ctx.rotate(this.frame / 72);\n                ctx.drawImage(Sprite.hud_crosshair.img, -Sprite.hud_crosshair.anchor.x, -Sprite.hud_crosshair.anchor.y);\n                ctx.restore();\n                //Sprite.drawSprite(ctx, Sprite.hud_crosshair, ptr.u, ptr.v);\n            }\n\n            if (!this.grab) {\n                let colors = [\n                    'rgba(20, 20, 20)',\n                    'rgba(20, 20, 20)',\n                    'rgba(32, 32, 32)',\n                    'rgba(32, 32, 32)',\n                    'rgba(64, 6, 6)',\n                    'rgba(64, 6, 6)',\n                    'rgba(128, 0, 0)',\n                    'rgba(158, 32, 32)'\n                ];\n\n                this.grab = new Canvas(100, 100);\n                for (let i = 0; i < 100; i++) {\n                    for (let j = 0; j < 100; j++) {\n                        let c = colors[Math.floor(Math.random() * colors.length)];\n                        this.grab.ctx.fillStyle = c;\n                        this.grab.ctx.fillRect(i, j, 1, 1);\n                    }\n                }\n                this.grab.ctx.globalOpacity = 0.1;\n                this.grab.ctx.drawImage(this.grab.canvas, 0, 0, 50, 100, 1, 0, 50, 100);\n                this.grab.ctx.drawImage(this.grab.canvas, 0, 0, 50, 100, 2, 0, 50, 100);\n                this.grab.ctx.drawImage(this.grab.canvas, 0, 0, 50, 100, 3, 0, 50, 100);\n            }\n            let mark = this.frame % 100;\n            //ctx.drawImage(this.grab.canvas, mark, 0, 100 - mark, 100, 50, 50, 100 - mark, 100);\n            //ctx.drawImage(this.grab.canvas, 0, 0, mark, 100, 50 + 100 - mark, 50, mark, 100);\n        }\n    }\n\n    const game = new Game();\n\n    /**\n     * Create and launch game.\n     */\n    game.init().then(() => game.start());\n\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlcyI6WyIuLi8uLi9zcmMvanMvQ29uc3RhbnRzLmpzIiwiLi4vLi4vc3JjL2pzL0NhbnZhcy5qcyIsIi4uLy4uL3NyYy9qcy9TcHJpdGVTaGVldC1nZW4uanMiLCIuLi8uLi9zcmMvanMvQXNzZXRzLmpzIiwiLi4vLi4vc3JjL2pzL2lucHV0L0tleWJvYXJkQWRhcHRlci5qcyIsIi4uLy4uL3NyYy9qcy9WaWV3cG9ydC5qcyIsIi4uLy4uL3NyYy9qcy9pbnB1dC9Nb3VzZUFkYXB0ZXIuanMiLCIuLi8uLi9zcmMvanMvaW5wdXQvSW5wdXQuanMiLCIuLi8uLi9zcmMvanMvR2VvbWV0cnkuanMiLCIuLi8uLi9zcmMvanMvTWFwLWdlbi5qcyIsIi4uLy4uL3NyYy9qcy9NYXBMb2FkZXIuanMiLCIuLi8uLi9zcmMvanMvVGV4dC5qcyIsIi4uLy4uL3NyYy9qcy9EZXRlY3Rpb24uanMiLCIuLi8uLi9zcmMvanMvc3lzdGVtcy9CZWhhdmlvci5qcyIsIi4uLy4uL3NyYy9qcy9Nb25zdGVyLmpzIiwiLi4vLi4vc3JjL2pzL1Nob3RndW5CbGFzdC5qcyIsIi4uLy4uL3NyYy9qcy9SZWxvYWRBbmltYXRpb24uanMiLCIuLi8uLi9zcmMvanMvenpmeC5qcyIsIi4uLy4uL3NyYy9qcy9BdWRpby5qcyIsIi4uLy4uL3NyYy9qcy9QbGF5ZXIuanMiLCIuLi8uLi9zcmMvanMvU2N1bHB0b3IuanMiLCIuLi8uLi9zcmMvanMvTWVudS5qcyIsIi4uLy4uL3NyYy9qcy9CYXR0bGVTdHJlYW1BbmltYXRpb24uanMiLCIuLi8uLi9zcmMvanMvc3lzdGVtcy9Nb3ZlbWVudC5qcyIsIi4uLy4uL3NyYy9qcy9IZWFsdGhDaHVua0FuaW1hdGlvbi5qcyIsIi4uLy4uL3NyYy9qcy9zeXN0ZW1zL0RhbWFnZS5qcyIsIi4uLy4uL3NyYy9qcy9HYW1lLmpzIiwiLi4vLi4vc3JjL2pzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGNvbnN0IENvbnN0YW50cyA9IHtcbiAgICBSMDogMCxcbiAgICBSMjA6IE1hdGguUEkgICogIDIwIC8gMzYwLFxuICAgIFI3MDogTWF0aC5QSSAgKiAgNzAgLyAzNjAsXG4gICAgUjkwOiBNYXRoLlBJICAqICA5MCAvIDM2MCxcbiAgICBSMTgwOiBNYXRoLlBJICogMTgwIC8gMzYwLFxuICAgIFIyNzA6IE1hdGguUEkgKiAyNzAgLyAzNjAsXG4gICAgUjM2MDogTWF0aC5QSSAqIDM2MCAvIDM2MCxcblxuICAgIC8vIFNpemUgaW4gcGl4ZWxzIG9mIHRpbGVzIGluIHRoZSBnYW1lIG1hemVcbiAgICBUSUxFX1dJRFRIOiAzMixcbiAgICBUSUxFX0hFSUdIVDogMzIsXG5cbiAgICAvLyBUaWxlIGNvbnN0YW50c1xuICAgIFRJTEVfRkxPT1IxOiAgICAgICAgICAgIDAsXG4gICAgVElMRV9GTE9PUjI6ICAgICAgICAgICAgMSxcbiAgICBUSUxFX1dBTEwxOiAgICAgICAgICAgICAyLFxuICAgIFRJTEVfV0FMTDI6ICAgICAgICAgICAgIDMsXG5cbiAgICAvLyBXYWxsIGJpdHMsIGZvciByZW5kZXJpbmcgd2FsbCBlZGdlc1xuICAgIFdBTExfVE9QOiAgICAgIDBiMDAwMF8xMDAwLFxuICAgIFdBTExfUklHSFQ6ICAgIDBiMDAwMF8wMTAwLFxuICAgIFdBTExfQk9UVE9NOiAgIDBiMDAwMF8wMDEwLFxuICAgIFdBTExfTEVGVDogICAgIDBiMDAwMF8wMDAxLFxuXG4gICAgLy8gUm9vbSBvcGVuaW5ncyBpbnRvIHJvb21zIGZyb20gY29ycmlkb3JzXG4gICAgT1BFTl9UT1A6ICAgICAgMGIxMDAwXzAwMDAsXG4gICAgT1BFTl9SSUdIVDogICAgMGIwMTAwXzAwMDAsXG4gICAgT1BFTl9CT1RUT006ICAgMGIwMDEwXzAwMDAsXG4gICAgT1BFTl9MRUZUOiAgICAgMGIwMDAxXzAwMDAsXG5cbiAgICBQTEFZRVJfQk9VTkRfUkFESVVTOiA5XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFRoaXMgaGVscGVyIGNsYXNzIGVuY2Fwc3VsYXRlcyBjcmVhdGluZyB0ZW1wb3Jhcnkgb2ZmLXNjcmVlbiBjYW52YXNlcy4gT2ZmLXNjcmVlblxuICogY2FudmFzZXMgYXJlIGdyZWF0IHRvb2xzIGZvciBidWlsZGluZyBwYXR0ZXJucywgaW1hZ2UgbWFza3MsIGFuZCBvdGhlciBjb21wb25lbnRzXG4gKiB0aGF0IHdlJ2xsIHVzZSB0byBkcmF3IHRoaW5ncyBvbiB0aGUgcHJpbWFyeSBjYW52YXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBDYW52YXMge1xuICBjb25zdHJ1Y3Rvcih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgdGhpcy5jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICB0aGlzLmN0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBUaGlzIG1vZHVsZSBpcyBnZW5lcmF0ZWQgYnkgYGd1bHAgcmVmcmVzaEFzc2V0c2AuXG4gKi9cbmV4cG9ydCBjb25zdCBTcHJpdGVTaGVldCA9XG4vKiA8Z2VuZXJhdGVkPiAqL1xueyBiYXR0bGVfc3RyZWFtOlxuICAgWyB7IHg6IDAsIHk6IDAsIHc6IDEsIGg6IDggfSxcbiAgICAgeyB4OiAxLCB5OiAwLCB3OiAxLCBoOiA4IH0sXG4gICAgIHsgeDogMiwgeTogMCwgdzogMSwgaDogOCB9LFxuICAgICB7IHg6IDMsIHk6IDAsIHc6IDEsIGg6IDggfSxcbiAgICAgeyB4OiA0LCB5OiAwLCB3OiAxLCBoOiA4IH0sXG4gICAgIHsgeDogNSwgeTogMCwgdzogMSwgaDogOCB9LFxuICAgICB7IHg6IDYsIHk6IDAsIHc6IDEsIGg6IDggfSxcbiAgICAgeyB4OiA3LCB5OiAwLCB3OiAxLCBoOiA4IH0gXSxcbiAgYnVsbGV0OiBbIHsgeDogMCwgeTogOCwgdzogMzIsIGg6IDMyIH0gXSxcbiAgZm9udDogWyB7IHg6IDAsIHk6IDQwLCB3OiAyMzYsIGg6IDYgfSBdLFxuICBodWRfY3Jvc3NoYWlyOiBbIHsgeDogMCwgeTogNDYsIHc6IDksIGg6IDkgfSBdLFxuICBodWRfaGVhbHRoYmFyOlxuICAgWyB7IHg6IDAsIHk6IDU1LCB3OiAxMDksIGg6IDkgfSxcbiAgICAgeyB4OiAxMDksIHk6IDU1LCB3OiAxMDksIGg6IDkgfSxcbiAgICAgeyB4OiAyMTgsIHk6IDU1LCB3OiAxMDksIGg6IDkgfSBdLFxuICBodWRfc2hlbGxzOiBbIHsgeDogMCwgeTogNjQsIHc6IDYsIGg6IDcgfSwgeyB4OiA2LCB5OiA2NCwgdzogNiwgaDogNyB9IF0sXG4gIGxvdmV0b2FkOlxuICAgWyB7IHg6IDAsIHk6IDcxLCB3OiAxOSwgaDogMTkgfSxcbiAgICAgeyB4OiAxOSwgeTogNzEsIHc6IDE5LCBoOiAxOSB9LFxuICAgICB7IHg6IDM4LCB5OiA3MSwgdzogMTksIGg6IDE5IH0sXG4gICAgIHsgeDogNTcsIHk6IDcxLCB3OiAxOSwgaDogMTkgfSxcbiAgICAgeyB4OiA3NiwgeTogNzEsIHc6IDE5LCBoOiAxOSB9IF0sXG4gIG1vbnN0ZXIyOiBbIHsgeDogMCwgeTogOTAsIHc6IDMyLCBoOiAzMiB9LCB7IHg6IDMyLCB5OiA5MCwgdzogMzIsIGg6IDMyIH0gXSxcbiAgcGFnZTogWyB7IHg6IDAsIHk6IDEyMiwgdzogOCwgaDogOCB9IF0sXG4gIHBhcGVyOiBbIHsgeDogMCwgeTogMTMwLCB3OiAzMiwgaDogMzIgfSwgeyB4OiAzMiwgeTogMTMwLCB3OiAzMiwgaDogMzIgfSBdLFxuICBwYXJ0aWNsZXM6IFsgeyB4OiAwLCB5OiAxNjIsIHc6IDExLCBoOiAxMSB9IF0sXG4gIHBsYXllcjI6IFsgeyB4OiAwLCB5OiAxNzMsIHc6IDMyLCBoOiAzMiB9IF0sXG4gIHNhd2JsYWRlOiBbIHsgeDogMCwgeTogMjA1LCB3OiAxNywgaDogMTcgfSwgeyB4OiAxNywgeTogMjA1LCB3OiAxNywgaDogMTcgfSBdLFxuICBzcGFya2xlOiBbIHsgeDogMCwgeTogMjIyLCB3OiAxMSwgaDogMTEgfSBdLFxuICBzcGl0dGVyOlxuICAgWyB7IHg6IDAsIHk6IDIzMywgdzogMTksIGg6IDE5IH0sXG4gICAgIHsgeDogMTksIHk6IDIzMywgdzogMTksIGg6IDE5IH0sXG4gICAgIHsgeDogMzgsIHk6IDIzMywgdzogMTksIGg6IDE5IH0sXG4gICAgIHsgeDogNTcsIHk6IDIzMywgdzogMTksIGg6IDE5IH0sXG4gICAgIHsgeDogNzYsIHk6IDIzMywgdzogMTksIGg6IDE5IH0gXSxcbiAgdGlsZXNldDpcbiAgIFsgeyB4OiAwLCB5OiAyNTIsIHc6IDMyLCBoOiAzMiB9LFxuICAgICB7IHg6IDMyLCB5OiAyNTIsIHc6IDMyLCBoOiAzMiB9LFxuICAgICB7IHg6IDY0LCB5OiAyNTIsIHc6IDMyLCBoOiAzMiB9LFxuICAgICB7IHg6IDk2LCB5OiAyNTIsIHc6IDMyLCBoOiAzMiB9LFxuICAgICB7IHg6IDEyOCwgeTogMjUyLCB3OiAzMiwgaDogMzIgfSxcbiAgICAgeyB4OiAxNjAsIHk6IDI1MiwgdzogMzIsIGg6IDMyIH0sXG4gICAgIHsgeDogMTkyLCB5OiAyNTIsIHc6IDMyLCBoOiAzMiB9LFxuICAgICB7IHg6IDIyNCwgeTogMjUyLCB3OiAzMiwgaDogMzIgfSBdLFxuICB3YWxsczI6XG4gICBbIHsgeDogMCwgeTogMjg0LCB3OiA0NiwgaDogNDYgfSxcbiAgICAgeyB4OiA0NiwgeTogMjg0LCB3OiA0NiwgaDogNDYgfSxcbiAgICAgeyB4OiA5MiwgeTogMjg0LCB3OiA0NiwgaDogNDYgfSxcbiAgICAgeyB4OiAxMzgsIHk6IDI4NCwgdzogNDYsIGg6IDQ2IH0sXG4gICAgIHsgeDogMTg0LCB5OiAyODQsIHc6IDQ2LCBoOiA0NiB9LFxuICAgICB7IHg6IDIzMCwgeTogMjg0LCB3OiA0NiwgaDogNDYgfSxcbiAgICAgeyB4OiAyNzYsIHk6IDI4NCwgdzogNDYsIGg6IDQ2IH0gXSB9XG4vKiA8L2dlbmVyYXRlZD4gKi9cbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgQ29uc3RhbnRzIGFzIEMgfSBmcm9tICcuL0NvbnN0YW50cyc7XG5pbXBvcnQgeyBDYW52YXMgfSBmcm9tICcuL0NhbnZhcyc7XG5pbXBvcnQgeyBTcHJpdGVTaGVldCB9IGZyb20gJy4vU3ByaXRlU2hlZXQtZ2VuJztcblxuLy8gVGhlIHNwcml0ZXNoZWV0IGlzIHByb2R1Y2VkIGR1cmluZyB0aGUgZ3VscCBidWlsZFxuY29uc3QgU1BSSVRFU0hFRVRfVVJJID0gJ3Nwcml0ZXMucG5nJztcblxuLyoqXG4gKiBTcHJpdGVzIVxuICpcbiAqIEZvciB0aGlzIGdhbWUsIGEgXCJzcHJpdGVcIiBpcyBhIGxpdHRsZSBvYmplY3QgdGhhdCBoYXMgYW4gYXR0YWNoZWQgaW1hZ2UsIGFuIGFuY2hvclxuICogcG9pbnQsIGEgYm91bmRpbmcgYm94LCBhbmQgYW4gb3B0aW9uYWwgaGl0IGJveC4gVGhpcyBrZWVwcyBwaXhlbC1sZXZlbCBkYXRhIGFib3V0XG4gKiB0aGUgaW1hZ2UgYWxsIGluIG9uZSBwbGFjZSAoYnkgcGFzc2luZyBhIFNwcml0ZSBhcm91bmQsIHdlIGtub3cgd2hhdCBpbWFnZSB0byBkcmF3LFxuICogd2hhdCBwb2ludCBpbiB0aGUgaW1hZ2UgdG8gcm90YXRlIGFyb3VuZCwgd2hhdCBhcmVhcyBvZiB0aGUgaW1hZ2UgY2FuIGdldCBoaXQgYnlcbiAqIHRoaW5ncywgYW5kIHdoYXQgYXJlYXMgY2FuIGhpdCBvdGhlciB0aGluZ3MpLlxuICpcbiAqIFdoZXRoZXIgdGhlIGJvdW5kaW5nIGJveCBvciBoaXRib3ggZG8gYW55dGhpbmcgaXNuJ3QgdXAgdG8gdGhlIFNwcml0ZSwgaXQgd291bGQgYmVcbiAqIHVwIHRvIHRoZSBGcmFtZSB0aGF0IHJlZmVyZW5jZXMgaXQuIChUaGlzIGlzIGhlbHBmdWwgYmVjYXVzZSBpdCdzIGNvbnZlbmllbnQgZm9yXG4gKiBhIHNpbXBsZSBnYW1lIGxpa2UgdGhpcyB0byBoYXZlIG9ubHkgb25lIGhpdCBmcmFtZSwgYnV0IHRoZSBhbmltYXRpb24gbWF5IGNhbGxcbiAqIGZvciBzaG93aW5nIHRoZSBzd29yZCBzd2lwZSBmb3IgNS02IGZyYW1lcy4pXG4gKi9cbmV4cG9ydCBjbGFzcyBTcHJpdGUge1xuICAvKipcbiAgICogQSBzbWFsbCBoZWxwZXIgdGhhdCBkcmF3cyBhIHNwcml0ZSBvbnRvIGEgY2FudmFzLCByZXNwZWN0aW5nIHRoZSBhbmNob3IgcG9pbnQgb2ZcbiAgICogdGhlIHNwcml0ZS4gTm90ZSB0aGF0IHRoZSBjYW52YXMgc2hvdWxkIGJlIFBSRS1UUkFOU0xBVEVEIGFuZCBQUkUtUk9UQVRFRCwgaWZcbiAgICogdGhhdCdzIGFwcHJvcHJpYXRlIVxuICAgKi9cbiAgc3RhdGljIGRyYXdTcHJpdGUoY3R4LCBzcHJpdGUsIHUsIHYpIHtcbiAgICBjdHguZHJhd0ltYWdlKHNwcml0ZS5pbWcsIHUgLSBzcHJpdGUuYW5jaG9yLngsIHYgLSBzcHJpdGUuYW5jaG9yLnkpO1xuICB9XG5cbiAgc3RhdGljIGRyYXdWaWV3cG9ydFNwcml0ZSh2aWV3cG9ydCwgc3ByaXRlLCBzcHJpdGVQb3MsIGNhbWVyYVBvcykge1xuICAgIGxldCB7IHUsIHYgfSA9IHRoaXMudmlld3BvcnRTcHJpdGUydXYodmlld3BvcnQsIHNwcml0ZSwgc3ByaXRlUG9zLCBjYW1lcmFQb3MpO1xuICAgIHZpZXdwb3J0LmN0eC5kcmF3SW1hZ2Uoc3ByaXRlLmltZywgdSwgdik7XG4gIH1cblxuICBzdGF0aWMgdmlld3BvcnRTcHJpdGUydXYodmlld3BvcnQsIHNwcml0ZSwgc3ByaXRlUG9zLCBjYW1lcmFQb3MpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdTogc3ByaXRlUG9zLnggLSBzcHJpdGUuYW5jaG9yLnggLSBjYW1lcmFQb3MueCArIHZpZXdwb3J0LmNlbnRlci51LFxuICAgICAgdjogc3ByaXRlUG9zLnkgLSBzcHJpdGUuYW5jaG9yLnkgLSBjYW1lcmFQb3MueSArIHZpZXdwb3J0LmNlbnRlci52XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3IGEgc3ByaXRlJ3MgYm91bmRpbmcgYm94LCBmb3IgZGVidWdnaW5nLCB1c2luZyB0aGUgc2FtZSBydWxlcyBhcyBkcmF3U3ByaXRlLlxuICAgKi9cbiAgc3RhdGljIGRyYXdCb3VuZGluZ0JveChjdHgsIHNwcml0ZSwgeCwgeSkge1xuICAgIGN0eC5zdHJva2VTdHlsZSA9ICdyZ2JhKDAsIDI1NSwgMCwgMC41KSc7XG4gICAgY3R4LnN0cm9rZVJlY3QoXG4gICAgICB4IC0gc3ByaXRlLmFuY2hvci54ICsgc3ByaXRlLmJib3hbMF0ueCxcbiAgICAgIHkgLSBzcHJpdGUuYW5jaG9yLnkgKyBzcHJpdGUuYmJveFswXS55LFxuICAgICAgc3ByaXRlLmJib3hbMV0ueCAtIHNwcml0ZS5iYm94WzBdLngsXG4gICAgICBzcHJpdGUuYmJveFsxXS55IC0gc3ByaXRlLmJib3hbMF0ueVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogRHJhdyBhIHNwcml0ZSdzIGhpdCBib3gsIGZvciBkZWJ1Z2dpbmcsIHVzaW5nIHRoZSBzYW1lIHJ1bGVzIGFzIGRyYXdTcHJpdGUuXG4gICAqL1xuICBzdGF0aWMgZHJhd0hpdEJveChjdHgsIHNwcml0ZSwgeCwgeSkge1xuICAgIGlmIChzcHJpdGUuaGJveCkge1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJ3JnYmEoMjU1LCAwLCAwLCAwLjcpJztcbiAgICAgIGN0eC5zdHJva2VSZWN0KFxuICAgICAgICB4IC0gc3ByaXRlLmFuY2hvci54ICsgc3ByaXRlLmhib3hbMF0ueCxcbiAgICAgICAgeSAtIHNwcml0ZS5hbmNob3IueSArIHNwcml0ZS5oYm94WzBdLnksXG4gICAgICAgIHNwcml0ZS5oYm94WzFdLnggLSBzcHJpdGUuaGJveFswXS54LFxuICAgICAgICBzcHJpdGUuaGJveFsxXS55IC0gc3ByaXRlLmhib3hbMF0ueVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0Qm91bmRpbmdDaXJjbGUoc3ByaXRlLCB4LCB5KSB7XG4gICAgbGV0IGR4ID0gc3ByaXRlLmJib3hbMV0ueCAtIHNwcml0ZS5iYm94WzBdLng7XG4gICAgbGV0IGR5ID0gc3ByaXRlLmJib3hbMV0ueSAtIHNwcml0ZS5iYm94WzBdLnk7XG4gICAgbGV0IHIgPSAoZHggPiBkeSA/IGR4IDogZHkpIC8gMjtcbiAgICByZXR1cm4ge1xuICAgICAgeDogeCAtIHNwcml0ZS5hbmNob3IueCArIChzcHJpdGUuYmJveFswXS54ICsgc3ByaXRlLmJib3hbMV0ueCkgLyAyLFxuICAgICAgeTogeSAtIHNwcml0ZS5hbmNob3IueSArIChzcHJpdGUuYmJveFswXS55ICsgc3ByaXRlLmJib3hbMV0ueSkgLyAyLFxuICAgICAgclxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0Qm91bmRpbmdCb3hQb2x5Z29uKHNwcml0ZSwgeCwgeSkge1xuICAgIHJldHVybiB0aGlzLmdldFNwcml0ZUJveFBvbHlnb24oc3ByaXRlLmFuY2hvciwgc3ByaXRlLmJib3gsIHgsIHkpO1xuICB9XG5cbiAgc3RhdGljIGdldEhpdEJveFBvbHlnb24oc3ByaXRlLCB4LCB5KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3ByaXRlQm94UG9seWdvbihzcHJpdGUuYW5jaG9yLCBzcHJpdGUuaGJveCwgeCwgeSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0U3ByaXRlQm94UG9seWdvbihhbmNob3IsIGJveCwgeCwgeSkge1xuICAgIHJldHVybiB7XG4gICAgICB4OiB4LFxuICAgICAgeTogeSxcbiAgICAgIHA6IFtcbiAgICAgICAgeyB4OiBib3hbMF0ueCAtIGFuY2hvci54LCB5OiBib3hbMF0ueSAtIGFuY2hvci55IH0sXG4gICAgICAgIHsgeDogYm94WzFdLnggLSBhbmNob3IueCwgeTogYm94WzBdLnkgLSBhbmNob3IueSB9LFxuICAgICAgICB7IHg6IGJveFsxXS54IC0gYW5jaG9yLngsIHk6IGJveFsxXS55IC0gYW5jaG9yLnkgfSxcbiAgICAgICAgeyB4OiBib3hbMF0ueCAtIGFuY2hvci54LCB5OiBib3hbMV0ueSAtIGFuY2hvci55IH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG5cbi8qKlxuICogVGhlIEFzc2V0cyBtb2R1bGUgbG9hZHMgcmF3IFBOR3Mgd2UnbGwgdXNlIHRvIGRyYXcgdGhlIGdhbWUsIGRvZXMgYW55IHBvc3Rwcm9jZXNzaW5nIHN0dWZmXG4gKiB3ZSBtaWdodCBuZWVkIHRvIGRvLCBhbmQgdGhlbiBzYXZlcyByZWZlcmVuY2VzIHRvIHRoZW0gZm9yIGxhdGVyLlxuICovXG5leHBvcnQgY2xhc3MgQXNzZXRzIHtcbiAgc3RhdGljIGFzeW5jIGluaXQoKSB7XG4gICAgdGhpcy5pbWFnZXMgPSB7fTtcbiAgICBhd2FpdCB0aGlzLmxvYWRJbWFnZShTUFJJVEVTSEVFVF9VUkkpO1xuXG4gICAgLy8gQmFzZSBQaXhlbCBGb250IChzZWUgYFRleHQuaW5pdGAgZm9yIGFkZGl0aW9uYWwgbWFuaXB1bGF0aW9uKVxuICAgIFNwcml0ZS5mb250ID0gdGhpcy5pbml0QmFzaWNTcHJpdGUoU3ByaXRlU2hlZXQuZm9udFswXSk7XG5cbiAgICAvLyBQbGF5ZXJcbiAgICBTcHJpdGUucGxheWVyID0gdGhpcy5pbml0QmFzaWNTcHJpdGUoU3ByaXRlU2hlZXQucGxheWVyMlswXSk7XG5cbiAgICAvLyBCdWxsZXRzXG4gICAgU3ByaXRlLmJ1bGxldCA9IHRoaXMuaW5pdEJhc2ljU3ByaXRlKFNwcml0ZVNoZWV0LmJ1bGxldFswXSk7XG5cbiAgICAvLyBFbmVteVxuICAgIFNwcml0ZS5tb25zdGVyID0gdGhpcy5pbml0QmFzaWNTcHJpdGUoU3ByaXRlU2hlZXQubW9uc3RlcjJbMF0pO1xuICAgIFNwcml0ZS5tb25zdGVyX2RlYWQgPSB0aGlzLmluaXRCYXNpY1Nwcml0ZShTcHJpdGVTaGVldC5tb25zdGVyMlswXSk7XG5cbiAgICAvLyBHVUlcbiAgICBTcHJpdGUuaHVkX3NoZWxsc19lbXB0eSA9IHRoaXMuaW5pdEJhc2ljU3ByaXRlKFNwcml0ZVNoZWV0Lmh1ZF9zaGVsbHNbMF0pO1xuICAgIFNwcml0ZS5odWRfc2hlbGxzX2Z1bGwgPSB0aGlzLmluaXRCYXNpY1Nwcml0ZShTcHJpdGVTaGVldC5odWRfc2hlbGxzWzFdKTtcbiAgICBTcHJpdGUuaHVkX2hlYWx0aF9mcmFtZSA9IHRoaXMuaW5pdEJhc2ljU3ByaXRlKFNwcml0ZVNoZWV0Lmh1ZF9oZWFsdGhiYXJbMF0pO1xuICAgIFNwcml0ZS5odWRfaGVhbHRoX2ZpbGwgPSB0aGlzLmluaXRCYXNpY1Nwcml0ZShTcHJpdGVTaGVldC5odWRfaGVhbHRoYmFyWzFdKTtcbiAgICBTcHJpdGUuaHVkX2hlYWx0aF9jaHVuayA9IHRoaXMuaW5pdEJhc2ljU3ByaXRlKFNwcml0ZVNoZWV0Lmh1ZF9oZWFsdGhiYXJbMl0pO1xuICAgIFNwcml0ZS5odWRfY3Jvc3NoYWlyID0gdGhpcy5pbml0QmFzaWNTcHJpdGUoU3ByaXRlU2hlZXQuaHVkX2Nyb3NzaGFpclswXSk7XG5cbiAgICBTcHJpdGUuc2F3YmxhZGUgPSB0aGlzLmluaXRCYXNpY1Nwcml0ZShTcHJpdGVTaGVldC5zYXdibGFkZVswXSk7XG4gICAgU3ByaXRlLnNhd2JsYWRlX2V5ZXMgPSB0aGlzLmluaXRCYXNpY1Nwcml0ZShTcHJpdGVTaGVldC5zYXdibGFkZVsxXSk7XG5cbiAgICAvLyBQYWdlc1xuICAgIFNwcml0ZS5wYWdlID0gYXdhaXQgdGhpcy5pbml0QmFzaWNTcHJpdGUoU3ByaXRlU2hlZXQucGFnZVswXSk7XG5cbiAgICBTcHJpdGUuYmF0dGxlX3N0cmVhbSA9IFNwcml0ZVNoZWV0LmJhdHRsZV9zdHJlYW0ubWFwKGRhdGEgPT4gdGhpcy5pbml0QmFzaWNTcHJpdGUoZGF0YSkpO1xuICAgIFNwcml0ZS5iYXR0bGVfc3ByYXkgPSBTcHJpdGVTaGVldC53YWxsczIuc2xpY2UoNCwgNykubWFwKGRhdGEgPT4gdGhpcy5pbml0QmFzaWNTcHJpdGUoZGF0YSkpO1xuICAgIFNwcml0ZS5iYXR0bGVfZG9vciA9IFNwcml0ZVNoZWV0LndhbGxzMi5zbGljZSgxLCA0KS5tYXAoZGF0YSA9PiB0aGlzLmluaXRCYXNpY1Nwcml0ZShkYXRhKSk7XG5cbiAgICAvLyBUaWxlc1xuICAgIFNwcml0ZS50aWxlcyA9IFtdO1xuICAgIFNwcml0ZS50aWxlc1tDLlRJTEVfRkxPT1IxXSA9IHRoaXMuaW5pdEJhc2ljU3ByaXRlKFNwcml0ZVNoZWV0LnRpbGVzZXRbMl0pO1xuICAgIFNwcml0ZS50aWxlc1tDLlRJTEVfV0FMTDFdID0gdGhpcy5pbml0QmFzaWNTcHJpdGUoU3ByaXRlU2hlZXQudGlsZXNldFswXSk7XG4gICAgU3ByaXRlLnRpbGVzW0MuVElMRV9XQUxMMl0gPSB0aGlzLmluaXRCYXNpY1Nwcml0ZShTcHJpdGVTaGVldC50aWxlc2V0WzFdKTtcblxuICAgIC8vIFdhbGxzXG4gICAgU3ByaXRlLndhbGxzID0gdGhpcy5pbml0QmFzaWNTcHJpdGUoU3ByaXRlU2hlZXQud2FsbHMyWzBdKTtcblxuICAgIFNwcml0ZS5iYXR0bGVfYmcgPSB0aGlzLmluaXREeW5hbWljU3ByaXRlKHRoaXMuY3JlYXRlQmF0dGxlQmFja2dyb3VuZCgpKTtcbiAgfTtcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSBhIHNwcml0ZSBieSBsb2FkaW5nIGl0IGZyb20gYSBwYXJ0aWN1bGFyIHNsaWNlIG9mIHRoZSBnaXZlbiBpbWFnZS4gUHJvdmlkZXNcbiAgICogXCJzZW5zaWJsZVwiIGRlZmF1bHRzIGZvciBib3VuZGluZyBib3ggYW5kIGFuY2hvciBwb2ludCBpZiBub3QgcHJvdmlkZWQuXG4gICAqL1xuICBzdGF0aWMgaW5pdEJhc2ljU3ByaXRlKGRhdGEsIG9wdHMpIHtcbiAgICByZXR1cm4gdGhpcy5pbml0RHluYW1pY1Nwcml0ZSh0aGlzLmxvYWRDYWNoZVNsaWNlKFNQUklURVNIRUVUX1VSSSwgZGF0YS54LCBkYXRhLnksIGRhdGEudywgZGF0YS5oKSwgb3B0cyk7XG4gIH1cblxuICBzdGF0aWMgcm90YXRlSW1hZ2Uoc291cmNlLCByYWQpIHtcbiAgICBsZXQgY2FudmFzID0gbmV3IENhbnZhcyhzb3VyY2Uud2lkdGgsIHNvdXJjZS5oZWlnaHQpO1xuICAgIGNhbnZhcy5jdHgudHJhbnNsYXRlKHNvdXJjZS53aWR0aCAvIDIsIHNvdXJjZS5oZWlnaHQgLyAyKTtcbiAgICBjYW52YXMuY3R4LnJvdGF0ZShyYWQpO1xuICAgIGNhbnZhcy5jdHgudHJhbnNsYXRlKC1zb3VyY2Uud2lkdGggLyAyLCAtc291cmNlLmhlaWdodCAvIDIpO1xuICAgIGNhbnZhcy5jdHguZHJhd0ltYWdlKHNvdXJjZSwgMCwgMCk7XG4gICAgcmV0dXJuIGNhbnZhcy5jYW52YXM7XG4gIH1cblxuICBzdGF0aWMgb3ZlcmxheSguLi5zb3VyY2VzKSB7XG4gICAgbGV0IGNhbnZhcyA9IG5ldyBDYW52YXMoc291cmNlc1swXS53aWR0aCwgc291cmNlc1swXS5oZWlnaHQpO1xuICAgIGZvciAobGV0IHNvdXJjZSBvZiBzb3VyY2VzKSB7XG4gICAgICBjYW52YXMuY3R4LmRyYXdJbWFnZShzb3VyY2UsIDAsIDApO1xuICAgIH1cbiAgICByZXR1cm4gY2FudmFzLmNhbnZhcztcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIGEgc3ByaXRlIGJ5IHBhc3NpbmcgaXQgYSBwcmUtZGVmaW5lZCBpbWFnZSBzb3VyY2UgKHByb2JhYmx5IGdlbmVyYXRlZCBkeW5hbWljYWxseSkuXG4gICAqIFByb3ZpZGVzIFwic2Vuc2libGVcIiBkZWZhdWx0cyBmb3IgYm91bmRpbmcgYm94IGFuZCBhbmNob3IgcG9pbnQgaWYgbm90IHByb3ZpZGVkLlxuICAgKi9cbiAgc3RhdGljIGluaXREeW5hbWljU3ByaXRlKHNvdXJjZSwgb3B0cykge1xuICAgIGxldCB3ID0gc291cmNlLndpZHRoLCBoID0gc291cmNlLmhlaWdodDtcblxuICAgIHJldHVybiB7XG4gICAgICBpbWc6IHNvdXJjZSxcbiAgICAgIGFuY2hvcjogKG9wdHMgJiYgb3B0cy5hbmNob3IpIHx8IHsgeDogTWF0aC5mbG9vcih3IC8gMiksIHk6IE1hdGguZmxvb3IoaCAvIDIpIH0sXG4gICAgICBiYm94OiAob3B0cyAmJiBvcHRzLmJib3gpIHx8IFt7eDogMCwgeTogMCB9LCB7IHg6IHcsIHk6IGggfV0sXG4gICAgICBoYm94OiBvcHRzICYmIG9wdHMuaGJveFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBoZWxwZXIgbWV0aG9kIHJldHJpZXZlcyBhIGNhY2hlZCBpbWFnZSwgY3V0cyB0aGUgc3BlY2lmaWVkIHNsaWNlIG91dCBvZiBpdCwgYW5kIHJldHVybnMgaXQuXG4gICAqL1xuICBzdGF0aWMgbG9hZENhY2hlU2xpY2UodXJpLCB4LCB5LCB3LCBoKSB7XG4gICAgLy9jb25zdCBzb3VyY2UgPSBhd2FpdCB0aGlzLmxvYWRJbWFnZSh1cmkpO1xuICAgIGNvbnN0IHNvdXJjZSA9IHRoaXMuaW1hZ2VzW3VyaV07XG4gICAgY29uc3Qgc2xpY2VDYW52YXMgPSBuZXcgQ2FudmFzKHcsIGgpO1xuICAgIHNsaWNlQ2FudmFzLmN0eC5kcmF3SW1hZ2Uoc291cmNlLCB4LCB5LCB3LCBoLCAwLCAwLCB3LCBoKTtcbiAgICByZXR1cm4gc2xpY2VDYW52YXMuY2FudmFzO1xuICB9XG5cbiAgLyoqXG4gICAqIExvYWQgdGhlIGltYWdlIGZyb20gdGhlIGdpdmVuIFVSSSBhbmQgY2FjaGUgaXQuXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgbG9hZEltYWdlKHVyaSkge1xuICAgIGlmICh0aGlzLmltYWdlc1t1cmldKSByZXR1cm4gdGhpcy5pbWFnZXNbdXJpXTtcblxuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICAgIGltYWdlLm9ubG9hZCA9ICgpID0+IHJlc29sdmUoaW1hZ2UpO1xuICAgICAgaW1hZ2Uub25lcnJvciA9IChlcnIpID0+IHJlamVjdChlcnIpO1xuICAgICAgaW1hZ2Uuc3JjID0gdXJpO1xuICAgICAgdGhpcy5pbWFnZXNbdXJpXSA9IGltYWdlO1xuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZUJhdHRsZUJhY2tncm91bmQoKSB7XG4gICAgbGV0IGNhbnZhcyA9IG5ldyBDYW52YXMoNTAwLCAzMDApO1xuICAgIGxldCBncmFkaWVudCA9IGNhbnZhcy5jdHguY3JlYXRlTGluZWFyR3JhZGllbnQoMCwgMCwgMCwgMjcwKTtcbiAgICBncmFkaWVudC5hZGRDb2xvclN0b3AoMCwgJ3JnYmEoMTI4LDIwLDIwLDEpJyk7XG4gICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKDEsICdyZ2JhKDE5MSwzMSwzMSwxKScpO1xuICAgIGNhbnZhcy5jdHguZmlsbFN0eWxlID0gZ3JhZGllbnQ7XG4gICAgY2FudmFzLmN0eC5maWxsUmVjdCgwLCAwLCA1MDAsIDMwMCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1MDA7IGkrKykge1xuICAgICAgY2FudmFzLmN0eC5jbGVhclJlY3QoaSwgMjk5IC0gTWF0aC5yYW5kb20oKSAqIDIwLCAzLCAzMCk7XG4gICAgfVxuICAgIHJldHVybiBjYW52YXMuY2FudmFzO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IElucHV0IH0gZnJvbSAnLi9JbnB1dCc7XG5cbi8vIEEgZmV3IHF1aWNrIGNvbnN0YW50cyAoMCosIDQ1KiwgOTAqKVxuY29uc3QgQTAwID0gMDtcbmNvbnN0IEE0NSA9IDAuNzA3MTA2NzgxMTg2NTQ3NTtcbmNvbnN0IEE5MCA9IDE7XG5cbi8qKlxuICogS2V5Ym9hcmRBZGFwdGVyXG4gKlxuICogTWFwcyBrZXlib2FyZCBpbnB1dHMgdG8gZ2FtZSBpbnB1dHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBLZXlib2FyZEFkYXB0ZXIge1xuICBjb25zdHJ1Y3RvcihoYW5kbGVyKSB7XG4gICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcblxuICAgIC8vIEtleSBNYXBwaW5nOiAgICAgIEFDVElPTiAgICAgICAgICAgIC8vIEtleVxuICAgIHRoaXMubWFwID0gW107XG4gICAgdGhpcy5tYXBbODhdID0gSW5wdXQuQWN0aW9uLkFUVEFDSzsgICAgLy8gW1hdXG4gICAgdGhpcy5tYXBbOTBdID0gSW5wdXQuQWN0aW9uLkRFRkxFQ1Q7ICAgLy8gW1pdXG4gICAgdGhpcy5tYXBbNjddID0gSW5wdXQuQWN0aW9uLkRPREdFOyAgICAgLy8gW0NdXG4gICAgdGhpcy5tYXBbMzJdID0gSW5wdXQuQWN0aW9uLlNVUEVSOyAgICAgLy8gW1NQQUNFQkFSXVxuICAgIHRoaXMubWFwWzM4XSA9IElucHV0LkFjdGlvbi5VUDsgICAgICAgIC8vIFtVcEFycm93XVxuICAgIHRoaXMubWFwWzQwXSA9IElucHV0LkFjdGlvbi5ET1dOOyAgICAgIC8vIFtEb3duQXJyb3ddXG4gICAgdGhpcy5tYXBbMzddID0gSW5wdXQuQWN0aW9uLkxFRlQ7ICAgICAgLy8gW0xlZnRBcnJvd11cbiAgICB0aGlzLm1hcFszOV0gPSBJbnB1dC5BY3Rpb24uUklHSFQ7ICAgICAvLyBbUmlnaHRBcnJvd11cbiAgICB0aGlzLm1hcFs4N10gPSBJbnB1dC5BY3Rpb24uVVA7ICAgICAgICAvLyBbV11cbiAgICB0aGlzLm1hcFs4M10gPSBJbnB1dC5BY3Rpb24uRE9XTjsgICAgICAvLyBbU11cbiAgICB0aGlzLm1hcFs2NV0gPSBJbnB1dC5BY3Rpb24uTEVGVDsgICAgICAvLyBbQV1cbiAgICB0aGlzLm1hcFs2OF0gPSBJbnB1dC5BY3Rpb24uUklHSFQ7ICAgICAvLyBbRF1cbiAgICB0aGlzLm1hcFsyN10gPSBJbnB1dC5BY3Rpb24uTUVOVTsgICAgICAvLyBbRVNDXVxuICAgIHRoaXMubWFwWzc3XSA9IElucHV0LkFjdGlvbi5NVVRFOyAgICAgIC8vIFtNXVxuICAgIHRoaXMubWFwWzcwXSA9IElucHV0LkFjdGlvbi5GUkVFWkU7ICAgIC8vIFtGXVxuICAgIHRoaXMubWFwWzgwXSA9IElucHV0LkFjdGlvbi5GUkVFWkU7ICAgIC8vIFtQXVxuXG4gICAgLy8gRm9yIGtleWJvYXJkLCB3ZSBzdXBwb3J0IDgtcG9pbnQgbW92ZW1lbnQgKFMsIEUsIFNFLCBldGMuKVxuICAgIHRoaXMuYXJyb3dEaXJlY3Rpb25zID0gW1xuICAgICAgeyB4OiAgQTAwLCB5OiAgQTAwLCBtOiAwIH0sXG4gICAgICB7IHg6ICBBMDAsIHk6IC1BOTAsIG06IDEgfSxcbiAgICAgIHsgeDogIEEwMCwgeTogIEE5MCwgbTogMSB9LFxuICAgICAgeyB4OiAgQTAwLCB5OiAgQTAwLCBtOiAwIH0sXG4gICAgICB7IHg6IC1BOTAsIHk6ICBBMDAsIG06IDEgfSxcbiAgICAgIHsgeDogLUE0NSwgeTogLUE0NSwgbTogMSB9LFxuICAgICAgeyB4OiAtQTQ1LCB5OiAgQTQ1LCBtOiAxIH0sXG4gICAgICB7IHg6IC1BOTAsIHk6ICBBMDAsIG06IDEgfSxcbiAgICAgIHsgeDogIEE5MCwgeTogIEEwMCwgbTogMSB9LFxuICAgICAgeyB4OiAgQTQ1LCB5OiAtQTQ1LCBtOiAxIH0sXG4gICAgICB7IHg6ICBBNDUsIHk6ICBBNDUsIG06IDEgfSxcbiAgICAgIHsgeDogIEE5MCwgeTogIEEwMCwgbTogMSB9LFxuICAgICAgeyB4OiAgQTAwLCB5OiAgQTAwLCBtOiAwIH0sXG4gICAgICB7IHg6ICBBMDAsIHk6IC1BOTAsIG06IDEgfSxcbiAgICAgIHsgeDogIEEwMCwgeTogIEE5MCwgbTogMSB9LFxuICAgICAgeyB4OiAgQTAwLCB5OiAgQTAwLCBtOiAwIH1cbiAgICBdO1xuXG4gICAgdGhpcy5oZWxkID0gW107XG5cbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cblxuICBhc3luYyBpbml0KCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZXZlbnQgPT4ge1xuICAgICAgbGV0IGsgPSB0aGlzLm1hcFtldmVudC5rZXlDb2RlXTtcbiAgICAgIGNvbnNvbGUubG9nKGV2ZW50LmtleUNvZGUpO1xuICAgICAgaWYgKGspIHtcbiAgICAgICAgdGhpcy5oZWxkW2tdID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gSGFjayAtIGZpcnN0IGtleSBwcmVzc2VkIGluIHdpbmRvdyB3aWxsIGluaXRpYWxpemUgdGhlIGF1ZGlvLlxuICAgICAgLy9nYW1lLmF1ZGlvLmluaXQoKTtcbiAgICB9KTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGV2ZW50ID0+IHtcbiAgICAgIGxldCBrID0gdGhpcy5tYXBbZXZlbnQua2V5Q29kZV07XG4gICAgICBpZiAoaykge1xuICAgICAgICB0aGlzLmhlbGRba10gPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICAvLyBGb3Iga2V5Ym9hcmRzLCB3ZSB3YW50IHRvIGNvbnZlcnQgdGhlIHN0YXRlIG9mIHRoZSB2YXJpb3VzIGFycm93IGtleXMgYmVpbmcgaGVsZCBkb3duXG4gICAgLy8gaW50byBhIGRpcmVjdGlvbmFsIHZlY3Rvci4gV2UgdXNlIHRoZSBicm93c2VyJ3MgZXZlbnQgdG8gaGFuZGxlIHRoZSBoZWxkIHN0YXRlIG9mXG4gICAgLy8gdGhlIG90aGVyIGFjdGlvbiBidXR0b25zLCBzbyB3ZSBkb24ndCBuZWVkIHRvIHByb2Nlc3MgdGhlbSBoZXJlLlxuICAgIGxldCBzdGF0ZSA9ICh0aGlzLmhlbGRbSW5wdXQuQWN0aW9uLlVQXSA/IDEgOiAwKSArXG4gICAgICAgICAgICAgICAgKHRoaXMuaGVsZFtJbnB1dC5BY3Rpb24uRE9XTl0gPyAyIDogMCkgK1xuICAgICAgICAgICAgICAgICh0aGlzLmhlbGRbSW5wdXQuQWN0aW9uLkxFRlRdID8gNCA6IDApICtcbiAgICAgICAgICAgICAgICAodGhpcy5oZWxkW0lucHV0LkFjdGlvbi5SSUdIVF0gPyA4IDogMCk7XG5cbiAgICB0aGlzLmRpcmVjdGlvbiA9IHRoaXMuYXJyb3dEaXJlY3Rpb25zW3N0YXRlXTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuZGlyZWN0aW9uID0gdGhpcy5hcnJvd0RpcmVjdGlvbnNbMF07XG4gICAgZm9yIChsZXQgYWN0aW9uIG9mIE9iamVjdC52YWx1ZXMoSW5wdXQuQWN0aW9uKSkge1xuICAgICAgdGhpcy5oZWxkW2FjdGlvbl0gPSBmYWxzZTtcbiAgICB9XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgR0FNRV9XSURUSCA9IDQ4MDtcbmNvbnN0IEdBTUVfSEVJR0hUID0gMjcwO1xuXG4vKipcbiogVmlld3BvcnRcbipcbiogUmVwcmVzZW50cyB0aGUgZ2FtZSBkaXNwbGF5IChmb3IgdXMsIGEgY2FudmFzKS5cbiovXG5leHBvcnQgY2xhc3MgVmlld3BvcnQge1xuICBhc3luYyBpbml0KCkge1xuICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhbnZhcycpO1xuICAgIHRoaXMuY3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICB0aGlzLnJlc2l6ZSh0cnVlKTtcbiAgfVxuXG4gIC8vIFJlc2l6ZSB0aGUgY2FudmFzIHRvIGdpdmUgdXMgYXBwcm94aW1hdGVseSBvdXIgZGVzaXJlZCBnYW1lIGRpc3BsYXkgc2l6ZS5cbiAgLy9cbiAgLy8gUmF0aGVyIHRoYW4gYXR0ZW1wdCB0byBleHBsYWluIGl0LCBoZXJlJ3MgYSBjb25jcmV0ZSBleGFtcGxlOlxuICAvL1xuICAvLyAgICAgd2Ugc3RhcnQgd2l0aCBhIGRlc2lyZWQgZ2FtZSBkaW1lbnNpb246ICAgNDgweDI3MHB4XG4gIC8vICAgICAgICAgIGdldCB0aGUgYWN0dWFsIGJyb3dzZXIgZGltZW5zaW9uczogIDEzMDl4NDY4cHhcbiAgLy8gICAgICAgICAgZmFjdG9yIGluIHRoZSBkaXNwbGF5J3MgRFBJIHJhdGlvOiAgMjYxOHg5MzZweFxuICAvLyAgICAgICAgIG5vdyBjYWxjdWxhdGUgdGhlIGhvcml6b250YWwgc2NhbGU6ICAgICAgIDUuNDV4XG4gIC8vICAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSB2ZXJ0aWNhbCBzY2FsZTogICAgICAgMy40NnhcbiAgLy8gICAgICAgICAgICBvdXIgbmV3IG9mZmljYWwgZ2FtZSBzY2FsaW5nIGlzOiAgICAgICAgNS40eFxuICAvLyAgICAgICBhbmQgb3VyIG9mZmljaWFsIHZpZXdwb3J0IGRpbWVuc2lvbnM6ICAgNDg0eDE3M3B4XG4gIC8vXG4gIC8vIFRoaXMgYXBwcm9hY2ggZW1waGFzaXplcyBjb3JyZWN0IGFzcGVjdCByYXRpbyBhbmQgbWFpbnRhaW5zIGZ1bGwtd2luZG93IHJlbmRlcmluZywgYXRcbiAgLy8gdGhlIHBvdGVudGlhbCBjb3N0IG9mIGxpbWl0aW5nIHZpc2liaWxpdHkgb2YgdGhlIGdhbWUgaXRzZWxmIGluIGVpdGhlciB0aGUgWCBvciBZIGF4aXMuXG4gIC8vIElmIHlvdSB1c2UgdGhpcyBhcHByb2FjaCwgbWFrZSBzdXJlIHlvdXIgR1VJIGNhbiBcImZsb2F0XCIgKG90aGVyd2lzZSB0aGVyZSBtYXkgYmUgd2hvbGVcbiAgLy8gVUkgZWxlbWVudHMgdGhlIHBsYXllciBjYW5ub3Qgc2VlISkuXG4gIHJlc2l6ZShmb3JjZSkge1xuICAgIGxldCBkcGkgPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICBsZXQgd2lkdGggPSB0aGlzLmNhbnZhcy5jbGllbnRXaWR0aDtcbiAgICBsZXQgaGVpZ2h0ID0gdGhpcy5jYW52YXMuY2xpZW50SGVpZ2h0O1xuICAgIGxldCBkcGlXaWR0aCA9IHdpZHRoICogZHBpO1xuICAgIGxldCBkcGlIZWlnaHQgPSBoZWlnaHQgKiBkcGk7XG5cbiAgICBpZiAoZm9yY2UgfHwgdGhpcy5jYW52YXMud2lkdGggIT09IGRwaVdpZHRoIHx8IHRoaXMuY2FudmFzLmhlaWdodCAhPT0gZHBpSGVpZ2h0KSB7XG4gICAgICB0aGlzLmNhbnZhcy53aWR0aCA9IGRwaVdpZHRoO1xuICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gZHBpSGVpZ2h0O1xuXG4gICAgICB0aGlzLnNjYWxlID0gKE1hdGguZmxvb3IoTWF0aC5tYXgoZHBpV2lkdGggLyBHQU1FX1dJRFRILCBkcGlIZWlnaHQgLyBHQU1FX0hFSUdIVCkgKiAxMCkgLyAxMCk7XG4gICAgICB0aGlzLndpZHRoID0gTWF0aC5jZWlsKHRoaXMuY2FudmFzLndpZHRoIC8gdGhpcy5zY2FsZSk7XG4gICAgICB0aGlzLmhlaWdodCA9IE1hdGguY2VpbCh0aGlzLmNhbnZhcy5oZWlnaHQgLyB0aGlzLnNjYWxlKTtcbiAgICAgIHRoaXMuY2VudGVyID0geyB1OiBNYXRoLmZsb29yKHRoaXMud2lkdGggLyAyKSwgdjogTWF0aC5mbG9vcih0aGlzLmhlaWdodCAvIDIpIH07XG4gICAgICB0aGlzLmNsaWVudFdpZHRoID0gd2lkdGg7XG4gICAgICB0aGlzLmNsaWVudEhlaWdodCA9IGhlaWdodDtcblxuICAgICAgICAgICAgLy8gTm90ZTogc21vb3RoaW5nIGZsYWcgZ2V0cyByZXNldCBvbiBldmVyeSByZXNpemUgYnkgc29tZSBicm93c2Vycywgd2hpY2ggaXMgd2h5XG4gICAgICAgICAgICAvLyB3ZSBkbyBpdCBoZXJlLlxuICAgICAgICAgICAgdGhpcy5jdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIHZpZXdwb3J0LmNhbnZhcy5zdHlsZS5jdXJzb3IgPSAnbm9uZSc7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIFNpbmdsZXRvblxuZXhwb3J0IGNvbnN0IHZpZXdwb3J0ID0gbmV3IFZpZXdwb3J0KCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IElucHV0IH0gZnJvbSAnLi9JbnB1dCc7XG5pbXBvcnQgeyB2aWV3cG9ydCB9IGZyb20gJy4uL1ZpZXdwb3J0JztcblxuLyoqXG4gKiBNb3VzZUFkYXB0ZXJcbiAqXG4gKiBNYXBzIG1vdXNlIGlucHV0cyB0byBnYW1lIGlucHV0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIE1vdXNlQWRhcHRlciB7XG4gIGNvbnN0cnVjdG9yKGhhbmRsZXIpIHtcbiAgICB0aGlzLmhhbmRsZXIgPSBoYW5kbGVyO1xuXG4gICAgLy8gS2V5IE1hcHBpbmc6ICAgICAgQUNUSU9OICAgICAgICAgICAgLy8gSW5wdXRcbiAgICB0aGlzLm1hcCA9IFtdO1xuICAgIHRoaXMubWFwWzBdICA9IElucHV0LkFjdGlvbi5BVFRBQ0s7ICAgIC8vIExNQlxuICAgIHRoaXMubWFwWzJdICA9IElucHV0LkFjdGlvbi5SRUxPQUQ7ICAgIC8vIFJNQlxuXG4gICAgdGhpcy5oZWxkID0gW107XG5cbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cblxuICBhc3luYyBpbml0KCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBldmVudCA9PiB7XG4gICAgICBpZiAoIXRoaXMucG9pbnRlcikgdGhpcy5wb2ludGVyID0ge307XG4gICAgICAvL3RoaXMuaGFuZGxlcnNbJ21vdXNlbW92ZSddKGV2ZW50Lm1vdmVtZW50WCwgZXZlbnQubW92ZW1lbnRZLCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZKTtcbiAgICAgIHRoaXMucG9pbnRlci51ID0gTWF0aC5mbG9vcigoZXZlbnQuY2xpZW50WCAqIHZpZXdwb3J0LndpZHRoKSAvIHZpZXdwb3J0LmNsaWVudFdpZHRoKTtcbiAgICAgIHRoaXMucG9pbnRlci52ID0gTWF0aC5mbG9vcigoZXZlbnQuY2xpZW50WSAqIHZpZXdwb3J0LmhlaWdodCkgLyB2aWV3cG9ydC5jbGllbnRIZWlnaHQpO1xuICAgIH0pO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywgKCkgPT4ge1xuICAgICAgdGhpcy5wb2ludGVyID0gdW5kZWZpbmVkO1xuICAgIH0pO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGV2ZW50ID0+IHtcbiAgICAgIGxldCBrID0gdGhpcy5tYXBbZXZlbnQuYnV0dG9uXTtcbiAgICAgIGlmIChrKSB0aGlzLmhlbGRba10gPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBldmVudCA9PiB7XG4gICAgICBsZXQgayA9IHRoaXMubWFwW2V2ZW50LmJ1dHRvbl07XG4gICAgICBpZiAoaykgdGhpcy5oZWxkW2tdID0gZmFsc2U7XG4gICAgfSk7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51JywgZXZlbnQgPT4ge1xuICAgICAgbGV0IGsgPSB0aGlzLm1hcFtldmVudC5idXR0b25dO1xuICAgICAgY29uc29sZS5sb2coZXZlbnQuYnV0dG9uKTtcbiAgICAgIGlmIChrKSB0aGlzLmhlbGRba10gPSB0cnVlO1xuICAgICAgdGhpcy5yZWxlYXNlUk1CVGljayA9IDI7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgLy8gSGFja3M6IGlkZWFsbHkgd2UgY291bGQgdXNlIG1vdXNlZG93biBhbmQgbW91c2V1cCBmb3IgYWxsIGNsaWNrcyBhbmQgcHJldmVudERlZmF1bHQgdG9cbiAgICAvLyBhdm9pZCBvcGVuaW5nIHRoZSBicm93c2VyJ3MgY29udGV4dCBtZW51LiBUaGlzIGhhc24ndCB3b3JrZWQgZm9yIG1lIHNvIGZhciB3aGVuIGNsaWNraW5nXG4gICAgLy8gb24gYSBjYW52YXMsIHNvIEkgbmVlZCB0byB1c2UgdGhlIGNvbnRleHQgbWVudSBldmVudCB0byBjYXB0dXJlIGEgcmlnaHQgbW91c2UgY2xpY2sgaW5zdGVhZC5cbiAgICAvL1xuICAgIC8vIFdlIGZha2UgYSBkb3duL3VwIGZvciBSTUIgY2xpY2tzLCB3aGljaCBtZWFucyB3ZSBjYW4ndCBkZXRlcm1pbmUgaG93IGxvbmcgdGhlIFJNQiBpcyBoZWxkXG4gICAgLy8gKGJ1dCBsdWNraWx5IHdlIGRvbid0IG5lZWQgdG8gZm9yIHRoaXMgZ2FtZSkuXG4gICAgaWYgKHRoaXMucmVsZWFzZVJNQlRpY2spIHtcbiAgICAgIHRoaXMucmVsZWFzZVJNQlRpY2stLTtcbiAgICAgIGlmICh0aGlzLnJlbGVhc2VSTUJUaWNrID09PSAwKSB7XG4gICAgICAgIHRoaXMuaGVsZFtJbnB1dC5BY3Rpb24uUkVMT0FEXSA9IGZhbHNlO1xuICAgICAgICBjb25zb2xlLmxvZygncmVsZWFzZWQnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnBvaW50ZXIgPSB1bmRlZmluZWQ7XG4gICAgZm9yIChsZXQgYWN0aW9uIG9mIE9iamVjdC52YWx1ZXMoSW5wdXQuQWN0aW9uKSkge1xuICAgICAgdGhpcy5oZWxkW2FjdGlvbl0gPSBmYWxzZTtcbiAgICB9XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgS2V5Ym9hcmRBZGFwdGVyIH0gZnJvbSAnLi9LZXlib2FyZEFkYXB0ZXInO1xuaW1wb3J0IHsgTW91c2VBZGFwdGVyIH0gZnJvbSAnLi9Nb3VzZUFkYXB0ZXInO1xuXG4vL2ltcG9ydCB7IEdhbWVwYWRBZGFwdGVyIH0gZnJvbSAnLi9HYW1lcGFkQWRhcHRlcic7XG4vL2ltcG9ydCB7IE5vcm1hbFZlY3RvciB9IGZyb20gJy4vR2VvbWV0cnknO1xuXG4vKipcbiAqIFRoaXMgaXMgb3VyIGFic3RyYWN0IGdhbWUgaW5wdXQgaGFuZGxlci5cbiAqXG4gKiBFYWNoIGZyYW1lLCB3ZSdsbCBjb2xsZWN0IGlucHV0IGRhdGEgZnJvbSBhbGwgb2Ygb3VyIHN1cHBvcnRlZCBpbnB1dCBhZGFwdGVycyxcbiAqIGFuZCB0dXJuIGl0IGludG8gZ2FtZSBpbnB1dC4gVGhpcyBnYW1lIGlucHV0IGNhbiB0aGVuIGJlIHVzZWQgYnkgdGhlIGdhbWVcbiAqIHVwZGF0ZSBmb3IgdGhlIGZyYW1lLlxuICpcbiAqIFRoZSBpbnB1dCBhZGFwdGVycyBnaXZlIHVzIGRhdGEgbGlrZSBcImtleSBYIHByZXNzZWRcIiwgb3IgXCJyaWdodCBtb3VzZSBidXR0b25cbiAqIGNsaWNrZWRcIiwgb3IgXCJidXR0b24gQlwiIHByZXNzZWQsIGFuZCB0aGVzZSBhcmUgdHJhbnNsYXRlZCBpbnRvIGEgZ2FtZSBpbnB1dFxuICogbGlrZSBcImRvZGdlXCIuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnB1dCB7XG4gICAgYXN5bmMgaW5pdCgpIHtcbiAgICAgICAgLy8gQSB2ZWN0b3IgcmVwcmVzZW50aW5nIHRoZSBkaXJlY3Rpb24gdGhlIHVzZXIgaXMgcHJlc3NpbmcvZmFjaW5nLFxuICAgICAgICAvLyBzZXBhcmF0ZSBmcm9tIHByZXNzaW5nIGFuZCByZWxlYXNpbmcgaW5wdXRzLiBUcmVhdGluZyBcImRpcmVjdGlvblwiXG4gICAgICAgIC8vIHNlcGFyYXRlbHkgbWFrZXMgaXQgZWFzaWVyIHRvIGhhbmRsZSBnYW1lcGFkIHN0aWNrcy5cbiAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSB7IHg6IDAsIHk6IDAsIG06IDAgfTtcblxuICAgICAgICAvLyBcIlByZXNzZWRcIiBtZWFucyBhbiBpbnB1dCB3YXMgcHJlc3NlZCBUSElTIEZSQU1FLlxuICAgICAgICB0aGlzLnByZXNzZWQgPSB7fTtcblxuICAgICAgICAvLyBcIlJlbGVhc2VkXCIgbWVhbnMgYW4gaW5wdXQgd2FzIHJlbGVhc2VkIFRISVMgRlJBTUUuXG4gICAgICAgIHRoaXMucmVsZWFzZWQgPSB7fTtcblxuICAgICAgICAvLyBcIkhlbGRcIiBtZWFucyBhbiBpbnB1dCBpcyBoZWxkIGRvd24uIFRoZSBpbnB1dCB3YXMgXCJQcmVzc2VkXCIgZWl0aGVyXG4gICAgICAgIC8vIHRoaXMgZnJhbWUgb3IgaW4gYSBwYXN0IGZyYW1lLCBhbmQgaGFzIG5vdCBiZWVuIFwiUmVsZWFzZWRcIiB5ZXQuXG4gICAgICAgIHRoaXMuaGVsZCA9IHt9O1xuXG4gICAgICAgIC8vIEhvdyBtYW55IGZyYW1lcyB3YXMgdGhpcyBpbnB1dCBoZWxkIGRvd24gYnkgdGhlIHBsYXllci4gSWYgW2hlbGRdXG4gICAgICAgIC8vIGlzIGZhbHNlLCBpdCByZXByZXNlbnRzIGhvdyBsb25nIHRoZSBpbnB1dCB3YXMgbGFzdCBoZWxkIGRvd24uXG4gICAgICAgIHRoaXMuZnJhbWVzSGVsZCA9IHt9O1xuXG4gICAgICAgIHRoaXMua2V5Ym9hcmQgPSBuZXcgS2V5Ym9hcmRBZGFwdGVyKHRoaXMpO1xuICAgICAgICBhd2FpdCB0aGlzLmtleWJvYXJkLmluaXQoKTtcblxuICAgICAgICB0aGlzLm1vdXNlID0gbmV3IE1vdXNlQWRhcHRlcih0aGlzKTtcbiAgICAgICAgYXdhaXQgdGhpcy5tb3VzZS5pbml0KCk7XG5cbiAgICAgICAgLy90aGlzLmdhbWVwYWQgPSBuZXcgR2FtZXBhZEFkYXB0ZXIodGhpcyk7XG4gICAgICAgIC8vYXdhaXQgdGhpcy5nYW1lcGFkLmluaXQoKTtcbiAgICB9XG5cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIC8vIFdlIGNvdWxkIGhhdmUgc29tZSBraW5kIG9mIFwiaW5wdXQgYWRhcHRlciB0b2dnbGVcIiwgYnV0IGl0J3MgZWFzaWVyIHRvIGp1c3QgdHJlYXQgYWxsIGlucHV0c1xuICAgICAgICAvLyBhcyB2YWxpZCAtLSBpZiB5b3UncmUgcHJlc3NpbmcgdGhlIFwiYXR0YWNrXCIgYnV0dG9uIG9uIGVpdGhlciBnYW1lcGFkIG9yIGtleWJvYXJkLCB0aGVuIHlvdSdyZVxuICAgICAgICAvLyBhdHRhY2tpbmcuIEZvciBkaXJlY3Rpb25hbCBpbnB1dCwgd2UgaW5zdGVhZCBjaGVjayB3aGV0aGVyIHRoZXJlJ3MgbW92ZW1lbnQgb24gdGhlIHRodW1ic3RpY2ssXG4gICAgICAgIC8vIGFuZCB3ZSB1c2UgaXQgaWYgdGhlcmUgaXMgLS0gb3RoZXJ3aXNlIHdlIHRyeSB0byBleHRyYWN0IG1vdmVtZW50IGZyb20gdGhlIGtleWJvYXJkIGluc3RlYWQuXG5cbiAgICAgICAgdGhpcy5rZXlib2FyZC51cGRhdGUoKTtcbiAgICAgICAgdGhpcy5tb3VzZS51cGRhdGUoKTtcbiAgICAgICAgLy90aGlzLmdhbWVwYWQudXBkYXRlKCk7XG5cbiAgICAgICAgZm9yIChsZXQgYWN0aW9uIG9mIE9iamVjdC52YWx1ZXMoSW5wdXQuQWN0aW9uKSkge1xuICAgICAgICAgICAgbGV0IGhlbGQgPSB0aGlzLm1vdXNlLmhlbGRbYWN0aW9uXSB8fCB0aGlzLmtleWJvYXJkLmhlbGRbYWN0aW9uXTtcbiAgICAgICAgICAgIC8vbGV0IGhlbGQgPSB0aGlzLmdhbWVwYWQuaGVsZFthY3Rpb25dIHx8IHRoaXMua2V5Ym9hcmQuaGVsZFthY3Rpb25dO1xuICAgICAgICAgICAgdGhpcy5wcmVzc2VkW2FjdGlvbl0gPSAhdGhpcy5oZWxkW2FjdGlvbl0gJiYgaGVsZDtcbiAgICAgICAgICAgIHRoaXMucmVsZWFzZWRbYWN0aW9uXSA9IHRoaXMuaGVsZFthY3Rpb25dICYmICFoZWxkO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wcmVzc2VkW2FjdGlvbl0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZyYW1lc0hlbGRbYWN0aW9uXSA9IDE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaGVsZFthY3Rpb25dICYmIGhlbGQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZyYW1lc0hlbGRbYWN0aW9uXSsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmhlbGRbYWN0aW9uXSA9IGhlbGQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBvaW50ZXIgPSB0aGlzLm1vdXNlLnBvaW50ZXI7XG5cbiAgICAgICAgLy90aGlzLmRpcmVjdGlvbiA9IHRoaXMuZ2FtZXBhZC5kaXJlY3Rpb24ubSA+IDAgPyB0aGlzLmdhbWVwYWQuZGlyZWN0aW9uIDogdGhpcy5rZXlib2FyZC5kaXJlY3Rpb247XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uID0gdGhpcy5rZXlib2FyZC5kaXJlY3Rpb247XG4gICAgfVxuXG4gICAgb25Eb3duKGFjdGlvbikge1xuICAgIH1cblxuICAgIG9uVXAoYWN0aW9uKSB7XG4gICAgfVxufVxuXG4vLyBHYW1lIElucHV0c1xuLy9cbi8vIE5vdGUgdGhhdCBtb3ZpbmcgdGhlIHBsYXllciBhcm91bmQgaXMgYWN0dWFsbHkgbm90IGNvbnNpZGVyZWQgYW4gYWN0aW9uOyBpdCdzXG4vLyBhIHNlcGFyYXRlIG5vbi1hY3Rpb24gaW5wdXQgY2FsbGVkIFwiZGlyZWN0aW9uXCIuIEl0IGp1c3Qgc28gaGFwcGVucyB0aGF0IG9uXG4vLyBrZXlib2FyZCwgZm9yIGV4YW1wbGUsIHByZXNzaW5nIHRoZSBcImRvd24gYXJyb3dcIiBrZXkgaXMgY29uc2lkZXJlZCBib3RoIGFcbi8vIHByZXNzIG9mIHRoZSBpbi1nYW1lIERPV04gYWN0aW9uIGFuZCBhIGRpcmVjdGlvbmFsIGlucHV0LiBJdCdzIHVwIHRvIHRoZSBpbnB1dFxuLy8gY29uc3VtZXIgdG8gZGVjaWRlIHdoaWNoIGlucHV0IGlzIHJlbGV2YW50IChpZiBhbnkpLiBGb3IgZXhhbXBsZSwgb24gYSBtZW51LFxuLy8gd2UgbWF5IGNvbnN1bWUgdGhlIERPV04vVVAgYWN0aW9ucyB0byBuYXZpZ2F0ZSB0aGUgbWVudSwgYnV0IGlnbm9yZSBkaXJlY3Rpb25hbFxuLy8gaW5wdXRzLlxuLy9cbklucHV0LkFjdGlvbiA9IHtcbiAgVVA6ICAgICAgMTEsXG4gIERPV046ICAgIDEyLFxuICBMRUZUOiAgICAxMyxcbiAgUklHSFQ6ICAgMTQsXG4gIEFUVEFDSzogIDIxLFxuICBSRUxPQUQ6ICAzMCxcbiAgREVGTEVDVDogMjIsXG4gIERPREdFOiAgIDIzLFxuICBTVVBFUjogICAyNCxcbiAgTUVOVTogICAgOTYsXG4gIE1VVEU6ICAgIDk3LFxuICBGUkVFWkU6ICA5OFxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgQ29uc3RhbnRzIGFzIEMgfSBmcm9tICcuL0NvbnN0YW50cydcbmltcG9ydCB7IGdhbWUgfSBmcm9tICcuL0dhbWUnO1xuaW1wb3J0IHsgdmlld3BvcnQgfSBmcm9tICcuL1ZpZXdwb3J0JztcblxuLyoqXG4gKiBHZW9tZXRyeVxuICpcbiAqIEEgaG9ycmlibGUgZ3JhYiBiYWcgb2YgbWF0aC1yZWxhdGVkIG5vbnNlbnNlLlxuICovXG5leHBvcnQgY29uc3QgR2VvbWV0cnkgPSB7XG4gIFJBRDogKCgpID0+IHtcbiAgICBsZXQgcmFkaWFuVGFibGUgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8PSAzNjA7IGkrKykge1xuICAgICAgcmFkaWFuVGFibGVbaV0gPSBNYXRoLlBJICogMiAqIGkgLyAzNjA7XG4gICAgfVxuICAgIHJldHVybiByYWRpYW5UYWJsZTtcbiAgfSkoKSxcblxuICBub3JtYWxpemVWZWN0b3IocCkge1xuICAgIGxldCBtID0gTWF0aC5zcXJ0KHAueCAqIHAueCArIHAueSAqIHAueSk7XG4gICAgcmV0dXJuIChtID09PSAwKSA/IHsgeDogMCwgeTogMCwgbTogMCB9IDogeyB4OiBwLnggLyBtLCB5OiBwLnkgLyBtLCBtIH07XG4gIH0sXG5cbiAgdmVjdG9yQmV0d2VlbihwMSwgcDIpIHtcbiAgICByZXR1cm4gR2VvbWV0cnkubm9ybWFsaXplVmVjdG9yKHsgeDogcDIueCAtIHAxLngsIHk6IHAyLnkgLSBwMS55IH0pO1xuICB9LFxuXG4gIGFuZ2xlMnZlY3RvcihyLCBtKSB7XG4gICAgcmV0dXJuIHsgeDogTWF0aC5jb3MociksIHk6IE1hdGguc2luKHIpLCBtOiBtIHx8IDEgfTtcbiAgfSxcblxuICB2ZWN0b3IyYW5nbGUodikge1xuICAgIGxldCBhbmdsZSA9IE1hdGguYXRhbjIodi55LCB2LngpO1xuICAgIGlmIChhbmdsZSA8IDApIGFuZ2xlICs9IEdlb21ldHJ5LlJBRFszNjBdO1xuICAgIHJldHVybiBhbmdsZTtcbiAgfSxcblxuICB2ZWN0b3IycG9pbnQodikge1xuICAgIHJldHVybiB7IHg6IHYueCAqICh2Lm0gfHwgMSksIHk6IHYueSAqICh2Lm0gfHwgMSkgfTtcbiAgfSxcblxuICBkb3QoYSwgYikge1xuICAgIFthLCBiXSA9IFtHZW9tZXRyeS52ZWN0b3IycG9pbnQoYSksIEdlb21ldHJ5LnZlY3RvcjJwb2ludChiKV07XG4gICAgcmV0dXJuIGEueCAqIGIueCArIGEueSAqIGIueTtcbiAgfSxcblxuICAvLyBUYWtlcyBhIHNlcmllcyBvZiB2ZWN0b3JzIGFuZCBkZW5vcm1hbGl6ZXMgdGhlbSBhbmQgYWRkcyB0aGVtIHRvZ2V0aGVyLCB1c3VhbGx5IHJlc3VsdGluZ1xuICAvLyBpbiBhIHBvaW50IGluIHNwYWNlLiBXcmFwIGluIG5vcm1hbGl6ZVZlY3RvciB0byBnZXQgYSBub3JtYWxpemVkIHZlY3RvciBhZ2FpbiwgaWYgZGVzaXJlZC5cbiAgdmVjdG9yQWRkKC4uLnZlY3RvcnMpIHtcbiAgICBsZXQgdiA9IHsgeDogMCwgeTogMCwgbTogMSB9O1xuICAgIGZvciAobGV0IHZlY3RvciBvZiB2ZWN0b3JzKSB7XG4gICAgICB2LnggKz0gdmVjdG9yLnggKiAodmVjdG9yLm0gfHwgMSk7XG4gICAgICB2LnkgKz0gdmVjdG9yLnkgKiAodmVjdG9yLm0gfHwgMSk7XG4gICAgfVxuICAgIHJldHVybiB2O1xuICB9LFxuXG4gIGNsb3Nlc3RBbmdsZURpZmZlcmVuY2UoYSwgYikge1xuICAgIGlmIChhID4gYikgW2EsIGJdID0gW2IsIGFdO1xuICAgIHJldHVybiBNYXRoLm1pbihiIC0gYSwgQy5SMzYwICsgYSAtIGIpO1xuICB9LFxuXG4gIGludGVybWVkaWF0ZUFuZ2xlKGEsIGIsIG0pIHtcbiAgICBpZiAoYiA+IEMuUjI3MCAmJiBhIDw9IEMuUjkwKSBhICs9IEMuUjM2MDtcbiAgICBpZiAoYSA+IEMuUjI3MCAmJiBiIDw9IEMuUjkwKSBiICs9IEMuUjM2MDtcbiAgICBsZXQgYW5nbGUgPSAoYiAtIGEpICogbSArIGE7XG4gICAgcmV0dXJuIChhbmdsZSArIEMuUjM2MCkgJSBDLlIzNjA7XG4gIH0sXG5cbiAgYW5nbGVCZXR3ZWVuKGFuZ2xlLCBtaW4sIG1heCkge1xuICAgIGlmIChtaW4gPiBtYXgpIFttaW4sIG1heF0gPSBbbWF4LCBtaW5dO1xuICAgIHdoaWxlIChhbmdsZSA+PSBtYXggKyBHZW9tZXRyeS5SQURbMzYwXSkgYW5nbGUgLT0gR2VvbWV0cnkuUkFEWzM2MF07XG4gICAgd2hpbGUgKGFuZ2xlIDw9IG1pbiAtIEdlb21ldHJ5LlJBRFszNjBdKSBhbmdsZSArPSBHZW9tZXRyeS5SQURbMzYwXTtcbiAgICByZXR1cm4gKGFuZ2xlID49IG1pbiAmJiBhbmdsZSA8IG1heCk7XG4gIH0sXG5cbiAgYXJjT3ZlcmxhcChhbmdsZUExLCBhbmdsZUEyLCBhbmdsZUIxLCBhbmdsZUIyKSB7XG4gICAgaWYgKGFuZ2xlQTEgPiBhbmdsZUEyKSBbYW5nbGVBMSwgYW5nbGVBMl0gPSBbYW5nbGVBMiwgYW5nbGVBMV07XG4gICAgaWYgKGFuZ2xlQjEgPiBhbmdsZUIyKSBbYW5nbGVCMSwgYW5nbGVCMl0gPSBbYW5nbGVCMiwgYW5nbGVCMV07XG5cbiAgICB3aGlsZSAoYW5nbGVCMiA+PSBhbmdsZUEyICsgR2VvbWV0cnkuUkFEWzM2MF0pIHtcbiAgICAgIGFuZ2xlQjIgLT0gR2VvbWV0cnkuUkFEWzM2MF07XG4gICAgICBhbmdsZUIxIC09IEdlb21ldHJ5LlJBRFszNjBdO1xuICAgIH1cbiAgICB3aGlsZSAoYW5nbGVCMSA8PSBhbmdsZUExIC0gR2VvbWV0cnkuUkFEWzM2MF0pIHtcbiAgICAgIGFuZ2xlQjEgKz0gR2VvbWV0cnkuUkFEWzM2MF07XG4gICAgICBhbmdsZUIyICs9IEdlb21ldHJ5LlJBRFszNjBdO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IFtNYXRoLm1heChhbmdsZUExLCBhbmdsZUIxKSwgTWF0aC5taW4oYW5nbGVBMiwgYW5nbGVCMildO1xuICAgIHJldHVybiByZXN1bHRbMF0gPiByZXN1bHRbMV0gPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH0sXG5cbiAgeHkycXIocG9zKSB7XG4gICAgcmV0dXJuIHsgcTogKHBvcy54IC8gQy5USUxFX1dJRFRIKSB8IDAsIHI6IChwb3MueSAvIEMuVElMRV9IRUlHSFQpIHwgMCB9O1xuICB9LFxuXG4gIHFyMnh5KHBvcykge1xuICAgIHJldHVybiB7IHg6IHBvcy5xICogQy5USUxFX1dJRFRILCB5OiBwb3MuciAqIEMuVElMRV9IRUlHSFQgfTtcbiAgfSxcblxuICB4eTJ1dihwb3MpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdTogcG9zLnggKyB2aWV3cG9ydC5jZW50ZXIudSAtIGdhbWUuY2FtZXJhLnBvcy54LFxuICAgICAgdjogcG9zLnkgKyB2aWV3cG9ydC5jZW50ZXIudiAtIGdhbWUuY2FtZXJhLnBvcy55XG4gICAgfTtcbiAgfSxcblxuICBjbGFtcCh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgICByZXR1cm4gdmFsdWUgPCBtaW4gPyBtaW4gOiAodmFsdWUgPiBtYXggPyBtYXggOiB2YWx1ZSk7XG4gIH0sXG5cbiAgLy8gVGhlIHBhcmFtZXRlcnMgdG8gdGhpcyBmdW5jdGlvbiBhcmUgKFEsIFEpIG9yIChSLCBSKSAtIGkuZS4gaG9yaXpvbnRhbCBvclxuICAvLyB2ZXJ0aWNhbCBjb29yZGluYXRlcyBpbiB0aWxlIHNwYWNlLlxuICBjYWxjdWxhdGVSYXlJbnRlcnNlY3Rpb25BbmRTdGVwKHN0YXJ0UG9zLCBlbmRQb3MpIHtcbiAgICBsZXQgbmV4dCwgc3RlcCwgZGlmZiA9IGVuZFBvcyAtIHN0YXJ0UG9zO1xuXG4gICAgaWYgKGRpZmYgPT09IDApIHtcbiAgICAgICAgc3RlcCA9IE5hTjtcbiAgICAgICAgbmV4dCA9ICtJbmZpbml0eTtcbiAgICB9IGVsc2UgaWYgKGRpZmYgPiAwKSB7XG4gICAgICAgIHN0ZXAgPSAxIC8gZGlmZjtcbiAgICAgICAgbmV4dCA9ICgxIC0gKHN0YXJ0UG9zIC0gTWF0aC5mbG9vcihzdGFydFBvcykpKSAqIHN0ZXA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3RlcCA9IC0xIC8gZGlmZjtcbiAgICAgICAgbmV4dCA9IChzdGFydFBvcyAtIE1hdGguZmxvb3Ioc3RhcnRQb3MpKSAqIHN0ZXA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgbmV4dCwgc3RlcCB9O1xuICB9LFxuXG4gIC8vIGh0dHBzOi8vd3d3LmdlbmVyaWNnYW1lZGV2LmNvbS9nZW5lcmFsL3Nob290aW5nLXJheXMtdGhyb3VnaC10aWxlbWFwcy9cbiAgKnRpbGVzSGl0QmV0d2VlbihwMSwgcDIpIHtcbiAgICBsZXQgc3RhcnRRID0gcDEueCAvIEMuVElMRV9XSURUSCwgc3RhcnRSID0gcDEueSAvIEMuVElMRV9IRUlHSFQ7XG4gICAgbGV0IGVuZFEgPSBwMi54IC8gQy5USUxFX1dJRFRILCBlbmRSID0gcDIueSAvIEMuVElMRV9IRUlHSFQ7XG4gICAgbGV0IHRpbGVDb3VudCA9IE1hdGguYWJzKE1hdGguZmxvb3Ioc3RhcnRRKSAtIE1hdGguZmxvb3IoZW5kUSkpICsgTWF0aC5hYnMoTWF0aC5mbG9vcihzdGFydFIpIC0gTWF0aC5mbG9vcihlbmRSKSk7XG5cbiAgICB5aWVsZCB7IHE6IHN0YXJ0USB8IDAsIHI6IHN0YXJ0UiB8IDAsIG06IDAgfTtcblxuICAgIC8vIElmIHRoZXJlJ3Mgb25seSAxIG9yIDIgaGl0IHRpbGVzLCB3ZSBkb24ndCBuZWVkIHRoZSBtYXRoIHRvIGNvbXB1dGUgdGhlIG1pZGRsZS5cbiAgICBpZiAodGlsZUNvdW50ID4gMSkge1xuICAgICAgbGV0IHEgPSBzdGFydFEsIHIgPSBzdGFydFIsIG0gPSAwO1xuICAgICAgbGV0IHN0ZXBRID0gTWF0aC5zaWduKGVuZFEgLSBzdGFydFEpO1xuICAgICAgbGV0IHN0ZXBSID0gTWF0aC5zaWduKGVuZFIgLSBzdGFydFIpO1xuICAgICAgbGV0IGludGVyc2VjdGlvblEgPSBHZW9tZXRyeS5jYWxjdWxhdGVSYXlJbnRlcnNlY3Rpb25BbmRTdGVwKHN0YXJ0USwgZW5kUSk7XG4gICAgICBsZXQgaW50ZXJzZWN0aW9uUiA9IEdlb21ldHJ5LmNhbGN1bGF0ZVJheUludGVyc2VjdGlvbkFuZFN0ZXAoc3RhcnRSLCBlbmRSKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aWxlQ291bnQgLSAxOyBpKyspIHtcbiAgICAgICAgaWYgKGludGVyc2VjdGlvblEubmV4dCA8IGludGVyc2VjdGlvblIubmV4dCkge1xuICAgICAgICAgIHEgKz0gc3RlcFE7XG4gICAgICAgICAgbSArPSBzdGVwUTtcbiAgICAgICAgICBpbnRlcnNlY3Rpb25RLm5leHQgKz0gaW50ZXJzZWN0aW9uUS5zdGVwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHIgKz0gc3RlcFI7XG4gICAgICAgICAgbSArPSBzdGVwUjtcbiAgICAgICAgICBpbnRlcnNlY3Rpb25SLm5leHQgKz0gaW50ZXJzZWN0aW9uUi5zdGVwO1xuICAgICAgICB9XG4gICAgICAgIHlpZWxkIHsgcTogcSB8IDAsIHI6IHIgfCAwLCBtIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRpbGVDb3VudCA+IDApIHtcbiAgICAgIHlpZWxkIHsgcTogZW5kUSB8IDAsIHI6IGVuZFIgfCAwLCBtOiAxIH07XG4gICAgfVxuICB9LFxuXG4gICp0aWxlc0hpdEJ5KHAsIHYpIHtcbiAgICB5aWVsZCAqR2VvbWV0cnkudGlsZXNIaXRCZXR3ZWVuKHAsIEdlb21ldHJ5LnZlY3RvckFkZChwLCB2KSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7WFlbXX0gYm91bmRzICB0aGUgdXBwZXItbGVmdCBhbmQgbG93ZXItcmlnaHQgYm91bmRzXG4gICAqIEB5aWVsZHMge1FSfVxuICAgKi9cbiAgKnRpbGVzSGl0SW5Cb3VuZHMoYm91bmRzKSB7XG4gICAgZm9yIChsZXQgciA9IE1hdGguZmxvb3IoYm91bmRzWzBdLnkgLyBDLlRJTEVfSEVJR0hUKTsgciAqIEMuVElMRV9IRUlHSFQgPCBib3VuZHNbMV0ueTsgcisrKSB7XG4gICAgICBmb3IgKGxldCBxID0gTWF0aC5mbG9vcihib3VuZHNbMF0ueCAvIEMuVElMRV9XSURUSCk7IHEgKiBDLlRJTEVfV0lEVEggPCBib3VuZHNbMV0ueDsgcSsrKSB7XG4gICAgICAgIHlpZWxkIHsgcSwgciB9O1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtYWX0gcDEgIHRoZSBzdGFydGluZyBwb3NpdGlvblxuICAgKiBAcGFyYW0ge1hZfSBwMiAgdGhlIGVuZGluZyBwb3NpdGlvblxuICAgKiBAcGFyYW0ge251bWJlcn0gciAgdGhlIHJhZGl1cyBvZiB0aGUgbW92aW5nIGNpcmNsZVxuICAgKiBAeWllbGRzIHtRUn1cbiAgICovXG4gICp0aWxlc0hpdEJldHdlZW5DaXJjbGUocDEsIHAyLCByKSB7XG4gICAgbGV0IGJvdW5kcyA9IFtcbiAgICAgIHsgeDogTWF0aC5taW4ocDEueCwgcDIueCkgLSByLCB5OiBNYXRoLm1pbihwMS55LCBwMi55KSAtIHIgfSxcbiAgICAgIHsgeDogTWF0aC5tYXgocDEueCwgcDIueCkgKyByLCB5OiBNYXRoLm1heChwMS55LCBwMi55KSArIHIgfVxuICAgIF07XG4gICAgeWllbGQgKkdlb21ldHJ5LnRpbGVzSGl0SW5Cb3VuZHMoYm91bmRzKTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtYWX0gcCAgdGhlIHN0YXJ0aW5nIHBvc2l0aW9uXG4gICAqIEBwYXJhbSB7WFl9IHYgIHRoZSB2ZWxvY2l0eSAobW92ZW1lbnQpXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByICB0aGUgcmFkaXVzIG9mIHRoZSBtb3ZpbmcgY2lyY2xlXG4gICAqIEB5aWVsZHMge1FSfVxuICAgKi9cbiAgKnRpbGVzSGl0QnlDaXJjbGUocCwgdiwgcikge1xuICAgIHlpZWxkICpHZW9tZXRyeS50aWxlc0hpdEJldHdlZW5DaXJjbGUocCwgeyB4OiBwLnggKyB2LngsIHk6IHAueSArIHYueSB9LCByKTtcbiAgfSxcblxuICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTg3OTAzODkvODA2MzBcbiAgaW50ZXJzZWN0Q2lyY2xlUmVjdGFuZ2xlKHAxLCBwMiwgciwgYm91bmRzKSB7XG4gICAgLy8gSWYgdGhlIGJvdW5kaW5nIGJveCBhcm91bmQgdGhlIHN0YXJ0IGFuZCBlbmQgcG9pbnRzICgrcmFkaXVzIG9uIGFsbFxuICAgIC8vIHNpZGVzKSBkb2VzIG5vdCBpbnRlcnNlY3Qgd2l0aCB0aGUgcmVjdGFuZ2xlLCBkZWZpbml0ZWx5IG5vdCBhblxuICAgIC8vIGludGVyc2VjdGlvblxuICAgIGlmIChNYXRoLm1heChwMS54LCBwMi54KSArIHIgPCBib3VuZHNbMF0ueCB8fFxuICAgICAgICBNYXRoLm1pbihwMS54LCBwMi54KSAtIHIgPiBib3VuZHNbMV0ueCB8fFxuICAgICAgICBNYXRoLm1heChwMS55LCBwMi55KSArIHIgPCBib3VuZHNbMF0ueSB8fFxuICAgICAgICBNYXRoLm1pbihwMS55LCBwMi55KSAtIHIgPiBib3VuZHNbMV0ueSlcbiAgICAgIHJldHVybjtcblxuICAgIGxldCBkeCA9IHAyLnggLSBwMS54O1xuICAgIGxldCBkeSA9IHAyLnkgLSBwMS55O1xuICAgIGxldCBpbnZkeCA9IChkeCA9PT0gMCA/IDAgOiAxIC8gZHgpO1xuICAgIGxldCBpbnZkeSA9IChkeSA9PT0gMCA/IDAgOiAxIC8gZHkpO1xuICAgIGxldCBjb3JuZXJYID0gSW5maW5pdHk7XG4gICAgbGV0IGNvcm5lclkgPSBJbmZpbml0eTtcblxuICAgIC8vIENoZWNrIGVhY2ggc2lkZSBvZiB0aGUgcmVjdGFuZ2xlIGZvciBhIHNpbmdsZS1zaWRlIGludGVyc2VjdGlvblxuICAgIC8vIExlZnQgU2lkZVxuICAgIGlmIChwMS54IC0gciA8IGJvdW5kc1swXS54ICYmIHAyLnggKyByID4gYm91bmRzWzBdLngpIHtcbiAgICAgIGxldCBsdGltZSA9ICgoYm91bmRzWzBdLnggLSByKSAtIHAxLngpICogaW52ZHg7XG4gICAgICBpZiAobHRpbWUgPj0gMCAmJiBsdGltZSA8PSAxKSB7XG4gICAgICAgIGxldCBseSA9IGR5ICogbHRpbWUgKyBwMS55O1xuICAgICAgICBpZiAobHkgPj0gYm91bmRzWzBdLnkgJiYgbHkgPD0gYm91bmRzWzFdLnkpIHtcbiAgICAgICAgICByZXR1cm4geyB4OiBkeCAqIGx0aW1lICsgcDEueCwgeTogbHksIHQ6IGx0aW1lLCBueDogLTEsIG55OiAwLCBpeDogYm91bmRzWzBdLngsIGl5OiBseSB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb3JuZXJYID0gYm91bmRzWzBdLng7XG4gICAgfVxuICAgIC8vIFJpZ2h0IFNpZGVcbiAgICBpZiAocDEueCArIHIgPiBib3VuZHNbMV0ueCAmJiBwMi54IC0gciA8IGJvdW5kc1sxXS54KSB7XG4gICAgICBsZXQgcnRpbWUgPSAocDEueCAtIChib3VuZHNbMV0ueCArIHIpKSAqIC1pbnZkeDtcbiAgICAgIGlmIChydGltZSA+PSAwICYmIHJ0aW1lIDw9IDEpIHtcbiAgICAgICAgbGV0IHJ5ID0gZHkgKiBydGltZSArIHAyLnk7XG4gICAgICAgIGlmIChyeSA+PSBib3VuZHNbMF0ueSAmJiByeSA8PSBib3VuZHNbMV0ueSkge1xuICAgICAgICAgIHJldHVybiB7IHg6IGR4ICogcnRpbWUgKyBwMS54LCB5OiByeSwgdDogcnRpbWUsIG54OiAxLCBueTogMCwgaXg6IGJvdW5kc1sxXS54LCBpeTogcnkgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29ybmVyWCA9IGJvdW5kc1sxXS54O1xuICAgIH1cbiAgICAvLyBUb3AgU2lkZVxuICAgIGlmIChwMS55IC0gciA8IGJvdW5kc1swXS55ICYmIHAyLnkgKyByID4gYm91bmRzWzBdLnkpIHtcbiAgICAgIGxldCB0dGltZSA9ICgoYm91bmRzWzBdLnkgLSByKSAtIHAxLnkpICogaW52ZHk7XG4gICAgICBpZiAodHRpbWUgPj0gMCAmJiB0dGltZSA8PSAxKSB7XG4gICAgICAgIGxldCB0eCA9IGR4ICogdHRpbWUgKyBwMS54O1xuICAgICAgICBpZiAodHggPj0gYm91bmRzWzBdLnggJiYgdHggPD0gYm91bmRzWzFdLngpIHtcbiAgICAgICAgICByZXR1cm4geyB4OiB0eCwgeTogZHkgKiB0dGltZSArIHAxLnksIHQ6IHR0aW1lLCBueDogMCwgbnk6IC0xLCBpeDogdHgsIGl5OiBib3VuZHNbMF0ueSB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb3JuZXJZID0gYm91bmRzWzBdLnk7XG4gICAgfVxuICAgIC8vIEJvdHRvbSBTaWRlXG4gICAgaWYgKHAxLnkgKyByID4gYm91bmRzWzFdLnkgJiYgcDIueSAtIHIgPCBib3VuZHNbMV0ueSkge1xuICAgICAgbGV0IGJ0aW1lID0gKHAxLnkgLSAoYm91bmRzWzFdLnkgKyByKSkgKiAtaW52ZHk7XG4gICAgICBpZiAoYnRpbWUgPj0gMCAmJiBidGltZSA8PSAxKSB7XG4gICAgICAgIGxldCBieCA9IGR4ICogYnRpbWUgKyBwMS54O1xuICAgICAgICBpZiAoYnggPj0gYm91bmRzWzBdLnggJiYgYnggPD0gYm91bmRzWzFdLngpIHtcbiAgICAgICAgICByZXR1cm4geyB4OiBieCwgeTogZHkgKiBidGltZSArIHAxLnksIHQ6IGJ0aW1lLCBueDogMCwgbnk6IDEsIGl4OiBieCwgaXk6IGJvdW5kc1swXS55IH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvcm5lclkgPSBib3VuZHNbMV0ueTtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBoYXZlbid0IHRvdWNoZWQgYW55dGhpbmcsIHRoZXJlIGlzIG5vIGNvbGxpc2lvblxuICAgIGlmIChjb3JuZXJYID09PSBJbmZpbml0eSAmJiBjb3JuZXJZID09PSBJbmZpbml0eSkgcmV0dXJuO1xuXG4gICAgLy8gV2UgZGlkbid0IHBhc3MgdGhyb3VnaCBhIHNpZGUgYnV0IG1heSBiZSBoaXR0aW5nIHRoZSBjb3JuZXJcbiAgICBpZiAoY29ybmVyWCAhPT0gSW5maW5pdHkgJiYgY29ybmVyWSA9PT0gSW5maW5pdHkpIHtcbiAgICAgIGNvcm5lclkgPSBkeSA+IDAgPyBib3VuZHNbMV0ueSA6IGJvdW5kc1swXS55O1xuICAgIH1cbiAgICBpZiAoY29ybmVyWSAhPT0gSW5maW5pdHkgJiYgY29ybmVyWCA9PT0gSW5maW5pdHkpIHtcbiAgICAgIGNvcm5lclggPSBkeCA+IDAgPyBib3VuZHNbMV0ueCA6IGJvdW5kc1swXS54O1xuICAgIH1cblxuICAgIC8qIFNvbHZlIHRoZSB0cmlhbmdsZSBiZXR3ZWVuIHRoZSBzdGFydCwgY29ybmVyLCBhbmQgaW50ZXJzZWN0aW9uIHBvaW50LlxuICAgICAqXG4gICAgICogICAgICAgICAgICstLS0tLS0tLS0tLVQtLS0tLS0tLS0tLStcbiAgICAgKiAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAqICAgICAgICAgIEx8ICAgICAgICAgICAgICAgICAgICAgICB8UlxuICAgICAqICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICogICAgICAgICAgIEMtLS0tLS0tLS0tLUItLS0tLS0tLS0tLStcbiAgICAgKiAgICAgICAgICAvIFxcXG4gICAgICogICAgICAgICAvICAgXFxyICAgICBfLi1FXG4gICAgICogICAgICAgIC8gICAgIFxcIF8uLSdcbiAgICAgKiAgICAgICAvICAgIF8uLUlcbiAgICAgKiAgICAgIC8gXy4tJ1xuICAgICAqICAgICBTLSdcbiAgICAgKlxuICAgICAqIFMgPSBzdGFydCBvZiBjaXJjbGUncyBwYXRoXG4gICAgICogRSA9IGVuZCBvZiBjaXJjbGUncyBwYXRoXG4gICAgICogTFRSQiA9IHNpZGVzIG9mIHRoZSByZWN0YW5nbGVcbiAgICAgKiBJID0ge2l4LCBpWX0gPSBwb2ludCBhdCB3aGljaCB0aGUgY2lyY2xlIGludGVyc2VjdHMgd2l0aCB0aGUgcmVjdGFuZ2xlXG4gICAgICogQyA9IGNvcm5lciBvZiBpbnRlcnNlY3Rpb24gKGFuZCBjb2xsaXNpb24gcG9pbnQpXG4gICAgICogQz0+SSAocikgPSB7bngsIG55fSA9IHJhZGl1cyBhbmQgaW50ZXJzZWN0aW9uIG5vcm1hbFxuICAgICAqIFM9PkMgPSBjb3JuZXJkaXN0XG4gICAgICogUz0+SSA9IGludGVyc2VjdGlvbkRpc3RhbmNlXG4gICAgICogUz0+RSA9IGxpbmVMZW5ndGhcbiAgICAgKiA8UyA9IGlubmVyQW5nbGVcbiAgICAgKiA8SSA9IGFuZ2xlMVxuICAgICAqIDxDID0gYW5nbGUyXG4gICAgICovXG4gICAgbGV0IGludmVyc2VSYWRpdXMgPSAxIC8gcjtcbiAgICBsZXQgbGluZUxlbmd0aCA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gICAgbGV0IGNvcm5lcmR4ID0gY29ybmVyWCAtIHAxLng7XG4gICAgbGV0IGNvcm5lcmR5ID0gY29ybmVyWSAtIHAxLnk7XG4gICAgbGV0IGNvcm5lckRpc3RhbmNlID0gTWF0aC5zcXJ0KGNvcm5lcmR4ICogY29ybmVyZHggKyBjb3JuZXJkeSAqIGNvcm5lcmR5KTtcbiAgICBsZXQgaW5uZXJBbmdsZSA9IE1hdGguYWNvcygoY29ybmVyZHggKiBkeCArIGNvcm5lcmR5ICogZHkpIC8gKGxpbmVMZW5ndGggKiBjb3JuZXJEaXN0YW5jZSkpO1xuXG4gICAgLy8gSWYgdGhlIGNpcmNsZSBpcyB0b28gY2xvc2UsIG5vIGludGVyc2VjdGlvblxuICAgIGlmIChjb3JuZXJEaXN0YW5jZSA8IHIpIHJldHVybjtcblxuICAgIC8vIElmIGlubmVyIGFuZ2xlIGlzIHplcm8sIGl0J3MgZ29pbmcgdG8gaGl0IHRoZSBjb3JuZXIgc3RyYWlnaHQgb24uXG4gICAgaWYgKGlubmVyQW5nbGUgPT09IDApIHtcbiAgICAgIGxldCB0aW1lID0gKGNvcm5lckRpc3RhbmNlIC0gcikgLyBsaW5lTGVuZ3RoO1xuXG4gICAgICAgIC8vIElnbm9yZSBpZiB0aW1lIGlzIG91dHNpZGUgYm91bmRhcmllcyBvZiAocDEsIHAyKVxuICAgICAgICBpZiAodGltZSA+IDEgfHwgdGltZSA8IDApIHJldHVybjtcblxuICAgICAgICBsZXQgaXggPSB0aW1lICogZHggKyBwMS54O1xuICAgICAgICBsZXQgaXkgPSB0aW1lICogZHkgKyBwMS55O1xuICAgICAgICBsZXQgbnggPSBjb3JuZXJkeCAvIGNvcm5lckRpc3RhbmNlO1xuICAgICAgICBsZXQgbnkgPSBjb3JuZXJkeSAvIGNvcm5lckRpc3RhbmNlO1xuXG4gICAgICAgIHJldHVybiBpc05hTihpeCkgPyB1bmRlZmluZWQgOiB7IHg6IGl4LCB5OiBpeSwgdDogdGltZSwgbngsIG55LCBpeDogY29ybmVyWCwgaXk6IGNvcm5lclkgfTtcbiAgICB9XG5cbiAgICBsZXQgaW5uZXJBbmdsZVNpbiA9IE1hdGguc2luKGlubmVyQW5nbGUpO1xuICAgIGxldCBhbmdsZTFTaW4gPSBpbm5lckFuZ2xlU2luICogY29ybmVyRGlzdGFuY2UgKiBpbnZlcnNlUmFkaXVzO1xuXG4gICAgLy8gSWYgdGhlIGFuZ2xlIGlzIHRvbyBsYXJnZSwgdGhlcmUgaXMgbm8gY29sbGlzaW9uXG4gICAgaWYgKE1hdGguYWJzKGFuZ2xlMVNpbikgPiAxKSByZXR1cm47XG5cbiAgICBsZXQgYW5nbGUxID0gTWF0aC5QSSAtIE1hdGguYXNpbihhbmdsZTFTaW4pO1xuICAgIGxldCBhbmdsZTIgPSBNYXRoLlBJIC0gaW5uZXJBbmdsZSAtIGFuZ2xlMTtcbiAgICBsZXQgaW50ZXJzZWN0aW9uRGlzdGFuY2UgPSByICogTWF0aC5zaW4oYW5nbGUyKSAvIGlubmVyQW5nbGVTaW47XG4gICAgbGV0IHRpbWUgPSBpbnRlcnNlY3Rpb25EaXN0YW5jZSAvIGxpbmVMZW5ndGg7XG5cbiAgICAvLyBJZ25vcmUgaWYgdGltZSBpcyBvdXRzaWRlIGJvdW5kYXJpZXMgb2YgKHAxLCBwMilcbiAgICBpZiAodGltZSA+IDEgfHwgdGltZSA8IDApIHJldHVybjtcblxuICAgIGxldCBpeCA9IHRpbWUgKiBkeCArIHAxLng7XG4gICAgbGV0IGl5ID0gdGltZSAqIGR5ICsgcDIueTtcbiAgICBsZXQgbnggPSAoaXggLSBjb3JuZXJYKSAqIGludmVyc2VSYWRpdXM7XG4gICAgbGV0IG55ID0gKGl5IC0gY29ybmVyWSkgKiBpbnZlcnNlUmFkaXVzO1xuXG4gICAgcmV0dXJuIGlzTmFOKGl4KSA/IHVuZGVmaW5lZCA6IHsgeDogaXgsIHk6IGl5LCB0OiB0aW1lLCBueCwgbnksIGl4OiBjb3JuZXJYLCBpeTogY29ybmVyWSB9O1xuICB9LFxuXG4gIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE4NjgzMTc5L2hvdy10by1maXgtY2lyY2xlcy1vdmVybGFwLWluLWNvbGxpc2lvbi1yZXNwb25zZVxuICAvL1xuICAvLyBUaGlzIGlzIGFuIGluY3JlZGlibHkgc2ltcGxlIGltcGxlbWVudGF0aW9uIHRoYXQgQVNTVU1FUyB2ZXJ5IHNtYWxsIHZlbG9jaXRpZXMuIEl0IGRvZXNuJ3QgYXR0ZW1wdFxuICAvLyB0byBhbnN3ZXIgdGhlIHF1ZXN0aW9uIGFib3V0IFwid2hlblwiIHRoZSBpbnRlcnNlY3Rpb24gaGFwcGVuZWQgbGlrZSB0aGUgbWV0aG9kIGFib3ZlIC0gbWF5XG4gIC8vIGZpeCB0aGF0IGluIGZ1dHVyZS5cbiAgaW50ZXJzZWN0Q2lyY2xlQ2lyY2xlMihwMSwgcjEsIHYxLCBwMiwgcjIsIHYyKSB7XG4gICAgW3YxLCB2Ml0gPSBbR2VvbWV0cnkudmVjdG9yMnBvaW50KHYxKSwgR2VvbWV0cnkudmVjdG9yMnBvaW50KHYyKV07XG4gICAgbGV0IGExID0geyB4OiBwMS54ICsgdjEueCwgeTogcDEueSArIHYxLnkgfTtcbiAgICBsZXQgYTIgPSB7IHg6IHAyLnggKyB2Mi54LCB5OiBwMi55ICsgdjIueSB9O1xuICAgIGxldCBkZWx0YSA9IEdlb21ldHJ5LnZlY3RvckJldHdlZW4oYTEsIGEyKTtcbiAgICBpZiAoZGVsdGEubSA8IHIxICsgcjIpIHtcbiAgICAgIHJldHVybiB7IG54OiBkZWx0YS54LCBueTogZGVsdGEueSwgbTogcjEgKyByMiAtIGRlbHRhLm0gfTtcbiAgICB9XG4gIH0sXG5cbiAgZmxvb2QobWF6ZSwgcG9zLCBtYXhEaXN0YW5jZSA9IEluZmluaXR5KSB7XG4gICAgbGV0IHJlc3VsdCA9IEdlb21ldHJ5LmFycmF5MmQobWF6ZVswXS5sZW5ndGgsIG1hemUubGVuZ3RoLCBJbmZpbml0eSk7XG4gICAgbGV0IHN0YWNrID0gW3sgLi4ucG9zLCBjb3N0OiAwIH1dO1xuICAgIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICBsZXQgeyBxLCByLCBjb3N0IH0gPSBzdGFjay5zaGlmdCgpO1xuICAgICAgaWYgKHJlc3VsdFtyXVtxXSA8PSBjb3N0KSBjb250aW51ZTtcbiAgICAgIHJlc3VsdFtyXVtxXSA9IGNvc3QrKztcbiAgICAgIGlmIChyZXN1bHRbcl1bcV0gPj0gbWF4RGlzdGFuY2UpIGNvbnRpbnVlO1xuICAgICAgaWYgKG1hemVbcl1bcSArIDFdICYmIHJlc3VsdFtyXVtxICsgMV0gPiBjb3N0KSBzdGFjay5wdXNoKHsgcTogcSArIDEsIHIsIGNvc3QgfSk7XG4gICAgICBpZiAobWF6ZVtyXVtxIC0gMV0gJiYgcmVzdWx0W3JdW3EgLSAxXSA+IGNvc3QpIHN0YWNrLnB1c2goeyBxOiBxIC0gMSwgciwgY29zdCB9KTtcbiAgICAgIGlmIChtYXplW3IgKyAxXVtxXSAmJiByZXN1bHRbciArIDFdW3FdID4gY29zdCkgc3RhY2sucHVzaCh7IHEsIHI6IHIgKyAxLCBjb3N0IH0pO1xuICAgICAgaWYgKG1hemVbciAtIDFdW3FdICYmIHJlc3VsdFtyIC0gMV1bcV0gPiBjb3N0KSBzdGFjay5wdXNoKHsgcSwgcjogciAtIDEsIGNvc3QgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG5cbiAgYXJyYXkyZCh3aWR0aCwgaGVpZ2h0LCB2YWx1ZSkge1xuICAgIGxldCBmbiA9IHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlIDogKCkgPT4gdmFsdWU7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oeyBsZW5ndGg6IGhlaWdodCB9LCAoKSA9PiBBcnJheS5mcm9tKHsgbGVuZ3RoOiB3aWR0aCB9LCBmbikpO1xuICB9LFxuXG4gIHRpbGVJc1Bhc3NhYmxlKHEsIHIpIHtcbiAgICBpZiAoZ2FtZS5hY3RpdmVCYXR0bGUpIHtcbiAgICAgIGxldCByb29tID0gZ2FtZS5hY3RpdmVCYXR0bGUucm9vbTtcbiAgICAgIGlmIChxIDwgcm9vbS5xIHx8IHIgPCByb29tLnIgfHwgcSA+PSByb29tLnEgKyByb29tLncgfHwgciA+PSByb29tLnIgKyByb29tLmgpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuICEhZ2FtZS5tYXplLm1hemVbcl1bcV07XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVGhpcyBtb2R1bGUgaXMgZ2VuZXJhdGVkIGJ5IGBndWxwIHJlZnJlc2hBc3NldHNgLlxuICovXG5leHBvcnQgY29uc3QgTWFwID1cbi8qIDxnZW5lcmF0ZWQ+ICovXG57IHc6IDM0LFxuICBoOiAyNCxcbiAgcm9vbXM6XG4gICBbIFsgNSwgMSwgNSwgMywgMyBdLFxuICAgICBbIDE1LCAzLCA2LCA0LCA0IF0sXG4gICAgIFsgOCwgNSwgNCwgNSwgNSBdLFxuICAgICBbIDI4LCA3LCAzLCAzLCA2IF0sXG4gICAgIFsgMjAsIDgsIDQsIDYsIDcgXSxcbiAgICAgWyAzMCwgMTEsIDMsIDMsIDggXSxcbiAgICAgWyAxMCwgMTIsIDUsIDYsIDkgXSxcbiAgICAgWyA0LCAxMywgMSwgMSwgMSBdLFxuICAgICBbIDI5LCAxNSwgMywgMywgMTAgXSxcbiAgICAgWyAxNiwgMTksIDQsIDQsIDExIF0sXG4gICAgIFsgMjgsIDE5LCAzLCAzLCAxMiBdIF0sXG4gIHR1bm5lbHM6XG4gICBbIDQwLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAzMCxcbiAgICAgMSxcbiAgICAgMSxcbiAgICAgMSxcbiAgICAgMSxcbiAgICAgMzAsXG4gICAgIDEsXG4gICAgIDEsXG4gICAgIDEsXG4gICAgIDEsXG4gICAgIDcsXG4gICAgIDEsXG4gICAgIDEsXG4gICAgIDEsXG4gICAgIDEsXG4gICAgIDE5LFxuICAgICA0LFxuICAgICA2LFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxNyxcbiAgICAgNCxcbiAgICAgMSxcbiAgICAgMSxcbiAgICAgNCxcbiAgICAgMSxcbiAgICAgMSxcbiAgICAgMSxcbiAgICAgMSxcbiAgICAgMSxcbiAgICAgMixcbiAgICAgMTcsXG4gICAgIDMsXG4gICAgIDEsXG4gICAgIDEsXG4gICAgIDEsXG4gICAgIDIsXG4gICAgIDEsXG4gICAgIDEsXG4gICAgIDEsXG4gICAgIDEsXG4gICAgIDEsXG4gICAgIDEsXG4gICAgIDEsXG4gICAgIDIsXG4gICAgIDE2LFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAyLFxuICAgICAzLFxuICAgICA2LFxuICAgICA3LFxuICAgICAxLFxuICAgICA4LFxuICAgICAyLFxuICAgICAyLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAyLFxuICAgICAxLFxuICAgICAxLFxuICAgICAzLFxuICAgICAxLFxuICAgICAxLFxuICAgICAzLFxuICAgICAyLFxuICAgICAxLFxuICAgICAxLFxuICAgICA4LFxuICAgICA0LFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAyLFxuICAgICA1LFxuICAgICAyLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAyLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICA3LFxuICAgICAxLFxuICAgICAxLFxuICAgICA4LFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAyLFxuICAgICAyLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAyLFxuICAgICA1LFxuICAgICA2LFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICA3LFxuICAgICAzLFxuICAgICAyLFxuICAgICAyLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAyLFxuICAgICAxLFxuICAgICAxLFxuICAgICA0LFxuICAgICAxLFxuICAgICAzLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICA0LFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAyLFxuICAgICAyLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICA0LFxuICAgICAzLFxuICAgICAxLFxuICAgICAxLFxuICAgICAzLFxuICAgICAxLFxuICAgICAxLFxuICAgICAyLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAyLFxuICAgICAyLFxuICAgICAyLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAzLFxuICAgICAxLFxuICAgICAzLFxuICAgICAxLFxuICAgICAxLFxuICAgICAzLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAzLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICA0LFxuICAgICA1LFxuICAgICAyLFxuICAgICAxLFxuICAgICA1LFxuICAgICA1LFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICA0LFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAyLFxuICAgICAxLFxuICAgICAxLFxuICAgICAyLFxuICAgICA1LFxuICAgICAxLFxuICAgICA2LFxuICAgICAxLFxuICAgICAxLFxuICAgICA1LFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAzLFxuICAgICAyLFxuICAgICAyLFxuICAgICA0LFxuICAgICA0LFxuICAgICAxLFxuICAgICAxLFxuICAgICAxMyxcbiAgICAgMSxcbiAgICAgMSxcbiAgICAgMSxcbiAgICAgMSxcbiAgICAgMyxcbiAgICAgMSxcbiAgICAgMSxcbiAgICAgMixcbiAgICAgMixcbiAgICAgMSxcbiAgICAgMSxcbiAgICAgNCxcbiAgICAgMSxcbiAgICAgMSxcbiAgICAgMjEsXG4gICAgIDMsXG4gICAgIDEsXG4gICAgIDEsXG4gICAgIDIsXG4gICAgIDUsXG4gICAgIDIxLFxuICAgICAxLFxuICAgICAxLFxuICAgICAyLFxuICAgICAyLFxuICAgICAxLFxuICAgICAxLFxuICAgICA0LFxuICAgICAxLFxuICAgICAyMCxcbiAgICAgMSxcbiAgICAgMSxcbiAgICAgMSxcbiAgICAgNixcbiAgICAgMyxcbiAgICAgMSxcbiAgICAgMSxcbiAgICAgMjAsXG4gICAgIDEsXG4gICAgIDEsXG4gICAgIDEsXG4gICAgIDEsXG4gICAgIDEsXG4gICAgIDEsXG4gICAgIDEsXG4gICAgIDEsXG4gICAgIDEsXG4gICAgIDMsXG4gICAgIDEsXG4gICAgIDEsXG4gICAgIDIwLFxuICAgICAxLFxuICAgICAxLFxuICAgICAxIF0gfVxuLyogPC9nZW5lcmF0ZWQ+ICovXG47XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGh0dHBzOi8vam91cm5hbC5zdHVmZndpdGhzdHVmZi5jb20vMjAxNC8xMi8yMS9yb29tcy1hbmQtbWF6ZXMvXG5cbmltcG9ydCB7IENvbnN0YW50cyBhcyBDIH0gZnJvbSAnLi9Db25zdGFudHMnO1xuaW1wb3J0IHsgR2VvbWV0cnkgYXMgRyB9IGZyb20gJy4vR2VvbWV0cnknO1xuaW1wb3J0IHsgTWFwIH0gZnJvbSAnLi9NYXAtZ2VuJztcblxuLy8gTWF6ZSBHZW5lcmF0b3IgLSBUT0RPXG4vL1xuLy9cbmV4cG9ydCBjb25zdCBNYXBMb2FkZXIgPSB7XG4gICAgY3JlYXRlUm9vbUxvb2t1cChyb29tcykge1xuICAgICAgICByZXR1cm4gcm9vbXMucmVkdWNlKChoYXNoLCByb29tKSA9PiB7XG4gICAgICAgICAgICBoYXNoW3Jvb20ucm9vbU51bWJlcl0gPSByb29tO1xuICAgICAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgICAgIH0sIHt9KTtcbiAgICB9LFxuXG4gICAgY3JlYXRlV2FsbHMobWF6ZSwgcm9vbXMpIHtcbiAgICAgICAgbGV0IHdhbGxzID0gRy5hcnJheTJkKG1hemVbMF0ubGVuZ3RoLCBtYXplLmxlbmd0aCwgMCk7XG4gICAgICAgIGNvbnNvbGUubG9nKG1hemVbMF0ubGVuZ3RoLCBtYXplLmxlbmd0aCwgXCJmb29rXCIpO1xuICAgICAgICBmb3IgKGxldCByID0gMDsgciA8IHdhbGxzLmxlbmd0aDsgcisrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBxID0gMDsgcSA8IHdhbGxzWzBdLmxlbmd0aDsgcSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1hemVbcl1bcV0pIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJvb20gPSByb29tc1ttYXplW3JdW3FdXTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtYXplWzE4XVs1XSk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocixxLHJvb20sbWF6ZVtyKzFdKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cod2FsbHNbcl0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtYXplW3ItMV1bcV0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtYXplW3IrMV1bcV0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtYXplW3JdW3EgLTFdKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cobWF6ZVtyXVtxICsxXSk7XG4gICAgICAgICAgICAgICAgICAgIHdhbGxzW3JdW3FdID0gKG1hemVbciAtIDFdW3FdID8gMCA6IEMuV0FMTF9UT1ApIHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobWF6ZVtyXVtxICsgMV0gPyAwIDogQy5XQUxMX1JJR0hUKSB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG1hemVbciArIDFdW3FdID8gMCA6IEMuV0FMTF9CT1RUT00pIHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobWF6ZVtyXVtxIC0gMV0gPyAwIDogQy5XQUxMX0xFRlQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyb29tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YWxsc1tyXVtxXSB8PSAobWF6ZVtyIC0gMV1bcV0gJiYgciA9PT0gcm9vbS5yID8gQy5PUEVOX1RPUCA6IDApIHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtYXplW3JdW3EgKyAxXSAmJiBxID09PSByb29tLnEgKyByb29tLndpZHRoIC0gMSA/IEMuT1BFTl9SSUdIVCA6IDApIHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtYXplW3IgKyAxXVtxXSAmJiByID09PSByb29tLnIgKyByb29tLmhlaWdodCAtIDEgPyBDLk9QRU5fQk9UVE9NIDogMCkgfFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG1hemVbcl1bcSAtIDFdICYmIHEgPT09IHJvb20ucSA/IEMuT1BFTl9MRUZUIDogMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdhbGxzO1xuICAgIH0sXG5cbiAgICBjcmVhdGVUaWxlcyhtYXplLCByYW5kKSB7XG4gICAgICAgIGxldCB0aWxlcyA9IEcuYXJyYXkyZChtYXplWzBdLmxlbmd0aCwgbWF6ZS5sZW5ndGgsICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAocmFuZCgpIDwgMC4xID8gQy5USUxFX1dBTEwyIDogQy5USUxFX1dBTEwxKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAobGV0IHIgPSAwOyByIDwgdGlsZXMubGVuZ3RoOyByKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHEgPSAwOyBxIDwgdGlsZXNbMF0ubGVuZ3RoOyBxKyspIHtcbiAgICAgICAgICAgICAgICBpZiAobWF6ZVtyXVtxXSkge1xuICAgICAgICAgICAgICAgICAgICB0aWxlc1tyXVtxXSA9IEMuVElMRV9GTE9PUjE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aWxlcztcbiAgICB9LFxuXG4gICAgbG9hZCgpIHtcbiAgICAgICAgbGV0IG1hemUgPSBHLmFycmF5MmQoTWFwLncsIE1hcC5oLCAwKTtcbiAgICAgICAgbGV0IHJvb21zID0gTWFwLnJvb21zLm1hcChyb29tID0+ICh7XG4gICAgICAgICAgICBxOiByb29tWzBdLCByOiByb29tWzFdLCB3OiByb29tWzJdLCBoOiByb29tWzNdLCByb29tTnVtYmVyOiByb29tWzRdXG4gICAgICAgIH0pKTtcblxuICAgICAgICBsZXQgcHRyID0gMDtcbiAgICAgICAgZm9yIChsZXQgbmV4dCBvZiBNYXAudHVubmVscykge1xuICAgICAgICAgICAgcHRyICs9IG5leHQ7XG4gICAgICAgICAgICBtYXplWyhwdHIgLyBNYXAudykgfCAwXVtwdHIgJSBNYXAud10gPSAyO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgcm9vbSBvZiByb29tcykge1xuICAgICAgICAgICAgZm9yIChsZXQgciA9IDA7IHIgPCByb29tLmg7IHIrKykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHEgPSAwOyBxIDwgcm9vbS53OyBxKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbWF6ZVtyb29tLnIgKyByXVtyb29tLnEgKyBxXSA9IHJvb20ucm9vbU51bWJlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcm9vbUxvb2t1cCA9IHRoaXMuY3JlYXRlUm9vbUxvb2t1cChyb29tcyk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1hemUsXG4gICAgICAgICAgICB3YWxsczogdGhpcy5jcmVhdGVXYWxscyhtYXplLCByb29tTG9va3VwKSxcbiAgICAgICAgICAgIHRpbGVzOiB0aGlzLmNyZWF0ZVRpbGVzKG1hemUsIE1hdGgucmFuZG9tKSxcbiAgICAgICAgICAgIHJvb21zOiByb29tTG9va3VwXG4gICAgICAgIH07XG4gICAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgU3ByaXRlIH0gZnJvbSAnLi9Bc3NldHMnO1xuaW1wb3J0IHsgQ2FudmFzIH0gZnJvbSAnLi9DYW52YXMnO1xuXG5jb25zdCBDX1dJRFRIID0gMztcbmNvbnN0IENfSEVJR0hUID0gNTtcblxuLy8gVmVyeSBzaW1wbGUgdmFyaWFibGUtd2lkdGggZm9udCBpbXBsZW1lbnRhdGlvbi4gVGhlIGNoYXJhY3RlcnMgaW4gdGhlIGZvbnQgc3RyaXBcbi8vIGFyZSBsZWZ0LWFsaWduZWQgaW4gdGhlaXIgM3g1IHBpeGVsIGJveGVzLCBzbyBpbiBvcmRlciB0byBoYXZlIHZhcmlhYmxlIHdpZHRoLFxuLy8gd2UganVzdCBuZWVkIHRvIG5vdGUgdGhlIGNoYXJhY3RlcnMgdGhhdCBBUkVOJ1QgZnVsbCB3aWR0aC4gQW55dGhpbmcgbm90IGluXG4vLyB0aGlzIGxpc3QgaGFzIGZ1bGwgc2hpZnQgKDMrMSA9IDQgcGl4ZWxzKS5cbmNvbnN0IENfU0hJRlQgPSB7XG4gICAgMzI6IDMsICAgICAgICAgIC8vIFNwYWNlXG4gICAgNDQ6IDMsICAgICAgICAgIC8vIENvbW1hXG4gICAgNDY6IDMsICAgICAgICAgIC8vIFBlcmlvZFxuICAgIDczOiAyICAgICAgICAgICAvLyBJXG59O1xuXG4vKipcbiAqIFRleHRcbiAqXG4gKiBVdGlsaXRpZXMgZm9yIGRyYXdpbmcgdGV4dCB1c2luZyBpbi1nYW1lIHBpeGVsIGZvbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBUZXh0ID0ge1xuICAgIGFzeW5jIGluaXQoKSB7XG4gICAgICAgIHRoaXMuZGVmYXVsdCA9IFNwcml0ZS5mb250LmltZztcbiAgICAgICAgdGhpcy5maXJlID0gdGhpcy5yZWNvbG9yKHRoaXMuZGVmYXVsdCwgY3R4ID0+IHtcbiAgICAgICAgICAgIGxldCBncmFkaWVudCA9IGN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCAwLCAwLCB0aGlzLmRlZmF1bHQuaGVpZ2h0KTtcbiAgICAgICAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgwLCAncmdiYSgyNDAsMTM0LDUxLDEpJyk7XG4gICAgICAgICAgICBncmFkaWVudC5hZGRDb2xvclN0b3AoMSwgJ3JnYmEoMjUwLDIyMCw3NCwxKScpO1xuICAgICAgICAgICAgcmV0dXJuIGdyYWRpZW50O1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zaGFkb3cgPSB0aGlzLnJlY29sb3IodGhpcy5kZWZhdWx0LCAncmdiYSgyNDAsIDI0MCwgMjU1LCAwLjI1KScpO1xuICAgIH0sXG5cbiAgICBkcmF3VGV4dChjdHgsIHRleHQsIHUsIHYsIGZvbnQgPSB0aGlzLmRlZmF1bHQsIHNjYWxlID0gMSkge1xuICAgICAgICB0ZXh0ID0gdGV4dC50b1VwcGVyQ2FzZSgpO1xuICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCB0ZXh0Lmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIGxldCBjID0gdGV4dC5jaGFyQ29kZUF0KGlkeCk7XG4gICAgICAgICAgICBjdHguZHJhd0ltYWdlKFxuICAgICAgICAgICAgICAgIGZvbnQsXG4gICAgICAgICAgICAgICAgKGMgLSAzMikgKiAoQ19XSURUSCArIDEpLCAwLCBDX1dJRFRILCBDX0hFSUdIVCxcbiAgICAgICAgICAgICAgICB1LCB2LCBDX1dJRFRIICogc2NhbGUsIENfSEVJR0hUICogc2NhbGVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB1ICs9IChDX1NISUZUW2NdIHx8IChDX1dJRFRIICsgMSkpICogc2NhbGU7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZHJhd1JpZ2h0VGV4dChjdHgsIHRleHQsIHUsIHYsIGZvbnQgPSB0aGlzLmRlZmF1bHQsIHNjYWxlID0gMSkge1xuICAgICAgICB0ZXh0ID0gdGV4dC50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB1IC09IHRoaXMubWVhc3VyZVdpZHRoKHRleHQsIHNjYWxlKTtcbiAgICAgICAgdGhpcy5kcmF3VGV4dChjdHgsIHRleHQsIHUsIHYsIGZvbnQsIHNjYWxlKTtcbiAgICB9LFxuXG4gICAgZHJhd1BhcmFncmFwaChjdHgsIHRleHQsIHUsIHYsIHcsIGgsIGZvbnQgPSB0aGlzLmRlZmF1bHQsIHNjYWxlID0gMSkge1xuICAgICAgICBsZXQgY3UgPSB1LCBjdiA9IHYsIHBocmFzZXMgPSB0ZXh0LnRvVXBwZXJDYXNlKCkuc3BsaXQoJyAnKTtcblxuICAgICAgICBmb3IgKGxldCBwaHJhc2Ugb2YgcGhyYXNlcykge1xuICAgICAgICAgICAgbGV0IHBocmFzZVdpZHRoID0gdGhpcy5tZWFzdXJlV2lkdGgocGhyYXNlLCBzY2FsZSk7XG4gICAgICAgICAgICBpZiAoY3UgKyBwaHJhc2VXaWR0aCAtIHUgPiB3KSB7XG4gICAgICAgICAgICAgICAgY3UgPSB1O1xuICAgICAgICAgICAgICAgIGN2ICs9IChDX0hFSUdIVCArIDIpICogc2NhbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRyYXdUZXh0KGN0eCwgcGhyYXNlLCBjdSwgY3YsIGZvbnQsIHNjYWxlKTtcbiAgICAgICAgICAgIGN1ICs9IHBocmFzZVdpZHRoICsgKENfU0hJRlRbMzJdIHx8IDQpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1lYXN1cmVXaWR0aCh0ZXh0LCBzY2FsZSkge1xuICAgICAgICByZXR1cm4gdGV4dC5zcGxpdCgnJykucmVkdWNlKChzdW0sIGMpID0+IHN1bSArIChDX1NISUZUW2MuY2hhckNvZGVBdCgwKV0gfHwgNCksIDApICogc2NhbGU7XG4gICAgfSxcblxuICAgIHJlY29sb3IoZm9udCwgY29sb3IpIHtcbiAgICAgICAgbGV0IGNhbnZhcyA9IG5ldyBDYW52YXMoZm9udC53aWR0aCwgZm9udC5oZWlnaHQpO1xuICAgICAgICBjYW52YXMuY3R4LmZpbGxTdHlsZSA9IHR5cGVvZiBjb2xvciA9PT0gXCJmdW5jdGlvblwiID8gY29sb3IoY2FudmFzLmN0eCkgOiBjb2xvcjtcbiAgICAgICAgY2FudmFzLmN0eC5maWxsUmVjdCgwLCAwLCBmb250LndpZHRoLCBmb250LmhlaWdodCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGZvbnQud2lkdGgsIGZvbnQuaGVpZ2h0LCBjb2xvciwgY2FudmFzKTtcbiAgICAgICAgY2FudmFzLmN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnZGVzdGluYXRpb24taW4nO1xuICAgICAgICBjYW52YXMuY3R4LmRyYXdJbWFnZShmb250LCAwLCAwKTtcbiAgICAgICAgcmV0dXJuIGNhbnZhcy5jYW52YXM7XG4gICAgfSxcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IGdhbWUgfSBmcm9tICcuL0dhbWUnO1xuaW1wb3J0IHsgR2VvbWV0cnkgYXMgRyB9IGZyb20gJy4vR2VvbWV0cnknO1xuaW1wb3J0IHsgQ29uc3RhbnRzIGFzIEMgfSBmcm9tICcuL0NvbnN0YW50cyc7XG5cbi8qKlxuICogRGV0ZWN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBEZXRlY3Rpb24gPSB7XG4gIGxpbmVPZlNpZ2h0KGEsIGIpIHtcbiAgICAgIC8vIHRvZG86IHRoaXMgY2hlY2tzIGNlbnRlciBtYXNzXG4gICAgICBmb3IgKGxldCB0aWxlIG9mIEcudGlsZXNIaXRCZXR3ZWVuKGEucG9zLCBiLnBvcykpIHtcbiAgICAgICAgaWYgKCFHLnRpbGVJc1Bhc3NhYmxlKHRpbGUucSwgdGlsZS5yKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyB0b2RvOiBkaXN0YW5jZSBhd2F5XG4gICAgICAvLyB0b2RvOiBmYWNpbmcgY2hlY2tcbiAgICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEJlaGF2aW9yXG4gKi9cbmV4cG9ydCBjb25zdCBCZWhhdmlvciA9IHtcbiAgSURMRTogICAxMDEsXG4gIFdBTkRFUjogMTAyLFxuICBDSEFTRTogIDEwMyxcbiAgSFVOVDogICAxMDQsXG4gIEZMRUU6ICAgMTA1LFxuICBERUFEOiAgIDEwNixcblxuICBBVFRBQ0s6IDIwMSxcbiAgUkVMT0FEOiAyMDIsXG5cbiAgYXBwbHkoZW50aXRpZXMpIHtcbiAgICBmb3IgKGxldCBlbnRpdHkgb2YgZW50aXRpZXMpIHtcbiAgICAgIGlmIChlbnRpdHkudGhpbmspIGVudGl0eS50aGluaygpO1xuICAgIH1cbiAgfVxufTtcbiIsImltcG9ydCB7IGdhbWUgfSBmcm9tICcuL0dhbWUnO1xuaW1wb3J0IHsgU3ByaXRlIH0gZnJvbSAnLi9Bc3NldHMnO1xuaW1wb3J0IHsgSW5wdXQgfSBmcm9tICcuL2lucHV0L0lucHV0JztcbmltcG9ydCB7IEdlb21ldHJ5IGFzIEcgfSBmcm9tICcuL0dlb21ldHJ5JztcbmltcG9ydCB7IERldGVjdGlvbiB9IGZyb20gJy4vRGV0ZWN0aW9uJztcbmltcG9ydCB7IEJlaGF2aW9yIH0gZnJvbSAnLi9zeXN0ZW1zL0JlaGF2aW9yJztcblxuLyoqXG4gKiBNb25zdGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBNb25zdGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5wb3MgPSB7IHg6IDAsIHk6IDAgfTtcbiAgICB0aGlzLnZlbCA9IHsgeDogMCwgeTogMCB9O1xuICAgIHRoaXMuZmFjaW5nID0geyB4OiAwLCB5OiAtMSwgbTogMCB9O1xuICAgIHRoaXMuaHAgPSAxMDA7XG4gICAgdGhpcy5kYW1hZ2UgPSBbXTtcbiAgICB0aGlzLnJhZGl1cyA9IDExO1xuXG4gICAgdGhpcy5tYXNzID0gMC41O1xuICB9XG5cbiAgdGhpbmsoKSB7XG4gICAgc3dpdGNoICh0aGlzLnN0YXRlKSB7XG4gICAgICBjYXNlIEJlaGF2aW9yLklETEU6XG4gICAgICAgIGlmIChEZXRlY3Rpb24ubGluZU9mU2lnaHQodGhpcywgZ2FtZS5wbGF5ZXIpKSB7XG4gICAgICAgICAgdGhpcy5zdGF0ZSA9IEJlaGF2aW9yLkNIQVNFO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBCZWhhdmlvci5DSEFTRTpcbiAgICAgICAgbGV0IGRpZmYgPSBHLnZlY3RvckJldHdlZW4odGhpcy5wb3MsIGdhbWUucGxheWVyLnBvcyk7XG4gICAgICAgIGRpZmYubSA9IEcuY2xhbXAoZGlmZi5tLCAwLCAxKTtcbiAgICAgICAgdGhpcy52ZWwgPSB7IHg6IGRpZmYueCAqIGRpZmYubSwgeTogZGlmZi55ICogZGlmZi5tIH07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBCZWhhdmlvci5ERUFEOlxuICAgICAgICB0aGlzLnZlbCA9IHsgeDogMCwgeTogMCwgbTogMCB9O1xuICAgICAgICBpZiAoIXRoaXMuY3VsbHQpIHRoaXMuY3VsbHQgPSAxNTtcbiAgICAgICAgdGhpcy5jdWxsdC0tO1xuICAgICAgICBpZiAodGhpcy5jdWxsdCA8IDEpIHRoaXMuY3VsbCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhpcy5zdGF0ZSA9IEJlaGF2aW9yLklETEU7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGRyYXcodmlld3BvcnQpIHtcbiAgICAvLyBUT0RPXG4gICAgaWYgKHRoaXMuc3RhdGUgPT09IEJlaGF2aW9yLkRFQUQpIHtcbiAgICAgIFNwcml0ZS5kcmF3Vmlld3BvcnRTcHJpdGUodmlld3BvcnQsIFNwcml0ZS5tb25zdGVyX2RlYWQsIHRoaXMucG9zLCBnYW1lLmNhbWVyYS5wb3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBTcHJpdGUuZHJhd1ZpZXdwb3J0U3ByaXRlKHZpZXdwb3J0LCBTcHJpdGUubW9uc3RlciwgdGhpcy5wb3MsIGdhbWUuY2FtZXJhLnBvcyk7XG4gICAgfVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IGdhbWUgfSBmcm9tICcuL0dhbWUnO1xuaW1wb3J0IHsgTW9uc3RlciB9IGZyb20gJy4vTW9uc3Rlcic7XG5pbXBvcnQgeyBTcHJpdGUgfSBmcm9tICcuL0Fzc2V0cyc7XG5pbXBvcnQgeyBHZW9tZXRyeSBhcyBHIH0gZnJvbSAnLi9HZW9tZXRyeSc7XG5pbXBvcnQgeyB2aWV3cG9ydCB9IGZyb20gJy4vVmlld3BvcnQnO1xuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAnLi9QbGF5ZXInO1xuXG5leHBvcnQgY2xhc3MgU2hvdGd1bkJsYXN0IHtcbiAgY29uc3RydWN0b3IocG9zLCBhbmdsZSkge1xuICAgIHRoaXMucG9zID0geyAuLi5wb3MgfTtcbiAgICB0aGlzLmFuZ2xlID0gYW5nbGU7XG4gICAgdGhpcy5zcHJlYWQgPSBHLlJBRFs3MF07XG4gICAgdGhpcy5yYW5nZSA9IDU1O1xuICB9XG5cbiAgdGhpbmsoKSB7XG4gICAgdGhpcy50ID0gKHRoaXMudCB8fCAwKSArIDE7XG5cbiAgICBpZiAodGhpcy50ID09PSAzKSB7XG4gICAgICBsZXQgZW50aXRpZXMgPSBnYW1lLmVudGl0aWVzLmZpbHRlcihlbnRpdHkgPT4gZW50aXR5LmhwICYmICEoZW50aXR5IGluc3RhbmNlb2YgUGxheWVyKSk7XG4gICAgICBmb3IgKGxldCBlbnRpdHkgb2YgZW50aXRpZXMpIHtcbiAgICAgICAgbGV0IHZlY3QgPSBHLnZlY3RvckJldHdlZW4odGhpcy5wb3MsIGVudGl0eS5wb3MpO1xuICAgICAgICBpZiAodmVjdC5tID49IHRoaXMucmFuZ2UgKyBlbnRpdHkucmFkaXVzKSBjb250aW51ZTtcblxuICAgICAgICBsZXQgZG90MSA9IEcudmVjdG9yQmV0d2VlbihcbiAgICAgICAgICB0aGlzLnBvcyxcbiAgICAgICAgICB7IHg6IGVudGl0eS5wb3MueCAtIHZlY3QueSAqIGVudGl0eS5yYWRpdXMsIHk6IGVudGl0eS5wb3MueSArIHZlY3QueCAqIGVudGl0eS5yYWRpdXMgfVxuICAgICAgICApO1xuICAgICAgICBsZXQgZG90MiA9IEcudmVjdG9yQmV0d2VlbihcbiAgICAgICAgICB0aGlzLnBvcyxcbiAgICAgICAgICB7IHg6IGVudGl0eS5wb3MueCArIHZlY3QueSAqIGVudGl0eS5yYWRpdXMsIHk6IGVudGl0eS5wb3MueSAtIHZlY3QueCAqIGVudGl0eS5yYWRpdXMgfVxuICAgICAgICApO1xuICAgICAgICBsZXQgc2lkZXMgPSBbRy52ZWN0b3IyYW5nbGUoZG90MSksIEcudmVjdG9yMmFuZ2xlKGRvdDIpXTtcbiAgICAgICAgbGV0IG92ZXJsYXAgPSBHLmFyY092ZXJsYXAoc2lkZXNbMF0sIHNpZGVzWzFdLCB0aGlzLmFuZ2xlIC0gdGhpcy5zcHJlYWQgLyAyLCB0aGlzLmFuZ2xlICsgdGhpcy5zcHJlYWQgLyAyKTtcbiAgICAgICAgaWYgKCFvdmVybGFwKSBjb250aW51ZTtcblxuICAgICAgICBsZXQgd2FsbEhpdCA9IFtdO1xuICAgICAgICBsZXQgayA9IEcudmVjdG9yQWRkKHRoaXMucG9zLCBHLmFuZ2xlMnZlY3RvcihzaWRlc1swXSwgdmVjdC5tKSk7XG4gICAgICAgIGZvciAobGV0IHRpbGUgb2YgRy50aWxlc0hpdEJ5KHRoaXMucG9zLCBHLmFuZ2xlMnZlY3RvcihzaWRlc1swXSwgdmVjdC5tKSkpIHtcbiAgICAgICAgICBpZiAoIUcudGlsZUlzUGFzc2FibGUodGlsZS5xLCB0aWxlLnIpKSB7XG4gICAgICAgICAgICB3YWxsSGl0LnB1c2godGlsZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgdGlsZSBvZiBHLnRpbGVzSGl0QnkodGhpcy5wb3MsIEcuYW5nbGUydmVjdG9yKHNpZGVzWzFdLCB2ZWN0Lm0pKSkge1xuICAgICAgICAgIGlmICghRy50aWxlSXNQYXNzYWJsZSh0aWxlLnEsIHRpbGUucikpIHtcbiAgICAgICAgICAgIHdhbGxIaXQucHVzaCh0aWxlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3YWxsSGl0Lmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAvLyBoaXRcbiAgICAgICAgICBlbnRpdHkuZGFtYWdlLnB1c2goeyBhbW91bnQ6IDEwMCwgdmVjdG9yOiB2ZWN0LCBrbm9ja2JhY2s6IDkgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy50ID4gNikgdGhpcy5jdWxsID0gdHJ1ZTtcbiAgfVxuXG4gIGRyYXcodmlld3BvcnQpIHtcbiAgICAvLyBUT0RPXG4gICAgLy9TcHJpdGUuZHJhd1ZpZXdwb3J0U3ByaXRlKHZpZXdwb3J0LCBTcHJpdGUubW9uc3RlciwgdGhpcy5wb3MsIGdhbWUuY2FtZXJhLnBvcyk7XG4gICAgbGV0IHV2ID0gRy54eTJ1dih0aGlzLnBvcyk7XG4gICAgdmlld3BvcnQuY3R4LmJlZ2luUGF0aCgpO1xuICAgIHZpZXdwb3J0LmN0eC5hcmModXYudSwgdXYudiwgdGhpcy5yYW5nZSwgdGhpcy5hbmdsZSAtIHRoaXMuc3ByZWFkIC8gMiwgdGhpcy5hbmdsZSArIHRoaXMuc3ByZWFkIC8gMik7XG4gICAgdmlld3BvcnQuY3R4LmxpbmVUbyh1di51LCB1di52KTtcbiAgICB2aWV3cG9ydC5jdHguY2xvc2VQYXRoKCk7XG4gICAgdmlld3BvcnQuY3R4LmZpbGxTdHlsZSA9ICdyZ2JhKDI1NSwgMCwgMCwgMC41KSdcbiAgICB2aWV3cG9ydC5jdHguZmlsbCgpO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IGdhbWUgfSBmcm9tICcuL0dhbWUnO1xuaW1wb3J0IHsgU3ByaXRlIH0gZnJvbSAnLi9Bc3NldHMnO1xuaW1wb3J0IHsgR2VvbWV0cnkgYXMgRyB9IGZyb20gJy4vR2VvbWV0cnknO1xuXG5leHBvcnQgY2xhc3MgUmVsb2FkQW5pbWF0aW9uIHtcbiAgY29uc3RydWN0b3IoZnJhbWVzKSB7XG4gICAgdGhpcy50ID0gLTE7XG4gICAgdGhpcy5kID0gZnJhbWVzO1xuICAgIHRoaXMueiA9IDEwMTtcbiAgfVxuXG4gIHRoaW5rKCkge1xuICAgIGlmICgrK3RoaXMudCA9PT0gdGhpcy5kKSB0aGlzLmN1bGwgPSB0cnVlO1xuICB9XG5cbiAgZHJhdyh2aWV3cG9ydCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ2FtZS5wbGF5ZXIuc2hlbGxzTWF4OyBpKyspIHtcbiAgICAgIGxldCBlbmQgPSBpICogdGhpcy5kIC8gZ2FtZS5wbGF5ZXIuc2hlbGxzTWF4O1xuICAgICAgbGV0IHN0YXJ0ID0gZW5kIC0gMztcblxuICAgICAgaWYgKHRoaXMudCA+PSBzdGFydCkge1xuICAgICAgICBsZXQgeSA9IE1hdGgubWluKDEwLCAxMCArIHRoaXMudCAtIGVuZCk7XG4gICAgICAgIHZpZXdwb3J0LmN0eC5nbG9iYWxBbHBoYSA9IE1hdGgubWluKDEsIDEgKyAodGhpcy50IC0gZW5kKSAvIDEwKTtcbiAgICAgICAgdmlld3BvcnQuY3R4LmRyYXdJbWFnZShTcHJpdGUuaHVkX3NoZWxsc19mdWxsLmltZywgMTUgKyA2ICogaSwgeSk7XG4gICAgICAgIHZpZXdwb3J0LmN0eC5nbG9iYWxBbHBoYSA9IDE7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIHp6ZngoKSAtIHRoZSB1bml2ZXJzYWwgZW50cnkgcG9pbnQgLS0gcmV0dXJucyBhIEF1ZGlvQnVmZmVyU291cmNlTm9kZVxuZXhwb3J0IGNvbnN0IHp6Zng9KC4uLnQpPT56emZ4UCh6emZ4RyguLi50KSlcblxuLy8genpmeFAoKSAtIHRoZSBzb3VuZCBwbGF5ZXIgLS0gcmV0dXJucyBhIEF1ZGlvQnVmZmVyU291cmNlTm9kZVxuZXhwb3J0IGNvbnN0IHp6ZnhQPSguLi50KT0+e2xldCBlPXp6ZnhYLmNyZWF0ZUJ1ZmZlclNvdXJjZSgpLGY9enpmeFguY3JlYXRlQnVmZmVyKHQubGVuZ3RoLHRbMF0ubGVuZ3RoLHp6ZnhSKTt0Lm1hcCgoZCxpKT0+Zi5nZXRDaGFubmVsRGF0YShpKS5zZXQoZCkpLGUuYnVmZmVyPWYsZS5jb25uZWN0KHp6ZnhYLmRlc3RpbmF0aW9uKSxlLnN0YXJ0KCk7cmV0dXJuIGV9XG5cbi8vIHp6ZnhHKCkgLSB0aGUgc291bmQgZ2VuZXJhdG9yIC0tIHJldHVybnMgYW4gYXJyYXkgb2Ygc2FtcGxlIGRhdGFcbmV4cG9ydCBjb25zdCB6emZ4Rz0oYT0xLHQ9LjA1LGg9MjIwLE09MCxuPTAscz0uMSxpPTAscj0xLG89MCx6PTAsZT0wLGY9MCxtPTAseD0wLGI9MCxkPTAsdT0wLGM9MSxHPTAsST16emZ4UixQPTk5K00qSSxWPW4qSSxnPXMqSSxqPUcqSSxrPXUqSSxsPTIqTWF0aC5QSSxwPShhPT4wPGE/MTotMSkscT1QK2orVitnK2ssdj0obyo9NTAwKmwvSSoqMiksdz0oaCo9KDErMip0Kk1hdGgucmFuZG9tKCktdCkqbC9JKSx5PXAoYikqbC80LEE9MCxCPTAsQz0wLEQ9MCxFPTAsRj0wLEg9MSxKPVtdKT0+e2Zvcig7QzxxO0pbQysrXT1GKSsrRT4xMDAqZCYmKEU9MCxGPUEqaCpNYXRoLnNpbihCKmIqbC9JLXkpLEY9cChGPWk/MTxpPzI8aT8zPGk/TWF0aC5zaW4oKEYlbCkqKjMpOk1hdGgubWF4KE1hdGgubWluKE1hdGgudGFuKEYpLDEpLC0xKToxLSgyKkYvbCUyKzIpJTI6MS00Kk1hdGguYWJzKE1hdGgucm91bmQoRi9sKS1GL2wpOk1hdGguc2luKEYpKSpNYXRoLmFicyhGKSoqciphKnp6ZnhWKihDPFA/Qy9QOkM8UCtqPzEtKEMtUCkvaiooMS1jKTpDPFAraitWP2M6QzxxLWs/KHEtQy1rKS9nKmM6MCksRj1rP0YvMisoaz5DPzA6KEM8cS1rPzE6KEMtcSkvaykqSltDLWt8MF0vMik6RiksQSs9MS14KzFlOSooTWF0aC5zaW4oQykrMSklMip4LEIrPTEteCsxZTkqKE1hdGguc2luKEMpKioyKzEpJTIqeCxoKz1vKz01MDAqeipsL0kqKjMsSCYmKytIPmYqSSYmKGgrPWUqbC9JLHcrPWUqbC9JLEg9MCksbSYmKytEPm0qSSYmKGg9dyxvPXYsRD0xLEg9SHx8MSk7cmV0dXJuIEp9O1xuXG4vLyB6emZ4ViAtIGdsb2JhbCB2b2x1bWVcbmV4cG9ydCBjb25zdCB6emZ4Vj0uM1xuXG4vLyB6emZ4UiAtIGdsb2JhbCBzYW1wbGUgcmF0ZVxuZXhwb3J0IGNvbnN0IHp6ZnhSPTQ0MTAwXG5cbi8vIHp6ZnhYIC0gdGhlIGNvbW1vbiBhdWRpbyBjb250ZXh0XG5leHBvcnQgY29uc3QgenpmeFg9bmV3KHRvcC5BdWRpb0NvbnRleHR8fHdlYmtpdEF1ZGlvQ29udGV4dCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IHp6ZnhHLCB6emZ4UCwgenpmeCB9IGZyb20gJy4venpmeCc7XG5cbmV4cG9ydCBjb25zdCBBdWRpbyA9IHtcbiAgICBhc3luYyBpbml0KCkge1xuICAgICAgICAvLyBOb3RlOiB0ZXJzZXIgaGFzIGEgYnVnIHRoYXQgcHJldmVudHMgaXQgZnJvbSBoYW5kbGluZyBhIHNwcmVhZCBhcnJheSB3aXRoIGhvbGVzLlxuICAgICAgICAvLyBUaGF0IGlzOiBgZiguLi5bLCwzXSlgIGdlbmVyYXRlcyBpbnZhbGlkIGphdmFzY3JpcHQgYGYoLCwzKWAuXG4gICAgICAgIC8vIFdlIGNhbiB3b3JrIGFyb3VuZCB0aGF0IGJ1ZyB3aXRoIGEgbGl0dGxlIGhlbHBlciBzaGltLlxuICAgICAgICBsZXQgY2FjaGUgPSBzb3VuZCA9PiB6emZ4RyguLi5zb3VuZCk7XG4gICAgICAgIEF1ZGlvLnNob3RndW4gPSBjYWNoZShbLC4wMSwxNDAsLjAxLC4wMiwuNDUsNCwyLjQyLC4xLC0wLjEsLCwsMS4yLCwuMywuMDQsLjgsLjAyXSk7XG5cbiAgICB9LFxuXG4gICAgcGxheVNob3RndW4oKSB7XG4gICAgICAgIHp6ZnhQKEF1ZGlvLnNob3RndW4pO1xuLypcbiAgICAgICAgenpmeCguLi5bLCw5MjUsLjA0LC4zLC42LDEsLjMsLDYuMjcsLTE4NCwuMDksLjE3XSk7IC8vIEdhbWUgT3ZlclxuenpmeCguLi5bLCw1MzcsLjAyLC4wMiwuMjIsMSwxLjU5LC02Ljk4LDQuOTddKTsgLy8gSGVhcnRcbnp6ZngoLi4uWzEuNSwuOCwyNzAsLC4xLCwxLDEuNSwsLCwsLCwsLjEsLjAxXSk7IC8vIFBpYW5vXG56emZ4KC4uLlssLDEyOSwuMDEsLC4xNSwsLCwsLCwsNV0pOyAvLyBEcnVtXG4qL1xuICAgIH1cbn07XG4iLCJpbXBvcnQgeyBnYW1lIH0gZnJvbSAnLi9HYW1lJztcbmltcG9ydCB7IFNwcml0ZSB9IGZyb20gJy4vQXNzZXRzJztcbmltcG9ydCB7IElucHV0IH0gZnJvbSAnLi9pbnB1dC9JbnB1dCc7XG5pbXBvcnQgeyBHZW9tZXRyeSBhcyBHIH0gZnJvbSAnLi9HZW9tZXRyeSc7XG5pbXBvcnQgeyBCdWxsZXQgfSBmcm9tICcuL0J1bGxldCc7XG5pbXBvcnQgeyBTaG90Z3VuQmxhc3QgfSBmcm9tICcuL1Nob3RndW5CbGFzdCc7XG5pbXBvcnQgeyBDb25zdGFudHMgYXMgQyB9IGZyb20gJy4vQ29uc3RhbnRzJztcbmltcG9ydCB7IEJlaGF2aW9yIH0gZnJvbSAnLi9zeXN0ZW1zL0JlaGF2aW9yJztcbmltcG9ydCB7IFJlbG9hZEFuaW1hdGlvbiB9IGZyb20gJy4vUmVsb2FkQW5pbWF0aW9uJztcblxuaW1wb3J0IHsgQXVkaW8gfSBmcm9tICcuL0F1ZGlvJztcblxuLyoqXG4gKiBQbGF5ZXJcbiAqL1xuZXhwb3J0IGNsYXNzIFBsYXllciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucG9zID0geyB4OiAwLCB5OiAwIH07XG4gICAgdGhpcy52ZWwgPSB7IHg6IDAsIHk6IDAgfTtcbiAgICB0aGlzLmZhY2luZyA9IHsgeDogMCwgeTogLTEsIG06IDAgfTtcbiAgICB0aGlzLmhwID0gMTAwO1xuICAgIHRoaXMuZGFtYWdlID0gW107XG4gICAgdGhpcy5yYWRpdXMgPSAxMjtcblxuICAgIHRoaXMuc2hlbGxzTGVmdCA9IDQ7XG4gICAgdGhpcy5zaGVsbHNNYXggPSA0O1xuXG4gICAgdGhpcy5tYXNzID0gMztcbiAgfVxuXG4gIHRoaW5rKCkge1xuICAgIHN3aXRjaCAodGhpcy5zdGF0ZSkge1xuICAgICAgY2FzZSBCZWhhdmlvci5IVU5UOlxuICAgICAgICB0aGlzLmRlZmF1bHRNb3ZlbWVudCgxKTtcblxuICAgICAgICBpZiAoZ2FtZS5pbnB1dC5wcmVzc2VkW0lucHV0LkFjdGlvbi5BVFRBQ0tdKSB7XG4gICAgICAgICAgaWYgKHRoaXMuc2hlbGxzTGVmdCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5yZWxvYWQoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5maXJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdhbWUuaW5wdXQucHJlc3NlZFtJbnB1dC5BY3Rpb24uUkVMT0FEXSkge1xuICAgICAgICAgIHRoaXMucmVsb2FkKCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQmVoYXZpb3IuQVRUQUNLOlxuICAgICAgICB0aGlzLmRlZmF1bHRNb3ZlbWVudCgxKTtcbiAgICAgICAgaWYgKC0tdGhpcy5mcmFtZXMgPD0gMCkgdGhpcy5zdGF0ZSA9IEJlaGF2aW9yLkhVTlQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBCZWhhdmlvci5SRUxPQUQ6XG4gICAgICAgIHRoaXMuZGVmYXVsdE1vdmVtZW50KDIuNSk7XG4gICAgICAgIGlmICgtLXRoaXMuZnJhbWVzIDw9IDApIHtcbiAgICAgICAgICB0aGlzLnNoZWxsc0xlZnQgPSB0aGlzLnNoZWxsc01heDtcbiAgICAgICAgICB0aGlzLnN0YXRlID0gQmVoYXZpb3IuSFVOVDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMuc3RhdGUgPSBCZWhhdmlvci5IVU5UO1xuICAgICAgICB0aGlzLmZyYW1lcyA9IDA7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGRlZmF1bHRNb3ZlbWVudCh2ZWxvY2l0eUFkaikge1xuICAgIGlmIChnYW1lLnBvaW50ZXJYWSgpKSB7XG4gICAgICB0aGlzLmZhY2luZyA9IEcudmVjdG9yQmV0d2Vlbih0aGlzLnBvcywgZ2FtZS5wb2ludGVyWFkoKSk7XG4gICAgfVxuXG4gICAgbGV0IHYgPSB7XG4gICAgICB4OiBnYW1lLmlucHV0LmRpcmVjdGlvbi54ICogZ2FtZS5pbnB1dC5kaXJlY3Rpb24ubSAqIDEuOCAqIHZlbG9jaXR5QWRqLFxuICAgICAgeTogZ2FtZS5pbnB1dC5kaXJlY3Rpb24ueSAqIGdhbWUuaW5wdXQuZGlyZWN0aW9uLm0gKiAxLjggKiB2ZWxvY2l0eUFkalxuICAgIH07XG5cbiAgICB0aGlzLnZlbC54ID0gKHRoaXMudmVsLnggKyB2LngpIC8gMjtcbiAgICB0aGlzLnZlbC55ID0gKHRoaXMudmVsLnkgKyB2LnkpIC8gMjtcbiAgfVxuXG4gIGZpcmUoKSB7XG4gICAgQXVkaW8ucGxheVNob3RndW4oKTtcblxuICAgIHRoaXMuc3RhdGUgPSBCZWhhdmlvci5BVFRBQ0s7XG4gICAgdGhpcy5mcmFtZXMgPSA2O1xuICAgIHRoaXMuc2hlbGxzTGVmdC0tO1xuXG4gICAgbGV0IGFuZ2xlID0gRy52ZWN0b3IyYW5nbGUodGhpcy5mYWNpbmcpO1xuICAgIGdhbWUuZW50aXRpZXMucHVzaChuZXcgU2hvdGd1bkJsYXN0KHRoaXMucG9zLCBhbmdsZSkpO1xuXG4gICAgLy8gcGxheWVyIGtub2NrYmFja1xuICAgIHRoaXMudmVsID0gRy52ZWN0b3IycG9pbnQoeyAuLi5HLm5vcm1hbGl6ZVZlY3Rvcih0aGlzLmZhY2luZyksIG06IC0xIH0pO1xuICB9XG5cbiAgcmVsb2FkKCkge1xuICAgIHRoaXMuc3RhdGUgPSBCZWhhdmlvci5SRUxPQUQ7XG4gICAgdGhpcy5mcmFtZXMgPSAxMjtcbiAgICBnYW1lLmVudGl0aWVzLnB1c2gobmV3IFJlbG9hZEFuaW1hdGlvbih0aGlzLmZyYW1lcykpO1xuICB9XG5cbiAgZHJhdyh2aWV3cG9ydCkge1xuICAgIFNwcml0ZS5kcmF3Vmlld3BvcnRTcHJpdGUodmlld3BvcnQsIFNwcml0ZS5wbGF5ZXIsIHRoaXMucG9zLCBnYW1lLmNhbWVyYS5wb3MpO1xuXG4gICAgdmlld3BvcnQuY3R4LnN0cm9rZVN0eWxlID0gJ3JnYmEoMjU1LCAyNTUsIDY0LCAwLjMpJztcbiAgICB2aWV3cG9ydC5jdHguYmVnaW5QYXRoKCk7XG4gICAgbGV0IHV2ID0gZ2FtZS54eTJ1dih0aGlzLnBvcyk7XG4gICAgdmlld3BvcnQuY3R4LmFyYyh1di51LCB1di52LCBDLlBMQVlFUl9CT1VORF9SQURJVVMsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICB2aWV3cG9ydC5jdHguc2V0TGluZURhc2goWzIsIDFdKTtcbiAgICB2aWV3cG9ydC5jdHguc3Ryb2tlKCk7XG4gICAgdmlld3BvcnQuY3R4LnNldExpbmVEYXNoKFtdKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgZ2FtZSB9IGZyb20gJy4vR2FtZSc7XG5pbXBvcnQgeyBTcHJpdGUgfSBmcm9tICcuL0Fzc2V0cyc7XG5pbXBvcnQgeyBJbnB1dCB9IGZyb20gJy4vaW5wdXQvSW5wdXQnO1xuaW1wb3J0IHsgR2VvbWV0cnkgYXMgRyB9IGZyb20gJy4vR2VvbWV0cnknO1xuaW1wb3J0IHsgRGV0ZWN0aW9uIH0gZnJvbSAnLi9EZXRlY3Rpb24nO1xuaW1wb3J0IHsgQmVoYXZpb3IgfSBmcm9tICcuL3N5c3RlbXMvQmVoYXZpb3InO1xuaW1wb3J0IHsgQ29uc3RhbnRzIGFzIEMgfSBmcm9tICcuL0NvbnN0YW50cyc7XG5cbi8qKlxuICogTW9uc3RlclxuICovXG5leHBvcnQgY2xhc3MgU2N1bHB0b3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnBvcyA9IHsgeDogMCwgeTogMCB9O1xuICAgIHRoaXMudmVsID0geyB4OiAwLCB5OiAwIH07XG4gICAgdGhpcy5mYWNpbmcgPSB7IHg6IDAsIHk6IC0xLCBtOiAwIH07XG4gICAgdGhpcy5ocCA9IDEwMDtcbiAgICB0aGlzLmRhbWFnZSA9IFtdO1xuICAgIHRoaXMucmFkaXVzID0gMztcblxuICAgIHRoaXMubWFzcyA9IDE7XG5cbiAgICB0aGlzLmJvdW5jZSA9IHRydWU7XG4gIH1cblxuICB0aGluaygpIHtcbiAgICBzd2l0Y2ggKHRoaXMuc3RhdGUpIHtcbiAgICAgIGNhc2UgQmVoYXZpb3IuSURMRTpcbiAgICAgICAgLy8gS2ljayBvZmYgYXQgcmFuZG9tIGFuZ2xlcywgYnV0LCBpdCBsb29rcyB3ZWlyZCB0byBoYXZlIHN0cmFpZ2h0IGhvcml6b250YWxcbiAgICAgICAgLy8gb3IgdmVydGljYWwgYW5nbGVzIC0gc28gYXZvaWQgYW55dGhpbmcgd2l0aGluICstIDIwIGRlZ3JlZXMgb2YgYSBzdHJhaWdodCBhbmdsZS5cbiAgICAgICAgbGV0IGFuZ2xlID0gTWF0aC5yYW5kb20oKSAqIEMuUjM2MDtcbiAgICAgICAgaWYgKGFuZ2xlICUgQy5SOTAgPCBDLlIyMCkgYW5nbGUgKz0gQy5SMjA7XG4gICAgICAgIGlmIChhbmdsZSAlIEMuUjkwID4gQy5SNzApIGFuZ2xlIC09IEMuUjIwO1xuICAgICAgICB0aGlzLmZhY2luZyA9IEcuYW5nbGUydmVjdG9yKGFuZ2xlKTtcbiAgICAgICAgdGhpcy52ZWwgPSB0aGlzLmZhY2luZztcbiAgICAgICAgdGhpcy5zdGF0ZSA9IEJlaGF2aW9yLkNIQVNFO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQmVoYXZpb3IuQ0hBU0U6XG4gICAgICAgIGxldCBwbGF5ZXJBbmdsZSA9IEcudmVjdG9yMmFuZ2xlKEcudmVjdG9yQmV0d2Vlbih0aGlzLnBvcywgZ2FtZS5wbGF5ZXIucG9zKSk7XG4gICAgICAgIGxldCB2ZWxBbmdsZSA9IEcudmVjdG9yMmFuZ2xlKHRoaXMudmVsKTtcblxuICAgICAgICAvKmlmIChHLmNsb3Nlc3RBbmdsZURpZmZlcmVuY2UodmVsQW5nbGUsIHBsYXllckFuZ2xlKSA8IEMuUjkwKSB7XG4gICAgICAgICAgICB2ZWxBbmdsZSA9IEcuaW50ZXJtZWRpYXRlQW5nbGUodmVsQW5nbGUsIHBsYXllckFuZ2xlLCAwLjAxKTtcbiAgICAgICAgICAgIHRoaXMudmVsID0gRy5hbmdsZTJ2ZWN0b3IodmVsQW5nbGUpO1xuICAgICAgICB9Ki9cblxuICAgICAgICBsZXQgdiA9IEcubm9ybWFsaXplVmVjdG9yKHRoaXMudmVsKTtcbiAgICAgICAgdi5tID0gKHYubSArIDIuNSkgLyAyO1xuICAgICAgICB0aGlzLnZlbCA9IEcudmVjdG9yMnBvaW50KHYpO1xuXG4gICAgICAgIGxldCBkaXN0ID0gRy52ZWN0b3JCZXR3ZWVuKHRoaXMucG9zLCBnYW1lLnBsYXllci5wb3MpO1xuICAgICAgICBpZiAoZGlzdC5tIDw9IHRoaXMucmFkaXVzICsgZ2FtZS5wbGF5ZXIucmFkaXVzKSB7XG4gICAgICAgICAgZ2FtZS5wbGF5ZXIuZGFtYWdlLnB1c2goeyBhbW91bnQ6IDUsIHZlY3RvcjogZGlzdCwga25vY2tiYWNrOiAzIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEJlaGF2aW9yLkRFQUQ6XG4gICAgICAgIHRoaXMudmVsID0geyB4OiAwLCB5OiAwLCBtOiAwIH07XG4gICAgICAgIGlmICghdGhpcy5jdWxsdCkgdGhpcy5jdWxsdCA9IDE1O1xuICAgICAgICB0aGlzLmN1bGx0LS07XG4gICAgICAgIGlmICh0aGlzLmN1bGx0IDwgMSkgdGhpcy5jdWxsID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLnN0YXRlID0gQmVoYXZpb3IuSURMRTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZHJhdyh2aWV3cG9ydCkge1xuICAgIC8vIFRPRE9cbiAgICBpZiAodGhpcy5zdGF0ZSA9PT0gQmVoYXZpb3IuREVBRCkge1xuICAgICAgU3ByaXRlLmRyYXdWaWV3cG9ydFNwcml0ZSh2aWV3cG9ydCwgU3ByaXRlLm1vbnN0ZXJfZGVhZCwgdGhpcy5wb3MsIGdhbWUuY2FtZXJhLnBvcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCB7IHUsIHYgfSA9IFNwcml0ZS52aWV3cG9ydFNwcml0ZTJ1dih2aWV3cG9ydCwgU3ByaXRlLnNhd2JsYWRlLCB0aGlzLnBvcywgZ2FtZS5jYW1lcmEucG9zKTtcbiAgICAgIHUgKz0gU3ByaXRlLnNhd2JsYWRlLmFuY2hvci54O1xuICAgICAgdiArPSBTcHJpdGUuc2F3YmxhZGUuYW5jaG9yLnk7XG5cbiAgICAgIHZpZXdwb3J0LmN0eC5zYXZlKCk7XG4gICAgICB2aWV3cG9ydC5jdHgudHJhbnNsYXRlKHUsIHYpO1xuICAgICAgdmlld3BvcnQuY3R4LnJvdGF0ZShnYW1lLmZyYW1lIC8gNSk7XG4gICAgICBTcHJpdGUuZHJhd1Nwcml0ZSh2aWV3cG9ydC5jdHgsIFNwcml0ZS5zYXdibGFkZSwgMCwgMCk7XG4gICAgICB2aWV3cG9ydC5jdHgucmVzdG9yZSgpO1xuICAgICAgU3ByaXRlLmRyYXdTcHJpdGUodmlld3BvcnQuY3R4LCBTcHJpdGUuc2F3YmxhZGVfZXllcywgdSwgdik7XG4gICAgfVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IFRleHQgfSBmcm9tICcuL1RleHQnO1xuXG5leHBvcnQgY29uc3QgTWVudSA9IHtcbiAgICBkcmF3KHZpZXdwb3J0KSB7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgICB2aWV3cG9ydC5jdHguZmlsbFN0eWxlID0gJyMzOTM5OTQnO1xuICAgICAgICB2aWV3cG9ydC5jdHguZmlsbFJlY3QoNDAsIDQwLCAxNDAsIDgwKTtcblxuXG4gICAgICAgIGxldCBvcHRpb25zID0gW1xuICAgICAgICAgICAgeyBuYW1lOiAnQWJvbWluYWJsZSBTbm93bWFuJywgY29zdDogNTAwIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdTd29yZHMgdG8gUGxvd3NoYXJlcycsIGNvc3Q6IDYwMCB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnU29tZXRoaW5nJywgY29zdDogMjUwIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdQbG93c2hhcmVzJywgY29zdDogMzAwIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdXaWxsIDEnLCBjb3N0OiA0MDAgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ1dpbGwgMScsIGNvc3Q6IDI0MCB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnRWxwZWdhbnQnLCBjb3N0OiAzMDAgfVxuICAgICAgICBdO1xuXG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IG9wdGlvbnMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgbGV0IG9wdGlvbiA9IG9wdGlvbnNbaWR4XTtcbiAgICAgICAgICAgIFRleHQuZHJhd1RleHQodmlld3BvcnQuY3R4LCBvcHRpb24ubmFtZSwgNDMsIDQwICsgMiArIGlkeCAqIDksIFRleHQuc2hhZG93KTtcbiAgICAgICAgICAgIFRleHQuZHJhd1RleHQodmlld3BvcnQuY3R4LCBvcHRpb24ubmFtZSwgNDIsIDQwICsgMiArIGlkeCAqIDkpO1xuXG4gICAgICAgICAgICBUZXh0LmRyYXdSaWdodFRleHQodmlld3BvcnQuY3R4LCBTdHJpbmcob3B0aW9uLmNvc3QpLCAxODAgLSAxLCA0MCArIDIgKyBpZHggKiA5LCBUZXh0LnNoYWRvdyk7XG4gICAgICAgICAgICBUZXh0LmRyYXdSaWdodFRleHQodmlld3BvcnQuY3R4LCBTdHJpbmcob3B0aW9uLmNvc3QpLCAxODAgLSAyLCA0MCArIDIgKyBpZHggKiA5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qXG4gICAgICAgIFRleHQuZHJhd1RleHQoY3R4LCBcIkFib21pbmFibGUgU25vd21hblwiLCAxMjAsIDUwKTtcbiAgICAgICAgVGV4dC5kcmF3VGV4dChjdHgsIFwiQWJvbWluYWJsZSBTbm93bWFuXCIsIDEyMSwgNTAsIFRleHQuc2hhZG93KTtcbiAgICAgICAgVGV4dC5kcmF3UmlnaHRUZXh0KGN0eCwgXCI1MDBcIiwgMTIwLCA3MCk7XG4gICAgICAgIFRleHQuZHJhd1JpZ2h0VGV4dChjdHgsIFwiMSwyMDBcIiwgMTIwLCA4MCk7XG4gICAgICAgIFRleHQuZHJhd1JpZ2h0VGV4dChjdHgsIFwiNSwwMDBcIiwgMTIwLCA5MCk7XG4gICAgICAgIFRleHQuZHJhd1JpZ2h0VGV4dChjdHgsIFwiNSwwMDBcIiwgMTIxLCA5MSwgVGV4dC5zaGFkb3cpO1xuXG5cbiAgICAgICAgNXB4IDdweCA5cHhcblxuICAgICAgICBkcmF3KHZpZXdwb3J0KSB7XG4gICAgICAgICAgICBTcHJpdGUuZHJhd1ZpZXdwb3J0U3ByaXRlKHZpZXdwb3J0LCBTcHJpdGUucGxheWVyLCB0aGlzLnBvcywgZ2FtZS5jYW1lcmEucG9zKTtcblxuICAgICAgICAgICAgdmlld3BvcnQuY3R4LnN0cm9rZVN0eWxlID0gJ3JnYmEoMjU1LCAyNTUsIDY0LCAwLjMpJztcbiAgICAgICAgICAgIHZpZXdwb3J0LmN0eC5iZWdpblBhdGgoKTsqL1xuXG4gICAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgZ2FtZSB9IGZyb20gJy4vR2FtZSc7XG5pbXBvcnQgeyBTcHJpdGUgfSBmcm9tICcuL0Fzc2V0cyc7XG5pbXBvcnQgeyBHZW9tZXRyeSBhcyBHIH0gZnJvbSAnLi9HZW9tZXRyeSc7XG5cbmV4cG9ydCBjbGFzcyBCYXR0bGVTdHJlYW1BbmltYXRpb24ge1xuICBjb25zdHJ1Y3Rvcihwb3MpIHtcbiAgICB0aGlzLnQgPSAtMTtcbiAgICB0aGlzLmQgPSAxNjtcbiAgICB0aGlzLnogPSAtNTtcbiAgICB0aGlzLnBvcyA9IHBvcztcbiAgfVxuXG4gIHRoaW5rKCkge1xuICAgIGlmICgrK3RoaXMudCA9PT0gdGhpcy5kKSB0aGlzLmN1bGwgPSB0cnVlO1xuICB9XG5cbiAgZHJhdyh2aWV3cG9ydCkge1xuICAgIGlmICh0aGlzLnQgPj0gMCAmJiB0aGlzLnQgPCAxNikge1xuICAgICAgbGV0IGYgPSBNYXRoLmZsb29yKHRoaXMudCAvIDIpO1xuICAgICAgU3ByaXRlLmRyYXdWaWV3cG9ydFNwcml0ZSh2aWV3cG9ydCwgU3ByaXRlLmJhdHRsZV9zdHJlYW1bZl0sIHsgeDogdGhpcy5wb3MueCwgeTogdGhpcy5wb3MueSArIGYgfSwgZ2FtZS5jYW1lcmEucG9zKTtcbiAgICB9XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgZ2FtZSB9IGZyb20gJy4uL0dhbWUnO1xuaW1wb3J0IHsgR2VvbWV0cnkgYXMgRyB9IGZyb20gJy4uL0dlb21ldHJ5JztcbmltcG9ydCB7IENvbnN0YW50cyBhcyBDIH0gZnJvbSAnLi4vQ29uc3RhbnRzJztcblxuLyoqXG4gKiBNb3ZlbWVudFxuICovXG5leHBvcnQgY29uc3QgTW92ZW1lbnQgPSB7XG4gIGFwcGx5KGVudGl0aWVzKSB7XG4gICAgLy8gTW92ZW1lbnQgb25seSBhcHBsaWVzIHRvIGFjdGl2ZSBlbnRpdGllcyB3aXRoIHBvc2l0aW9ucyBhbmQgdmVsb2NpdGllc1xuICAgIGxldCBtb3ZlcnMgPSBlbnRpdGllcy5maWx0ZXIoZW50aXR5ID0+IGVudGl0eS5wb3MgJiYgZW50aXR5LnZlbCAmJiAhZW50aXR5LmN1bGwpO1xuXG4gICAgLy8gVmVyeSBiYXNpYyBcInJvdW5kc1wiIG9mIGNvbGxpc2lvbiByZXNvbHV0aW9uLCBzaW5jZSB3ZSBoYXZlIG5vIHJlYWwgcGh5c2ljcy5cbiAgICAvLyAoQXMgdXN1YWwsIFwiZGV0ZWN0aW5nXCIgYSBjb2xsaXNpb24gaXMgbm90IHRoZSBoYXJkIHBhcnQuLi4gd2UgbmVlZCB0byByZXNvbHZlXG4gICAgLy8gdGhlbSB0b28hKVxuICAgIGZvciAobGV0IHJvdW5kcyA9IDA7IHJvdW5kcyA8IDU7IHJvdW5kcysrKSB7XG4gICAgICAvLyBFYWNoIHBhaXIgb2YgZW50aXRpZXMgb25seSBuZWVkcyB0byBpbnRlcmFjdCBvbmNlLlxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb3ZlcnMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IG1vdmVycy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHRoaXMuY2xpcFZlbG9jaXR5RW50aXR5VnNFbnRpdHkobW92ZXJzW2ldLCBtb3ZlcnNbal0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGVudGl0eSBvZiBtb3ZlcnMpIHtcbiAgICAgICAgdGhpcy5jbGlwVmVsb2NpdHlBZ2FpbnN0V2FsbHMoZW50aXR5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBOb3cgd2UgYXBwbHkgYWxsIG1vdmVtZW50LCBldmVuIGlmIGl0J3Mgbm90IGdvaW5nIHRvIGJlIHBlcmZlY3QuXG4gICAgZm9yIChsZXQgZW50aXR5IG9mIG1vdmVycykge1xuICAgICAgZW50aXR5LnBvcy54ICs9IGVudGl0eS52ZWwueDtcbiAgICAgIGVudGl0eS5wb3MueSArPSBlbnRpdHkudmVsLnk7XG4gICAgfVxuICB9LFxuXG4gIGNsaXBWZWxvY2l0eUVudGl0eVZzRW50aXR5KGVudGl0eSwgb3RoZXIpIHtcbiAgICBsZXQgaGl0ID0gRy5pbnRlcnNlY3RDaXJjbGVDaXJjbGUyKFxuICAgICAgZW50aXR5LnBvcywgZW50aXR5LnJhZGl1cywgZW50aXR5LnZlbCxcbiAgICAgIG90aGVyLnBvcywgb3RoZXIucmFkaXVzLCBvdGhlci52ZWxcbiAgICApO1xuICAgIGlmIChoaXQpIHtcbiAgICAgIGlmIChlbnRpdHkuYm91bmNlICYmIG90aGVyLmJvdW5jZSkge1xuICAgICAgICBlbnRpdHkudmVsLnggPSAtaGl0Lm54ICogaGl0Lm07XG4gICAgICAgIGVudGl0eS52ZWwueSA9IC1oaXQubnkgKiBoaXQubTtcbiAgICAgICAgb3RoZXIudmVsLnggPSBoaXQubnggKiBoaXQubTtcbiAgICAgICAgb3RoZXIudmVsLnkgPSBoaXQubnkgKiBoaXQubTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE5vdCBhIGJ1Zzogd2UgXCJhZGRcIiB0aGUgbWFzcyBvZiB0aGUgb3Bwb3NpbmcgZW50aXR5IHRvIG91ciBvd24gdmVsb2NpdHkgd2hlbiBkZWNpZGluZyB3aG9cbiAgICAgICAgLy8gaXMgYXQgZmF1bHQgZm9yIHRoZSBjb2xsaXNpb24uIEVudGl0eSB2ZWxvY2l0aWVzIGFkanVzdCBpbiByZWxhdGlvbiB0byB0aGVpciBmYXVsdCBsZXZlbC5cbiAgICAgICAgbGV0IGVudGl0eU0gPSBHLm5vcm1hbGl6ZVZlY3RvcihlbnRpdHkudmVsKS5tICsgb3RoZXIubWFzcztcbiAgICAgICAgbGV0IG90aGVyTSA9IEcubm9ybWFsaXplVmVjdG9yKG90aGVyLnZlbCkubSArIGVudGl0eS5tYXNzO1xuICAgICAgICBsZXQgZW50aXR5SSA9IGVudGl0eS5ib3VuY2UgPyAwLjEgOiAxO1xuICAgICAgICBsZXQgb3RoZXJJID0gb3RoZXIuYm91bmNlID8gMC4xIDogMTtcbiAgICAgICAgZW50aXR5LnZlbC54IC09IGhpdC5ueCAqIGhpdC5tICogZW50aXR5SSAqIGVudGl0eU0gLyAoZW50aXR5TSArIG90aGVyTSk7XG4gICAgICAgIGVudGl0eS52ZWwueSAtPSBoaXQubnkgKiBoaXQubSAqIGVudGl0eUkgKiBlbnRpdHlNIC8gKGVudGl0eU0gKyBvdGhlck0pO1xuICAgICAgICBvdGhlci52ZWwueCArPSBoaXQubnggKiBoaXQubSAqIG90aGVySSAqIG90aGVyTSAvIChlbnRpdHlNICsgb3RoZXJNKTtcbiAgICAgICAgb3RoZXIudmVsLnkgKz0gaGl0Lm55ICogaGl0Lm0gKiBvdGhlckkgKiBvdGhlck0gLyAoZW50aXR5TSArIG90aGVyTSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGNsaXBWZWxvY2l0eUFnYWluc3RXYWxscyhlbnRpdHkpIHtcbiAgICBmb3IgKGxldCB0aWxlIG9mIEcudGlsZXNIaXRCeUNpcmNsZShlbnRpdHkucG9zLCBlbnRpdHkudmVsLCBlbnRpdHkucmFkaXVzKSkge1xuICAgICAgaWYgKCFHLnRpbGVJc1Bhc3NhYmxlKHRpbGUucSwgdGlsZS5yKSkge1xuICAgICAgICBsZXQgYm91bmRzID0gW0cucXIyeHkodGlsZSksIEcucXIyeHkoeyBxOiB0aWxlLnEgKyAxLCByOiB0aWxlLnIgKyAxIH0pXTtcbiAgICAgICAgbGV0IGhpdCA9IEcuaW50ZXJzZWN0Q2lyY2xlUmVjdGFuZ2xlKFxuICAgICAgICAgIGVudGl0eS5wb3MsXG4gICAgICAgICAgeyB4OiBlbnRpdHkucG9zLnggKyBlbnRpdHkudmVsLngsIHk6IGVudGl0eS5wb3MueSArIGVudGl0eS52ZWwueSB9LFxuICAgICAgICAgIGVudGl0eS5yYWRpdXMsXG4gICAgICAgICAgYm91bmRzXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gVGhlIFwibWF0aFwiIHBhcnQgb2YgZGV0ZWN0aW5nIGNvbGxpc2lvbiB3aXRoIHdhbGxzIGlzIGJ1cmllZCBpbiB0aGUgZ2VvbWV0cnkgZnVuY3Rpb25zXG4gICAgICAgIC8vIGFib3ZlLCBidXQgaXQncyBub3QgdGhlIHdob2xlIHN0b3J5IC0tIGlmIHdlIGRvIGRldGVjdCBhIGNvbGxpc2lvbiwgd2Ugc3RpbGwgbmVlZCB0b1xuICAgICAgICAvLyBkZWNpZGUgd2hhdCB0byBkbyBhYm91dCBpdC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gSWYgdGhlIG5vcm1hbCB2ZWN0b3IgaXMgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCwgd2UgemVybyBvdXQgdGhlIHBvcnRpb24gb2YgdGhlIHZlY3RvclxuICAgICAgICAvLyBtb3ZpbmcgaW50byB0aGUgd2FsbCwgYWxsb3dpbmcgZnJpY3Rpb25sZXNzIHNsaWRpbmcgKGlmIHdlIHdhbnRlZCB0byBhcHBseSBmcmljdGlvbixcbiAgICAgICAgLy8gd2UgY291bGQgYWxzbyByZWR1Y2UgdGhlIG90aGVyIGF4aXMgc2xpZ2h0bHkpLlxuICAgICAgICAvL1xuICAgICAgICAvLyBJZiB0aGUgbm9ybWFsIHZlY3RvciBpcyBub3QgOTAqLCB3ZSBcImJhY2sgdXBcIiBvZmYgdGhlIHdhbGwgYnkgZXhhY3RseSB0aGUgbm9ybWFsIHZlY3Rvci5cbiAgICAgICAgLy8gSWYgdGhlIHBsYXllciBydW5zIGludG8gYSBjb3JuZXIgYXQgRVhBQ1RMWSBhIDQ1IGRlZ3JlZSBhbmdsZSwgdGhleSB3aWxsIHNpbXBseSBcInN0aWNrXCJcbiAgICAgICAgLy8gb24gaXQgLS0gYnV0IG9uZSBkZWdyZWUgbGVmdCBvciByaWdodCBhbmQgdGhleSdsbCBzbGlkZSBhcm91bmQgdGhlIGNvcm5lciBvbnRvIHRoZSB3YWxsLFxuICAgICAgICAvLyB3aGljaCBpcyB0aGUgZGVzaXJlZCByZXN1bHQuXG4gICAgICAgIGlmIChoaXQpIHtcbiAgICAgICAgICBpZiAoZW50aXR5LmJvdW5jZSkge1xuICAgICAgICAgICAgaWYgKGhpdC5ueCA9PT0gMCkge1xuICAgICAgICAgICAgICBlbnRpdHkudmVsLnkgPSAtZW50aXR5LnZlbC55O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChoaXQubnkgPT09IDApIHtcbiAgICAgICAgICAgICAgZW50aXR5LnZlbC54ID0gLWVudGl0eS52ZWwueDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGVudGl0eS52ZWwueCArPSBoaXQubng7XG4gICAgICAgICAgICAgIGVudGl0eS52ZWwueSArPSBoaXQubnk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChoaXQubnggPT09IDApIHtcbiAgICAgICAgICAgICAgZW50aXR5LnZlbC55ID0gaGl0LnkgLSBlbnRpdHkucG9zLnk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhpdC5ueSA9PT0gMCkge1xuICAgICAgICAgICAgICBlbnRpdHkudmVsLnggPSBoaXQueCAtIGVudGl0eS5wb3MueDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGVudGl0eS52ZWwueCArPSBoaXQubng7XG4gICAgICAgICAgICAgIGVudGl0eS52ZWwueSArPSBoaXQubnk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBnYW1lIH0gZnJvbSAnLi9HYW1lJztcbmltcG9ydCB7IFNwcml0ZSB9IGZyb20gJy4vQXNzZXRzJztcbmltcG9ydCB7IEdlb21ldHJ5IGFzIEcgfSBmcm9tICcuL0dlb21ldHJ5JztcblxuZXhwb3J0IGNsYXNzIEhlYWx0aENodW5rQW5pbWF0aW9uIHtcbiAgY29uc3RydWN0b3Ioc3RhcnQsIGFtb3VudCkge1xuICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICB0aGlzLmFtb3VudCA9IGFtb3VudDtcbiAgICB0aGlzLnQgPSAtMTtcbiAgICB0aGlzLmQgPSAyMDtcbiAgICB0aGlzLnogPSAxMDE7XG4gICAgdGhpcy55ID0gNTtcbiAgICB0aGlzLnZlbCA9IC0wLjc7XG4gICAgdGhpcy5ncmF2aXR5ID0gMC4wOTtcbiAgfVxuXG4gIHRoaW5rKCkge1xuICAgIGlmICgrK3RoaXMudCA9PT0gdGhpcy5kKSB0aGlzLmN1bGwgPSB0cnVlO1xuICAgIHRoaXMueSArPSB0aGlzLnZlbDtcbiAgICB0aGlzLnZlbCArPSB0aGlzLmdyYXZpdHk7XG4gIH1cblxuICBkcmF3KHZpZXdwb3J0KSB7XG4gICAgbGV0IHggPSB0aGlzLnN0YXJ0IC0gdGhpcy5hbW91bnQgKyA4O1xuXG4gICAgaWYgKHRoaXMudCA+IDE1KSB2aWV3cG9ydC5jdHguZ2xvYmFsQWxwaGEgPSAxIC0gdGhpcy50ICogMC4xO1xuICAgIHZpZXdwb3J0LmN0eC5kcmF3SW1hZ2UoXG4gICAgICBTcHJpdGUuaHVkX2hlYWx0aF9jaHVuay5pbWcsXG4gICAgICB4LCAzLCB0aGlzLmFtb3VudCwgMyxcbiAgICAgIHggKyAyLCB0aGlzLnksIHRoaXMuYW1vdW50LCAzXG4gICAgKTtcbiAgICB2aWV3cG9ydC5jdHguZ2xvYmFsQWxwaGEgPSAxO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IEJlaGF2aW9yIH0gZnJvbSAnLi9CZWhhdmlvcic7XG5pbXBvcnQgeyBHZW9tZXRyeSBhcyBHIH0gZnJvbSAnLi4vR2VvbWV0cnknO1xuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAnLi4vUGxheWVyJztcbmltcG9ydCB7IEhlYWx0aENodW5rQW5pbWF0aW9uIH0gZnJvbSAnLi4vSGVhbHRoQ2h1bmtBbmltYXRpb24nO1xuaW1wb3J0IHsgZ2FtZSB9IGZyb20gJy4uL0dhbWUnO1xuXG4vKipcbiAqIERhbWFnZVxuICovXG5leHBvcnQgY29uc3QgRGFtYWdlID0ge1xuICBhcHBseShlbnRpdGllcykge1xuICAgIGZvciAobGV0IGVudGl0eSBvZiBlbnRpdGllcykge1xuICAgICAgaWYgKHR5cGVvZiBlbnRpdHkuaHAgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGlmIChlbnRpdHkuZGFtYWdlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBmb3IgKGxldCBkYW1hZ2Ugb2YgZW50aXR5LmRhbWFnZSkge1xuICAgICAgICAgICAgaWYgKGVudGl0eSBpbnN0YW5jZW9mIFBsYXllcikge1xuICAgICAgICAgICAgICBnYW1lLmVudGl0aWVzLnB1c2gobmV3IEhlYWx0aENodW5rQW5pbWF0aW9uKGVudGl0eS5ocCwgZGFtYWdlLmFtb3VudCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW50aXR5LmhwIC09IGRhbWFnZS5hbW91bnQ7XG4gICAgICAgICAgICBkYW1hZ2UudmVjdG9yLm0gPSBkYW1hZ2Uua25vY2tiYWNrO1xuICAgICAgICAgICAgZW50aXR5LnZlbCA9IEcudmVjdG9yQWRkKGVudGl0eS52ZWwsIGRhbWFnZS52ZWN0b3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbnRpdHkuZGFtYWdlID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVudGl0eS5ocCA8PSAwKSBlbnRpdHkuc3RhdGUgPSBCZWhhdmlvci5ERUFEO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbiIsIi8qaW1wb3J0IHsgSW5wdXQgfSBmcm9tICcuL0lucHV0JztcbmltcG9ydCB7IFBsYXllciB9IGZyb20gJy4vUGxheWVyJztcbmltcG9ydCB7IFNjcmVlblNoYWtlIH0gZnJvbSAnLi9TY3JlZW5TaGFrZSc7XG5pbXBvcnQgeyBIdWQgfSBmcm9tICcuL0h1ZCc7XG5pbXBvcnQgeyBNZW51LCBQYXVzZU1lbnUsIEludHJvTWVudUEsIEludHJvTWVudUIsIE91dHJvTWVudSB9IGZyb20gJy4vTWVudSc7XG5pbXBvcnQgeyBBdWRpbyB9IGZyb20gJy4vQXVkaW8nO1xuaW1wb3J0IHsgQXNzZXRzLCBTcHJpdGUsIGRyYXdQb2x5IH0gZnJvbSAnLi9Bc3NldHMnO1xuaW1wb3J0IHsgRGVtb24xIH0gZnJvbSAnLi9EZW1vbjEnO1xuaW1wb3J0IHsgQ2FudmFzIH0gZnJvbSAnLi9DYW52YXMnO1xuaW1wb3J0IHsgUGFydGljbGUsIFBvcnRhbFBhcnRpY2xlLCBTdXBlclBhcnRpY2xlIH0gZnJvbSAnLi9QYXJ0aWNsZSc7XG5pbXBvcnQgeyBIaXZlIH0gZnJvbSAnLi9IaXZlJztcbmltcG9ydCB7IFBvaW50LCBpbnRlcnNlY3RpbmdQb2x5Z29ucywgaW50ZXJzZWN0aW5nQ2lyY2xlcywgUkFELCB2ZWN0b3JGcm9tQW5nbGUsIGRpc3RhbmNlIH0gZnJvbSAnLi9HZW9tZXRyeSc7XG5pbXBvcnQgeyBIRUFSVEJFQVQgfSBmcm9tICcuL0NvbmZpZyc7XG5pbXBvcnQgeyBUd2VlbiB9IGZyb20gJy4vVHdlZW4nO1xuKi9cblxuaW1wb3J0IHsgQXNzZXRzLCBTcHJpdGUgfSBmcm9tICcuL0Fzc2V0cyc7XG5pbXBvcnQgeyBJbnB1dCB9IGZyb20gJy4vaW5wdXQvSW5wdXQnO1xuaW1wb3J0IHsgTWFwTG9hZGVyIH0gZnJvbSAnLi9NYXBMb2FkZXInO1xuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4vVGV4dCc7XG5pbXBvcnQgeyBQbGF5ZXJ9IGZyb20gJy4vUGxheWVyJztcbmltcG9ydCB7IE1vbnN0ZXIgfSBmcm9tICcuL01vbnN0ZXInO1xuaW1wb3J0IHsgU2N1bHB0b3IgfSBmcm9tICcuL1NjdWxwdG9yJztcbmltcG9ydCB7IHZpZXdwb3J0IH0gZnJvbSAnLi9WaWV3cG9ydCc7XG5pbXBvcnQgeyBDb25zdGFudHMgYXMgQyB9IGZyb20gJy4vQ29uc3RhbnRzJztcbmltcG9ydCB7IEdlb21ldHJ5IGFzIEcgfSBmcm9tICcuL0dlb21ldHJ5JztcbmltcG9ydCB7IE1lbnUgfSBmcm9tICcuL01lbnUnO1xuaW1wb3J0IHsgQmF0dGxlU3RyZWFtQW5pbWF0aW9uIH0gZnJvbSAnLi9CYXR0bGVTdHJlYW1BbmltYXRpb24nO1xuXG5pbXBvcnQgeyBBdWRpbyB9IGZyb20gJy4vQXVkaW8nO1xuXG5pbXBvcnQgeyBDYW52YXN9IGZyb20gJy4vQ2FudmFzJztcblxuaW1wb3J0IHsgQmVoYXZpb3IgfSBmcm9tICcuL3N5c3RlbXMvQmVoYXZpb3InO1xuaW1wb3J0IHsgTW92ZW1lbnQgfSBmcm9tICcuL3N5c3RlbXMvTW92ZW1lbnQnO1xuaW1wb3J0IHsgRGFtYWdlIH0gZnJvbSAnLi9zeXN0ZW1zL0RhbWFnZSc7XG5cbi8qKlxuICogR2FtZSBzdGF0ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEdhbWUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgIH1cblxuICAgIGFzeW5jIGluaXQoKSB7XG4gICAgICAgIHZpZXdwb3J0LmluaXQoKTtcblxuICAgICAgICB0aGlzLmlucHV0ID0gbmV3IElucHV0KCk7XG4gICAgICAgIGF3YWl0IHRoaXMuaW5wdXQuaW5pdCgpO1xuXG4gICAgICAgIGF3YWl0IEF1ZGlvLmluaXQoKTtcblxuICAgICAgICB0aGlzLm1hemUgPSBNYXBMb2FkZXIubG9hZCgpO1xuICAgICAgICB0aGlzLmNhbWVyYSA9IHsgcG9zOiB7IHg6IDEsIHk6IDEgfSB9O1xuXG4gICAgICAgIGF3YWl0IEFzc2V0cy5pbml0KCk7XG4gICAgICAgIGF3YWl0IFRleHQuaW5pdCgpO1xuXG4gICAgICAgIHRoaXMuZW50aXRpZXMgPSBbXTtcblxuICAgICAgICB0aGlzLnBsYXllciA9IG5ldyBQbGF5ZXIoKTtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5tYXplLnJvb21zKTtcbiAgICAgICAgdGhpcy5wbGF5ZXIucG9zLnggPSAodGhpcy5tYXplLnJvb21zWzFdLnEgKyBNYXRoLmZsb29yKHRoaXMubWF6ZS5yb29tc1sxXS53IC8gMikpICogQy5USUxFX1dJRFRIICsgQy5USUxFX1dJRFRIIC8gMjtcbiAgICAgICAgdGhpcy5wbGF5ZXIucG9zLnkgPSAodGhpcy5tYXplLnJvb21zWzFdLnIgKyBNYXRoLmZsb29yKHRoaXMubWF6ZS5yb29tc1sxXS5oIC8gMikpICogQy5USUxFX1dJRFRIICsgQy5USUxFX1dJRFRIIC8gMjtcblxuICAgICAgICB0aGlzLmVudGl0aWVzLnB1c2godGhpcy5wbGF5ZXIpO1xuXG4gICAgICAgIHRoaXMucm9vbXNDbGVhcmVkID0gW107XG5cbiAgICAgICAgLypcblxuICAgICAgICBhd2FpdCBBc3NldHMuaW5pdCgpO1xuXG4gICAgICAgIHRoaXMuYXJ0aWZhY3RzID0gW1xuICAgICAgICAgICAgYXdhaXQgQXNzZXRzLmdyYXlzY2FsZU5vaXNlKHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpLFxuICAgICAgICAgICAgYXdhaXQgQXNzZXRzLmdyYXlzY2FsZU5vaXNlKHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpLFxuICAgICAgICAgICAgYXdhaXQgQXNzZXRzLmdyYXlzY2FsZU5vaXNlKHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpXG4gICAgICAgIF07XG5cbiAgICAgICAgdGhpcy5pbnB1dCA9IG5ldyBJbnB1dCgpO1xuICAgICAgICBhd2FpdCB0aGlzLmlucHV0LmluaXQoKTtcblxuICAgICAgICB0aGlzLnBsYXllciA9IG5ldyBQbGF5ZXIoKTtcblxuICAgICAgICB0aGlzLmh1ZCA9IG5ldyBIdWQoKTtcblxuICAgICAgICB0aGlzLnBhcnRpY2xlcyA9IFtdO1xuICAgICAgICB0aGlzLnNjcmVlbnNoYWtlcyA9IFtdO1xuICAgICAgICB0aGlzLm1lbnVTdGFjayA9IFtdO1xuXG4gICAgICAgIHRoaXMubW9uc3RlcnMgPSBbXTtcblxuICAgICAgICAvLyBDcmVhdGUsIGJ1dCBkbyBub3QgaW5pdGlhbGl6ZSwgdGhlIGF1ZGlvIG9iamVjdC4gVGhlIGF1ZGlvIG9iamVjdCB3aWxsIGJlXG4gICAgICAgIC8vIGluaXRpYWxpemVkIGFzIHNvb24gYXMgcG9zc2libGUgYnkgdGhlIGZpcnN0IHVzZXIgaW5wdXQgZXZlbnQsIHRvIG1lZXRcbiAgICAgICAgLy8gcmVxdWlyZW1lbnRzIG9mIHRoZSBicm93c2VyLlxuICAgICAgICB0aGlzLmF1ZGlvID0gbmV3IEF1ZGlvKCk7XG5cbiAgICAgICAgdGhpcy5zY29yZSA9IDA7XG5cbiAgICAgICAgdGhpcy5oaXZlID0gbmV3IEhpdmUoKTtcblxuICAgICAgICAqL1xuICAgIH1cblxuICAgIHN0YXJ0KCkge1xuICAgICAgICB0aGlzLmZyYW1lID0gMDtcblxuICAgICAgICB0aGlzLnN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcblxuICAgICAgICAvKlxuICAgICAgICB0aGlzLm1lbnVTdGFjay5wdXNoKG5ldyBJbnRyb01lbnVBKHtcbiAgICAgICAgICAgIG9uQ2xvc2U6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm1lbnVTdGFjay5wdXNoKG5ldyBJbnRyb01lbnVCKHt9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTsqL1xuXG4gICAgICAgIC8vdGhpcy5mcmFtZW1zID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5vbkZyYW1lKDEpKTtcbiAgICAgICAgLy90aGlzLmZyYW1lID0gMDtcbiAgICB9XG5cbiAgICBvbkZyYW1lKGN1cnJlbnRtcykge1xuICAgICAgICB0aGlzLmZyYW1lKys7XG4gICAgICAgIHZpZXdwb3J0LnJlc2l6ZSgpO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICB0aGlzLmRyYXcodmlld3BvcnQuY3R4KTtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLm9uRnJhbWUoY3VycmVudG1zKSk7XG4gICAgfVxuXG4gICAgdXBkYXRlKCkge1xuICAgICAgICAvLyBQdWxsIGluIGZyYW1lIGJ5IGZyYW1lIGJ1dHRvbiBwdXNoZXMgLyBrZXlwcmVzc2VzIC8gbW91c2UgY2xpY2tzXG4gICAgICAgIHRoaXMuaW5wdXQudXBkYXRlKCk7XG5cbiAgICAgICAgLy8gQmVoYXZpb3IgKEFJLCBwbGF5ZXIgaW5wdXQsIGV0Yy4pXG4gICAgICAgIEJlaGF2aW9yLmFwcGx5KHRoaXMuZW50aXRpZXMpO1xuXG4gICAgICAgIC8vIEFwcGx5IGFueSBxdWV1ZWQgZGFtYWdlXG4gICAgICAgIERhbWFnZS5hcHBseSh0aGlzLmVudGl0aWVzKTtcblxuICAgICAgICAvLyBNb3ZlbWVudCAoYXBwbHkgZW50aXR5IHZlbG9jaXRpZXMgdG8gcG9zaXRpb24pXG4gICAgICAgIE1vdmVtZW50LmFwcGx5KHRoaXMuZW50aXRpZXMpO1xuXG4gICAgICAgIC8vIEN1bGxpbmcgKHR5cGljYWxseSBzZXQgd2hlbiBhbiBlbnRpdHkgZGllcylcbiAgICAgICAgdGhpcy5lbnRpdGllcyA9IHRoaXMuZW50aXRpZXMuZmlsdGVyKGVudGl0eSA9PiAhZW50aXR5LmN1bGwpO1xuXG4gICAgICAgIC8vIGNhbWVyYSBsb2dpYyEgd2hlcmUgZG9lcyBpdCBnbyEgKGFuIGVudGl0eSBwZXJoYXBzPylcbiAgICAgICAgbGV0IGRpZmYgPSB7XG4gICAgICAgICAgICB4OiB0aGlzLnBsYXllci5wb3MueCAtIHRoaXMuY2FtZXJhLnBvcy54LFxuICAgICAgICAgICAgeTogdGhpcy5wbGF5ZXIucG9zLnkgLSB0aGlzLmNhbWVyYS5wb3MueVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNhbWVyYS5wb3MueCArPSBkaWZmLnggKiAwLjI7XG4gICAgICAgIHRoaXMuY2FtZXJhLnBvcy55ICs9IGRpZmYueSAqIDAuMjtcblxuICAgICAgICAvL3RoaXMuc3Bhd25FbmVteSgpO1xuXG4gICAgICAgIGlmICghdGhpcy5hY3RpdmVCYXR0bGUpIHtcbiAgICAgICAgICAgIGxldCBxciA9IEcueHkycXIoZ2FtZS5wbGF5ZXIucG9zKTtcbiAgICAgICAgICAgIGxldCByb29tID0gdGhpcy5tYXplLnJvb21zW3RoaXMubWF6ZS5tYXplW3FyLnJdW3FyLnFdXTtcblxuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5tYXplLm1hemVbcXIucl1bcXIucV0pO1xuICAgICAgICAgICAgY29uc29sZS5sb2cocm9vbSk7XG4gICAgICAgICAgICBpZiAocm9vbSAmJiByb29tLnJvb21OdW1iZXIgPj0gMyAmJiAhdGhpcy5yb29tc0NsZWFyZWQuaW5jbHVkZXMocm9vbS5yb29tTnVtYmVyKSAmJiByb29tLncgPj0gMyAmJiByb29tLmggPj0gNCAmJlxuICAgICAgICAgICAgICAgIHFyLnEgPiByb29tLnEgJiYgcXIuciA+IHJvb20uciAmJiBxci5xIDwgcm9vbS5xICsgcm9vbS53IC0gMSAmJiBxci5yIDwgcm9vbS5yICsgcm9vbS5oIC0gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlQmF0dGxlID0ge1xuICAgICAgICAgICAgICAgICAgICByb29tLFxuICAgICAgICAgICAgICAgICAgICBlbmVtaWVzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHRoaXMuZnJhbWUsXG4gICAgICAgICAgICAgICAgICAgIHBsYW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFtZTogdGhpcy5mcmFtZSArIDEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChyb29tLncgKiAzMikpICsgcm9vbS5xICogMzIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKHJvb20uaCAqIDMyKSkgKyByb29tLnIgKiAzMixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWU6IHRoaXMuZnJhbWUgKyA1MCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAocm9vbS53ICogMzIpKSArIHJvb20ucSAqIDMyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChyb29tLmggKiAzMikpICsgcm9vbS5yICogMzIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lOiB0aGlzLmZyYW1lICsgOTAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKHJvb20udyAqIDMyKSkgKyByb29tLnEgKiAzMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAocm9vbS5oICogMzIpKSArIHJvb20uciAqIDMyLFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkJBVFRMRSBTVEFSVEVEXCIsIHJvb20pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlQmF0dGxlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hY3RpdmVCYXR0bGUucGxhbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hY3RpdmVCYXR0bGUuZW5lbWllcy5maWx0ZXIoZW5lbXkgPT4gIWVuZW15LmN1bGwpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb21zQ2xlYXJlZC51bnNoaWZ0KHRoaXMuYWN0aXZlQmF0dGxlLnJvb20ucm9vbU51bWJlcik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlQmF0dGxlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkJBVFRMRSBGSU5JU0hFRFwiLCB0aGlzLnJvb21zQ2xlYXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZnJhbWUgPj0gdGhpcy5hY3RpdmVCYXR0bGUucGxhblswXS5mcmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3Bhd24gPSB0aGlzLmFjdGl2ZUJhdHRsZS5wbGFuLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtb25zdGVyID0gbmV3IFNjdWxwdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgIG1vbnN0ZXIucG9zID0geyB4OiBzcGF3bi54LCB5OiBzcGF3bi55IH07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXMucHVzaChtb25zdGVyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVCYXR0bGUuZW5lbWllcy5wdXNoKG1vbnN0ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB1ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKDQ4MCArIDUwKSkgLSAyNSxcbiAgICAgICAgICAgIHYgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoMjcwICsgNTApKSAtIDI1O1xuICAgICAgICBsZXQgcXIgPSB0aGlzLnV2Mnh5KHsgdSwgdiB9KTtcbiAgICAgICAgdGhpcy5lbnRpdGllcy5wdXNoKG5ldyBCYXR0bGVTdHJlYW1BbmltYXRpb24ocXIpKTtcbiAgICB9XG5cbiAgICBzcGF3bkVuZW15KCkge1xuICAgICAgICBsZXQgZW5lbWllcyA9IHRoaXMuZW50aXRpZXMuZmlsdGVyKGVudGl0eSA9PiBlbnRpdHkgaW5zdGFuY2VvZiBNb25zdGVyKTtcbiAgICAgICAgaWYgKGVuZW1pZXMubGVuZ3RoIDwgNCAmJiBNYXRoLnJhbmRvbSgpIDwgMC4xKSB7XG4gICAgICAgICAgICBsZXQgcSA9IHRoaXMubWF6ZS5yb29tc1sxXVswXS5xICsgdGhpcy5tYXplLnJhbmQoMCwgdGhpcy5tYXplLnJvb21zWzFdWzBdLndpZHRoKTtcbiAgICAgICAgICAgIGxldCByID0gdGhpcy5tYXplLnJvb21zWzFdWzBdLnIgKyB0aGlzLm1hemUucmFuZCgwLCB0aGlzLm1hemUucm9vbXNbMV1bMF0uaGVpZ2h0KTtcbiAgICAgICAgICAgIGxldCBtb25zdGVyID0gbmV3IE1vbnN0ZXIoKTtcbiAgICAgICAgICAgIG1vbnN0ZXIucG9zID0gRy5xcjJ4eSh7IHEsIHIgfSk7XG4gICAgICAgICAgICB0aGlzLmVudGl0aWVzLnB1c2gobW9uc3Rlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkcmF3KGN0eCkge1xuICAgICAgICBjdHguc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgICAgICBjdHguc2NhbGUodmlld3BvcnQuc2NhbGUsIHZpZXdwb3J0LnNjYWxlKTtcblxuICAgICAgICBjdHguZmlsbFN0eWxlID0gJ3JnYmEoMjAsMjAsMjAsMSknO1xuICAgICAgICBjdHguZmlsbFJlY3QoMCwgMCwgdmlld3BvcnQud2lkdGgsIHZpZXdwb3J0LmhlaWdodCk7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZUJhdHRsZSkge1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICdyZ2JhKDEyOCwyMCwyMCwxKSc7XG4gICAgICAgICAgICBsZXQgeSA9IE1hdGgubWluKDAsICh0aGlzLmZyYW1lIC0gdGhpcy5hY3RpdmVCYXR0bGUuc3RhcnQpICogOCAtIDMwMCk7XG4gICAgICAgICAgICBjdHguZHJhd0ltYWdlKFNwcml0ZS5iYXR0bGVfYmcuaW1nLCAwLCB5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qY3R4LmZpbGxTdHlsZSA9ICdyZ2JhKDE1MCwgMTI4LCAxMjgsIDEpJztcbiAgICAgICAgY3R4LmZpbGxSZWN0KDEwLCAxMCwgMTAwLCAxMDApOyovXG5cbiAgICAgICAgZm9yIChsZXQgZW50aXR5IG9mIHRoaXMuZW50aXRpZXMpIHtcbiAgICAgICAgICAgIGlmIChlbnRpdHkueiA8IDApIGVudGl0eS5kcmF3KHZpZXdwb3J0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZHJhd01hemUoY3R4LCB0aGlzLm1hemUpO1xuXG4gICAgICAgIGZvciAobGV0IGVudGl0eSBvZiB0aGlzLmVudGl0aWVzKSB7XG4gICAgICAgICAgICBpZiAoZW50aXR5LnogPiAwIHx8ICFlbnRpdHkueikgZW50aXR5LmRyYXcodmlld3BvcnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kcmF3SHVkKGN0eCk7XG5cbiAgICAgICAgbGV0IGt5ID0gdGhpcy5mcmFtZTtcbiAgICAgICAgVGV4dC5kcmF3VGV4dChjdHgsICdGSUdIVCcsIGt5ICogMTAsIDEwMCwgVGV4dC5zaGFkb3csIDQpO1xuICAgICAgICBUZXh0LmRyYXdUZXh0KGN0eCwgJ0ZJR0hUJywga3kgKiAxMCwgMTAwLCBUZXh0LmRlZmF1bHQsIDQpO1xuXG4gICAgICAgIGZvciAobGV0IGVudGl0eSBvZiB0aGlzLmVudGl0aWVzKSB7XG4gICAgICAgICAgICBpZiAoZW50aXR5LnogJiYgZW50aXR5LnogPiAxMDApIGVudGl0eS5kcmF3KHZpZXdwb3J0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSAncmdiYSgxNTAsIDEyOCwgMTI4LCAxKSc7XG4gICAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KTtcblxuICAgICAgICB0aGlzLnNoYWRvdy5jdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ2NvcHknO1xuICAgICAgICAvL3RoaXMuc2hhZG93LmN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XG4gICAgICAgIHRoaXMuc2hhZG93LmN0eC5maWxsU3R5bGUgPSAncmdiYSgwLCAwLCAwLCAwLjk5KSc7XG4gICAgICAgIHRoaXMuc2hhZG93LmN0eC5maWxsUmVjdCgwLCAwLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KTtcblxuICAgICAgICB0aGlzLnNoYWRvdy5jdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ2Rlc3RpbmF0aW9uLW91dCc7XG4gICAgICAgIGxldCBncmQgPSB0aGlzLnNoYWRvdy5jdHguY3JlYXRlUmFkaWFsR3JhZGllbnQoZ2FtZS5wbGF5ZXIueCwgZ2FtZS5wbGF5ZXIueSwgMCwgZ2FtZS5wbGF5ZXIueCwgZ2FtZS5wbGF5ZXIueSwgMjAwKTtcbiAgICAgICAgZ3JkLmFkZENvbG9yU3RvcCgwLCBcInJnYmEoMCwgMCwgMCwgMSlcIik7XG4gICAgICAgIGdyZC5hZGRDb2xvclN0b3AoMC41LCBcInJnYmEoMCwgMCwgMCwgMC45NSlcIik7XG4gICAgICAgIGdyZC5hZGRDb2xvclN0b3AoMSwgXCJyZ2JhKDAsIDAsIDAsIDApXCIpO1xuICAgICAgICB0aGlzLnNoYWRvdy5jdHguZmlsbFN0eWxlID0gZ3JkO1xuICAgICAgICB0aGlzLnNoYWRvdy5jdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIHRoaXMuc2hhZG93LmN0eC5hcmMoZ2FtZS5wbGF5ZXIueCwgZ2FtZS5wbGF5ZXIueSwgMjAwLCAwLCAyICogTWF0aC5QSSk7XG4gICAgICAgIHRoaXMuc2hhZG93LmN0eC5maWxsKCk7XG5cbiAgICAgICAgZm9yIChsZXQgcGFydGljbGUgb2YgdGhpcy5wYXJ0aWNsZXMuZmlsdGVyKHAgPT4gcCBpbnN0YW5jZW9mIFBvcnRhbFBhcnRpY2xlKSkge1xuICAgICAgICAgICAgbGV0IHIgPSAocGFydGljbGUgYXMgUG9ydGFsUGFydGljbGUpLmVmZmVjdGl2ZVJhZGl1cygpO1xuICAgICAgICAgICAgdGhpcy5zaGFkb3cuY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdkZXN0aW5hdGlvbi1vdXQnO1xuICAgICAgICAgICAgbGV0IGdyZCA9IHRoaXMuc2hhZG93LmN0eC5jcmVhdGVSYWRpYWxHcmFkaWVudChwYXJ0aWNsZS54LCBwYXJ0aWNsZS55LCAwLCBwYXJ0aWNsZS54LCBwYXJ0aWNsZS55LCByKTtcbiAgICAgICAgICAgIGdyZC5hZGRDb2xvclN0b3AoMCwgXCJyZ2JhKDAsIDAsIDAsIDAuNylcIik7XG4gICAgICAgICAgICBncmQuYWRkQ29sb3JTdG9wKDEsIFwicmdiYSgwLCAwLCAwLCAwKVwiKTtcbiAgICAgICAgICAgIHRoaXMuc2hhZG93LmN0eC5maWxsU3R5bGUgPSBncmQ7XG4gICAgICAgICAgICB0aGlzLnNoYWRvdy5jdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICB0aGlzLnNoYWRvdy5jdHguYXJjKHBhcnRpY2xlLngsIHBhcnRpY2xlLnksIHIsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICAgICAgICAgIHRoaXMuc2hhZG93LmN0eC5maWxsKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNoYWRvdy5jdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ3NvdXJjZS1hdG9wJztcbiAgICAgICAgZm9yIChsZXQgbW9uc3RlciBvZiB0aGlzLm1vbnN0ZXJzKSB7XG4gICAgICAgICAgICB0aGlzLnNoYWRvdy5jdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICB0aGlzLnNoYWRvdy5jdHguYXJjKG1vbnN0ZXIueCwgbW9uc3Rlci55LCAyMDAsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qXG4gICAgICAgICAgd2UgZG9uJ3QgZXZlbiB1c2UgYmxvb2RwbGFuZXMgKHNwbGF0dGVyIHRlcnJhaW4pIGFueW1vcmUgYmVjYXVzZSBpIGp1c3RcbiAgICAgICAgICByZW5kZXIgYWxsIG9mIHRoZW0gYXMgcGFydGljbGVzXG4gICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IDEgLSB0aGlzLmJsb29kcGxhbmVzWzBdWzFdIC8gdGhpcy5ibG9vZHBsYW5lc1swXVsyXTtcbiAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gMC45O1xuICAgICAgICBjdHguZHJhd0ltYWdlKHRoaXMuYmxvb2RwbGFuZXNbMF1bMF0uY2FudmFzLCAwLCAwKTtcbiAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gMSAtIHRoaXMuYmxvb2RwbGFuZXNbMV1bMV0gLyB0aGlzLmJsb29kcGxhbmVzWzFdWzJdO1xuICAgICAgICBjdHguZHJhd0ltYWdlKHRoaXMuYmxvb2RwbGFuZXNbMV1bMF0uY2FudmFzLCAwLCAwKTtcbiAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gMSAtIHRoaXMuYmxvb2RwbGFuZXNbMl1bMV0gLyB0aGlzLmJsb29kcGxhbmVzWzJdWzJdO1xuICAgICAgICBjdHguZHJhd0ltYWdlKHRoaXMuYmxvb2RwbGFuZXNbMl1bMF0uY2FudmFzLCAwLCAwKTtcbiAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gMTtcbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgbGV0IHNoYWtlWCA9IDAsIHNoYWtlWSA9IDA7XG4gICAgICAgIHRoaXMuc2NyZWVuc2hha2VzLmZvckVhY2goc2hha2UgPT4ge1xuICAgICAgICAgICAgc2hha2VYICs9IHNoYWtlLng7XG4gICAgICAgICAgICBzaGFrZVkgKz0gc2hha2UueTtcbiAgICAgICAgfSk7XG4gICAgICAgIGN0eC50cmFuc2xhdGUoc2hha2VYLCBzaGFrZVkpO1xuXG4gICAgICAgIC8vIGxvdy1oYW5naW5nIGZydWl0IGhlcmUgKHByZS1yZW5kZXIgdGhlIG1hcCBzaW5jZSBpdCBuZXZlciBjaGFuZ2VzKVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMTA7IGorKykge1xuICAgICAgICAgICAgICAgIGxldCBrID0gKChpICogaSAqIDEzKSArIGogKiAxNykgJSA5O1xuICAgICAgICAgICAgICAgIFNwcml0ZS5kcmF3U3ByaXRlKGN0eCwgU3ByaXRlLnRpbGVzW2tdLCBpICogMzIgLSAxNiwgaiAqIDMyIC0gOCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBwYXJ0aWNsZSBvZiB0aGlzLnBhcnRpY2xlcykgaWYgKCFwYXJ0aWNsZS5mb3JlZ3JvdW5kICYmICFnYW1lLnN1cGVyRmlyZWQpIHBhcnRpY2xlLmRyYXcoY3R4KTtcblxuICAgICAgICB0aGlzLnBsYXllci5kcmF3KGN0eCk7XG5cbiAgICAgICAgLy9UZXh0LnJlbmRlclRleHQoY3R4LCAyNTAsIDEyMCwgMjAsICdUSEUgRUxFUEhBTlRTJyk7XG4gICAgICAgIC8vVGV4dC5yZW5kZXJUZXh0KGN0eCwgMTAwLCAyMDAsIDY0LCAnQUIwMTIzNDU2Nzg5Jyk7XG4gICAgICAgIC8vVGV4dC5yZW5kZXJUZXh0KGN0eCwgMTAwLCAxNTAsIDMwLCAnQUIwMTIzNDU2Nzg5Jyk7XG5cbiAgICAgICAgZm9yIChsZXQgbW9uc3RlciBvZiB0aGlzLm1vbnN0ZXJzKSBtb25zdGVyLmRyYXcoY3R4KTtcblxuICAvLyAgICAgIHZhciBidWJibGUgPSBjdHguY3JlYXRlTGluZWFyR3JhZGllbnQoXG4gICAgICAgIC8vIExldCdzIGFkZCBibHVlIG5vaXNlP1xuICAgICAgICAvKmZvciAobGV0IGkgPSAxMDA7IGkgPCAzMDA7IGkgKz0gNSkge1xuICAgICAgICAgICAgZm9yKGxldCBqID0gMTAwOyBqIDwgMTIwOyBqICs9IDUpIHtcbiAgICAgICAgICAgICAgICBsZXQgW3gsIHldID0gW01hdGgucmFuZG9tKCkgKiA1LCBNYXRoLnJhbmRvbSgpICogNV07XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICdyZ2JhKDAsMCwwLDAuNSknO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdChpK01hdGguZmxvb3IoeCksaitNYXRoLmZsb29yKHkpLDEsMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgcGFydGljbGUgb2YgdGhpcy5wYXJ0aWNsZXMpIGlmIChwYXJ0aWNsZS5mb3JlZ3JvdW5kKSBwYXJ0aWNsZS5kcmF3KGN0eCk7XG5cbiAgICAgICAgY3R4LmRyYXdJbWFnZSh0aGlzLnNoYWRvdy5jYW52YXMsIDAsIDApO1xuICAgICAgICBsZXQgbm9pc2VMb29wID0gTWF0aC5mbG9vcih0aGlzLmZyYW1lIC8gOCkgJSAzO1xuICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSAwLjA2O1xuICAgICAgICBjdHguZHJhd0ltYWdlKHRoaXMuYXJ0aWZhY3RzW25vaXNlTG9vcF0uY2FudmFzLCAwLCAwKTtcbiAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gMTtcblxuICAgICAgICB0aGlzLmh1ZC5kcmF3KGN0eCk7XG4gICAgICAgIHRoaXMuaGl2ZS5kcmF3KGN0eCk7XG5cbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcblxuICAgICAgICAvKlxuICAgICAgICBpZiAodGhpcy5mcmFtZSAlIEhFQVJUQkVBVCA9PT0gMCB8fCAodGhpcy5mcmFtZSAtIDEpICUgSEVBUlRCRUFUID09PSAwIHx8ICh0aGlzLmZyYW1lIC0gMikgJSBIRUFSVEJFQVQgPT09IDApIHtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSAncmdiYSgyNTUsIDI1NSwgMzAsIDAuMyknO1xuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KDEwMCwgMCwgMTAwLCAxMCk7XG4gICAgICAgICovXG5cbiAgICAgICAgTWVudS5kcmF3KHZpZXdwb3J0KTtcbiAgICB9XG5cbiAgICBkcmF3TWF6ZShjdHgsIG1hemUpIHtcbiAgICAgICAgbGV0IG9mZnNldCA9IHtcbiAgICAgICAgICAgIHg6IHZpZXdwb3J0LmNlbnRlci51IC0gdGhpcy5jYW1lcmEucG9zLngsXG4gICAgICAgICAgICB5OiB2aWV3cG9ydC5jZW50ZXIudiAtIHRoaXMuY2FtZXJhLnBvcy55XG4gICAgICAgIH07XG5cbiAgICAgICAgbGV0IHIxID0gdGhpcy5hY3RpdmVCYXR0bGUgPyB0aGlzLmFjdGl2ZUJhdHRsZS5yb29tLnIgOiAwLFxuICAgICAgICAgICAgcjIgPSB0aGlzLmFjdGl2ZUJhdHRsZSA/IHRoaXMuYWN0aXZlQmF0dGxlLnJvb20uciArIHRoaXMuYWN0aXZlQmF0dGxlLnJvb20uaCA6IG1hemUudGlsZXMubGVuZ3RoLFxuICAgICAgICAgICAgcTEgPSB0aGlzLmFjdGl2ZUJhdHRsZSA/IHRoaXMuYWN0aXZlQmF0dGxlLnJvb20ucSA6IDAsXG4gICAgICAgICAgICBxMiA9IHRoaXMuYWN0aXZlQmF0dGxlID8gdGhpcy5hY3RpdmVCYXR0bGUucm9vbS5xICsgdGhpcy5hY3RpdmVCYXR0bGUucm9vbS53IDogbWF6ZS50aWxlc1swXS5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChsZXQgciA9IHIxOyByIDwgcjI7IHIrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgcSA9IHExOyBxIDwgcTI7IHErKykge1xuICAgICAgICAgICAgICAgIGxldCB4ID0gcSAqIDMyICsgb2Zmc2V0LngsIHkgPSByICogMzIgKyBvZmZzZXQueTtcbiAgICAgICAgICAgICAgICBpZiAoeCA8IC01MCB8fCB5IDwgLTUwIHx8IHggPiA1MDAgfHwgeSA+IDUwMCkgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICBsZXQgc3ByaXRlID0gU3ByaXRlLnRpbGVzW21hemUudGlsZXNbcl1bcV0gJiAwYjExMTFdO1xuICAgICAgICAgICAgICAgIGlmICghc3ByaXRlKSB0aHJvdyBuZXcgRXJyb3IoYCR7cX0sJHtyfSB0aWxlICR7bWF6ZS50aWxlc1tyXVtxXX1gKTtcbiAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKHNwcml0ZS5pbWcsIHgsIHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgciA9IHIxOyByIDwgcjI7IHIrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgcSA9IHExOyBxIDwgcTI7IHErKykge1xuICAgICAgICAgICAgICAgIGxldCB4ID0gcSAqIDMyICsgb2Zmc2V0LngsIHkgPSByICogMzIgKyBvZmZzZXQueTtcbiAgICAgICAgICAgICAgICBpZiAoeCA8IC01MCB8fCB5IDwgLTUwIHx8IHggPiA1MDAgfHwgeSA+IDUwMCkgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICBpZiAobWF6ZS53YWxsc1tyXVtxXSAmIEMuV0FMTF9UT1ApIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShTcHJpdGUud2FsbHMuaW1nLCA1LCA1LCAzNiwgNCwgeCAtIDIsIHkgLSAyLCAzNiwgNCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG1hemUud2FsbHNbcl1bcV0gJiBDLldBTExfUklHSFQpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShTcHJpdGUud2FsbHMuaW1nLCAzNywgNSwgNCwgMzYsIHggKyAzMCwgeSAtIDIsIDQsIDM2KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobWF6ZS53YWxsc1tyXVtxXSAmIEMuV0FMTF9CT1RUT00pIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShTcHJpdGUud2FsbHMuaW1nLCA1LCAzNywgMzYsIDQsIHggLSAyLCB5ICsgMzAsIDM2LCA0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobWF6ZS53YWxsc1tyXVtxXSAmIEMuV0FMTF9MRUZUKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoU3ByaXRlLndhbGxzLmltZywgNSwgNSwgNCwgMzYsIHggLSAyLCB5IC0gMiwgNCwgMzYpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZUJhdHRsZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZiA9ICh0aGlzLmZyYW1lIC8gOCkgJSAzIHwgMDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobWF6ZS53YWxsc1tyXVtxXSAmIEMuT1BFTl9UT1ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoU3ByaXRlLmJhdHRsZV9kb29yW2ZdLmltZywgNSwgMCwgMzYsIDksIHggLSAyLCB5IC0gNywgMzYsIDkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHIgPT09IHIxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKFNwcml0ZS5iYXR0bGVfc3ByYXlbZl0uaW1nLCA1LCAwLCAzNiwgNSwgeCAtIDIsIHkgLSA3LCAzNiwgNSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAobWF6ZS53YWxsc1tyXVtxXSAmIEMuT1BFTl9SSUdIVCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShTcHJpdGUuYmF0dGxlX2Rvb3JbZl0uaW1nLCAzNywgNSwgOSwgNDEsIHggKyAzMCwgeSAtIDIsIDksIDQxKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyID09PSByMSAmJiBxID09PSBxMiAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoU3ByaXRlLmJhdHRsZV9zcHJheVtmXS5pbWcsIDQxLCAwLCA1LCA0NiwgeCArIDM0LCB5IC0gIDcsIDUsIDQ2KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXplLndhbGxzW3JdW3FdICYgQy5PUEVOX0JPVFRPTSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShTcHJpdGUuYmF0dGxlX2Rvb3JbZl0uaW1nLCA1LCAzNywgMzYsIDksIHggLSAyLCB5ICsgMzAsIDM2LCA5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXplLndhbGxzW3JdW3FdICYgQy5PUEVOX0xFRlQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoU3ByaXRlLmJhdHRsZV9kb29yW2ZdLmltZywgMCwgNSwgOSwgNDEsIHggLSA3LCB5IC0gMiwgOSwgNDEpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHIgPT09IHIxICYmIHEgPT09IHExKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKFNwcml0ZS5iYXR0bGVfc3ByYXlbZl0uaW1nLCAwLCAwLCA1LCA0NiwgeCAtIDcsIHkgLSAgNywgNSwgNDYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gb2xkIHdhbGwgbG9naWNcbiAgICAgICAgLy9zcHJpdGUgPSBTcHJpdGUud2FsbHNbbWF6ZS50aWxlc1tyXVtxXSA+PiA0XTtcbiAgICAgICAgLy9pZiAoc3ByaXRlKSBjdHguZHJhd0ltYWdlKHNwcml0ZS5pbWcsIHgsIHkpO1xuXG4gICAgICAgIC8vaWYgKHRoaXMubWF6ZS5mbG93aG9tZVtyXVtxXSA8IDEwMClcbiAgICAgICAgLy9UZXh0LmRyYXdUZXh0KGN0eCwgU3RyaW5nKHRoaXMubWF6ZS5mbG93aG9tZVtyXVtxXSksIHgsIHkpO1xuXG4gICAgICAgIC8vIGNvbW1lbnRlZCBmb3Igc2NyZWVuc2hvdHM6XG4gICAgICAgIC8vVGV4dC5kcmF3VGV4dChjdHgsIFN0cmluZyhtYXplLnRpbGVzW3JdW3FdID4+IDQpLCB4LCB5KTtcblxuICAgICAgICAvL2N0eC5maWxsUmVjdChxICogNCAtIHRoaXMuY2FtZXJhLnBvcy54ICsgdGhpcy5jZW50ZXIucGl4ZWwudSwgciAqIDQgLSB0aGlzLmNhbWVyYS5wb3MueSArIHRoaXMuY2VudGVyLnBpeGVsLnYsIDQsIDQpO1xuICAgIH1cblxuICAgIHBvaW50ZXJYWSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlucHV0LnBvaW50ZXIpIHJldHVybjtcbiAgICAgICAgcmV0dXJuIHRoaXMudXYyeHkodGhpcy5pbnB1dC5wb2ludGVyKTtcbiAgICB9XG5cbiAgICB4eTJ1dihwb3MpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHU6IHBvcy54IC0gdGhpcy5jYW1lcmEucG9zLnggKyB2aWV3cG9ydC5jZW50ZXIudSxcbiAgICAgICAgICAgIHY6IHBvcy55IC0gdGhpcy5jYW1lcmEucG9zLnkgKyB2aWV3cG9ydC5jZW50ZXIudlxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHV2Mnh5KHBvcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogcG9zLnUgLSB2aWV3cG9ydC5jZW50ZXIudSArIHRoaXMuY2FtZXJhLnBvcy54LFxuICAgICAgICAgICAgeTogcG9zLnYgLSB2aWV3cG9ydC5jZW50ZXIudiArIHRoaXMuY2FtZXJhLnBvcy55XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZHJhd0h1ZChjdHgpIHtcbiAgICAgICAgbGV0IGhwID0gRy5jbGFtcChnYW1lLnBsYXllci5ocCwgMCwgMTAwKTtcbiAgICAgICAgY3R4LmRyYXdJbWFnZShTcHJpdGUuaHVkX2hlYWx0aF9mcmFtZS5pbWcsIDIsIDIpO1xuICAgICAgICBjdHguZHJhd0ltYWdlKFNwcml0ZS5odWRfaGVhbHRoX2ZpbGwuaW1nLCAwLCAwLCBocCArIDgsIDgsIDIsIDIsIGhwICsgOCwgOCk7XG5cbiAgICAgICAgbGV0IHNwcml0ZSA9IFNwcml0ZS5odWRfc2hlbGxzX2Z1bGw7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ2FtZS5wbGF5ZXIuc2hlbGxzTWF4OyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpICsgMSA+IGdhbWUucGxheWVyLnNoZWxsc0xlZnQpIHNwcml0ZSA9IFNwcml0ZS5odWRfc2hlbGxzX2VtcHR5O1xuICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShzcHJpdGUuaW1nLCAxNSArIDYgKiBpLCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICBjdHguZHJhd0ltYWdlKFNwcml0ZS5wYWdlLmltZywgdmlld3BvcnQud2lkdGggLSAzOSwgMTAgLSAxKTtcbiAgICAgICAgVGV4dC5kcmF3VGV4dChjdHgsICd4MzAyJywgdmlld3BvcnQud2lkdGggLSAzMCwgMTApO1xuXG4gICAgICAgIFRleHQuZHJhd1RleHQoY3R4LCBTdHJpbmcodGhpcy5mcmFtZSksIHZpZXdwb3J0LndpZHRoIC0gMzAsIHZpZXdwb3J0LmhlaWdodCAtIDI4KTtcblxuICAgICAgICBUZXh0LmRyYXdSaWdodFRleHQoY3R4LCBbdmlld3BvcnQuc2NhbGUsIHZpZXdwb3J0LndpZHRoLCB2aWV3cG9ydC5oZWlnaHRdLmpvaW4oJywgJyksIHZpZXdwb3J0LndpZHRoIC0gNCwgdmlld3BvcnQuaGVpZ2h0IC0gMTgpO1xuICAgICAgICBsZXQgcHRyID0gdGhpcy5pbnB1dC5wb2ludGVyO1xuICAgICAgICBpZiAocHRyKSB7XG4gICAgICAgICAgICBUZXh0LmRyYXdSaWdodFRleHQoY3R4LCBKU09OLnN0cmluZ2lmeShwdHIpLCB2aWV3cG9ydC53aWR0aCAtIDQsIHZpZXdwb3J0LmhlaWdodCAtIDgpO1xuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGN0eC50cmFuc2xhdGUocHRyLnUsIHB0ci52KTtcbiAgICAgICAgICAgIGN0eC5yb3RhdGUodGhpcy5mcmFtZSAvIDcyKTtcbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoU3ByaXRlLmh1ZF9jcm9zc2hhaXIuaW1nLCAtU3ByaXRlLmh1ZF9jcm9zc2hhaXIuYW5jaG9yLngsIC1TcHJpdGUuaHVkX2Nyb3NzaGFpci5hbmNob3IueSk7XG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgLy9TcHJpdGUuZHJhd1Nwcml0ZShjdHgsIFNwcml0ZS5odWRfY3Jvc3NoYWlyLCBwdHIudSwgcHRyLnYpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmdyYWIpIHtcbiAgICAgICAgICAgIGxldCBjb2xvcnMgPSBbXG4gICAgICAgICAgICAgICAgJ3JnYmEoMjAsIDIwLCAyMCknLFxuICAgICAgICAgICAgICAgICdyZ2JhKDIwLCAyMCwgMjApJyxcbiAgICAgICAgICAgICAgICAncmdiYSgzMiwgMzIsIDMyKScsXG4gICAgICAgICAgICAgICAgJ3JnYmEoMzIsIDMyLCAzMiknLFxuICAgICAgICAgICAgICAgICdyZ2JhKDY0LCA2LCA2KScsXG4gICAgICAgICAgICAgICAgJ3JnYmEoNjQsIDYsIDYpJyxcbiAgICAgICAgICAgICAgICAncmdiYSgxMjgsIDAsIDApJyxcbiAgICAgICAgICAgICAgICAncmdiYSgxNTgsIDMyLCAzMiknXG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICB0aGlzLmdyYWIgPSBuZXcgQ2FudmFzKDEwMCwgMTAwKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwOyBpKyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwMDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjID0gY29sb3JzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNvbG9ycy5sZW5ndGgpXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ncmFiLmN0eC5maWxsU3R5bGUgPSBjO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyYWIuY3R4LmZpbGxSZWN0KGksIGosIDEsIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZ3JhYi5jdHguZ2xvYmFsT3BhY2l0eSA9IDAuMTtcbiAgICAgICAgICAgIHRoaXMuZ3JhYi5jdHguZHJhd0ltYWdlKHRoaXMuZ3JhYi5jYW52YXMsIDAsIDAsIDUwLCAxMDAsIDEsIDAsIDUwLCAxMDApO1xuICAgICAgICAgICAgdGhpcy5ncmFiLmN0eC5kcmF3SW1hZ2UodGhpcy5ncmFiLmNhbnZhcywgMCwgMCwgNTAsIDEwMCwgMiwgMCwgNTAsIDEwMCk7XG4gICAgICAgICAgICB0aGlzLmdyYWIuY3R4LmRyYXdJbWFnZSh0aGlzLmdyYWIuY2FudmFzLCAwLCAwLCA1MCwgMTAwLCAzLCAwLCA1MCwgMTAwKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbWFyayA9IHRoaXMuZnJhbWUgJSAxMDA7XG4gICAgICAgIC8vY3R4LmRyYXdJbWFnZSh0aGlzLmdyYWIuY2FudmFzLCBtYXJrLCAwLCAxMDAgLSBtYXJrLCAxMDAsIDUwLCA1MCwgMTAwIC0gbWFyaywgMTAwKTtcbiAgICAgICAgLy9jdHguZHJhd0ltYWdlKHRoaXMuZ3JhYi5jYW52YXMsIDAsIDAsIG1hcmssIDEwMCwgNTAgKyAxMDAgLSBtYXJrLCA1MCwgbWFyaywgMTAwKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBnYW1lID0gbmV3IEdhbWUoKTtcbiIsImltcG9ydCB7IGdhbWUgfSBmcm9tICcuL0dhbWUnO1xuXG4vKipcbiAqIENyZWF0ZSBhbmQgbGF1bmNoIGdhbWUuXG4gKi9cbmdhbWUuaW5pdCgpLnRoZW4oKCkgPT4gZ2FtZS5zdGFydCgpKTtcbiJdLCJuYW1lcyI6WyJDIiwiRyJdLCJtYXBwaW5ncyI6Ijs7O0lBRU8sTUFBTSxTQUFTLEdBQUc7SUFDekIsSUFBSSxFQUFFLEVBQUUsQ0FBQztJQUNULElBQUksR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxHQUFHLEdBQUc7SUFDN0IsSUFBSSxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsR0FBRztJQUM3QixJQUFJLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxHQUFHO0lBQzdCLElBQUksSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUc7SUFDN0IsSUFBSSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRztJQUM3QixJQUFJLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHO0FBQzdCO0lBQ0E7SUFDQSxJQUFJLFVBQVUsRUFBRSxFQUFFO0lBQ2xCLElBQUksV0FBVyxFQUFFLEVBQUU7QUFDbkI7SUFDQTtJQUNBLElBQUksV0FBVyxhQUFhLENBQUM7SUFDN0IsSUFBSSxXQUFXLGFBQWEsQ0FBQztJQUM3QixJQUFJLFVBQVUsY0FBYyxDQUFDO0lBQzdCLElBQUksVUFBVSxjQUFjLENBQUM7QUFDN0I7SUFDQTtJQUNBLElBQUksUUFBUSxPQUFPLFdBQVc7SUFDOUIsSUFBSSxVQUFVLEtBQUssV0FBVztJQUM5QixJQUFJLFdBQVcsSUFBSSxXQUFXO0lBQzlCLElBQUksU0FBUyxNQUFNLFdBQVc7QUFDOUI7SUFDQTtJQUNBLElBQUksUUFBUSxPQUFPLFdBQVc7SUFDOUIsSUFBSSxVQUFVLEtBQUssV0FBVztJQUM5QixJQUFJLFdBQVcsSUFBSSxXQUFXO0lBQzlCLElBQUksU0FBUyxNQUFNLFdBQVc7QUFDOUI7SUFDQSxJQUFJLG1CQUFtQixFQUFFLENBQUM7SUFDMUIsQ0FBQzs7SUNoQ0Q7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNPLE1BQU0sTUFBTSxDQUFDO0lBQ3BCLEVBQUUsV0FBVyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUU7SUFDN0IsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkQsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDOUIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDaEMsSUFBSSxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVDLEdBQUc7SUFDSDs7SUNaQTtJQUNBO0lBQ0E7SUFDTyxNQUFNLFdBQVc7SUFDeEI7SUFDQSxFQUFFLGFBQWE7SUFDZixHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQy9CLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQy9CLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQy9CLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQy9CLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQy9CLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQy9CLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQy9CLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDakMsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRTtJQUMxQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3pDLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDaEQsRUFBRSxhQUFhO0lBQ2YsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtJQUNsQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtJQUNwQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RDLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDMUUsRUFBRSxRQUFRO0lBQ1YsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRTtJQUNsQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRTtJQUNuQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRTtJQUNuQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRTtJQUNuQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFO0lBQ3JDLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUU7SUFDN0UsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUN4QyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFO0lBQzVFLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUU7SUFDL0MsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRTtJQUM3QyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFO0lBQy9FLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUU7SUFDN0MsRUFBRSxPQUFPO0lBQ1QsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRTtJQUNuQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRTtJQUNwQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRTtJQUNwQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRTtJQUNwQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFO0lBQ3RDLEVBQUUsT0FBTztJQUNULEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7SUFDbkMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7SUFDcEMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7SUFDcEMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7SUFDcEMsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7SUFDckMsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7SUFDckMsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7SUFDckMsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRTtJQUN2QyxFQUFFLE1BQU07SUFDUixHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFO0lBQ25DLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFO0lBQ3BDLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFO0lBQ3BDLEtBQUssRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFO0lBQ3JDLEtBQUssRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFO0lBQ3JDLEtBQUssRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFO0lBQ3JDLEtBQUssRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtJQUN6QztJQUNBOztJQ3ZEQTtJQUNBLE1BQU0sZUFBZSxHQUFHLGFBQWEsQ0FBQztBQUN0QztJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDTyxNQUFNLE1BQU0sQ0FBQztJQUNwQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0EsRUFBRSxPQUFPLFVBQVUsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7SUFDdkMsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLEdBQUc7QUFDSDtJQUNBLEVBQUUsT0FBTyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUU7SUFDcEUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNsRixJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzdDLEdBQUc7QUFDSDtJQUNBLEVBQUUsT0FBTyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUU7SUFDbkUsSUFBSSxPQUFPO0lBQ1gsTUFBTSxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4RSxNQUFNLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLEtBQUssQ0FBQztJQUNOLEdBQUc7QUFDSDtJQUNBO0lBQ0E7SUFDQTtJQUNBLEVBQUUsT0FBTyxlQUFlLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQzVDLElBQUksR0FBRyxDQUFDLFdBQVcsR0FBRyxzQkFBc0IsQ0FBQztJQUM3QyxJQUFJLEdBQUcsQ0FBQyxVQUFVO0lBQ2xCLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1QyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUMsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekMsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekMsS0FBSyxDQUFDO0lBQ04sR0FBRztBQUNIO0lBQ0E7SUFDQTtJQUNBO0lBQ0EsRUFBRSxPQUFPLFVBQVUsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7SUFDdkMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUU7SUFDckIsTUFBTSxHQUFHLENBQUMsV0FBVyxHQUFHLHNCQUFzQixDQUFDO0lBQy9DLE1BQU0sR0FBRyxDQUFDLFVBQVU7SUFDcEIsUUFBUSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlDLFFBQVEs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QUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM5RTtJQUNBO0lBQ0EsSUFBSSxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9EO0lBQ0EsSUFBSSxNQUFNLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDO0lBQzdFLEdBQUc7QUFDSDtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0EsRUFBRSxPQUFPLGVBQWUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFO0lBQ3JDLElBQUksT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzlHLEdBQUc7QUFDSDtJQUNBLEVBQUUsT0FBTyxXQUFXLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtJQUNsQyxJQUFJLElBQUksTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pELElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM5RCxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDaEUsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3ZDLElBQUksT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ3pCLEdBQUc7QUFDSDtJQUNBLEVBQUUsT0FBTyxPQUFPLENBQUMsR0FBRyxPQUFPLEVBQUU7SUFDN0IsSUFBSSxJQUFJLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqRSxJQUFJLEtBQUssSUFBSSxNQUFNLElBQUksT0FBTyxFQUFFO0lBQ2hDLE1BQU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6QyxLQUFLO0lBQ0wsSUFBSSxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDekIsR0FBRztBQUNIO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQSxFQUFFLE9BQU8saUJBQWlCLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRTtJQUN6QyxJQUFJLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDNUM7SUFDQSxJQUFJLE9BQU87SUFDWCxNQUFNLEdBQUcsRUFBRSxNQUFNO0lBQ2pCLE1BQU0sTUFBTSxFQUFFLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO0lBQ3JGLE1BQU0sSUFBSSxFQUFFLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFDbEUsTUFBTSxJQUFJLEVBQUUsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJO0lBQzdCLEtBQUssQ0FBQztJQUNOLEdBQUc7QUFDSDtJQUNBO0lBQ0E7SUFDQTtJQUNBLEVBQUUsT0FBTyxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtJQUN6QztJQUNBLElBQUksTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwQyxJQUFJLE1BQU0sV0FBVyxHQUFHLElBQUksTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6QyxJQUFJLFdBQVcsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUQsSUFBSSxPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUM7SUFDOUIsR0FBRztBQUNIO0lBQ0E7SUFDQTtJQUNBO0lBQ0EsRUFBRSxhQUFhLFNBQVMsQ0FBQyxHQUFHLEVBQUU7SUFDOUIsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2xEO0lBQ0EsSUFBSSxPQUFPLE1BQU0sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxLQUFLO0lBQ2xELE1BQU0sSUFBSSxLQUFLLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztJQUM5QixNQUFNLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUMsTUFBTSxLQUFLLENBQUMsT0FBTyxH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RSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7SUFDbkMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ3JDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNyQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDdEMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ3JDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNyQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDdkMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO0FBQ3ZDO0lBQ0E7SUFDQSxJQUFJLElBQUksQ0FBQyxlQUFlLEdBQUc7SUFDM0IsTUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQ2hDLE1BQU0sRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQ2hDLE1BQU0sRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtJQUNoQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7SUFDaEMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7SUFDaEMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtJQUNoQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtJQUNoQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtJQUNoQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7SUFDaEMsTUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7SUFDaEMsTUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQ2hDLE1BQU0sRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtJQUNoQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7SUFDaEMsTUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7SUFDaEMsTUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQ2hDLE1BQU0sRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtJQUNoQyxLQUFLLENBQUM7QUFDTjtJQUNBLElBQUksSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7QUFDbkI7SUFDQSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNqQixHQUFHO0FBQ0g7SUFDQSxFQUFFLE1BQU0sSUFBSSxHQUFHO0lBQ2YsSUFBSSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLEtBQUssSUFBSTtJQUNoRCxNQUFNLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RDLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakMsTUFBTSxJQUFJLENBQUMsRUFBRTtJQUNiLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDNUIsT0FBTztBQUNQO0lBQ0E7SUFDQTtJQUNBLEtBQUssQ0FBQyxDQUFDO0FBQ1A7SUFDQSxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsS0FBSyxJQUFJO0lBQzlDLE1BQU0sSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdEMsTUFBTSxJQUFJLENBQUMsRUFBRTtJQUNiLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDN0IsT0FBTztJQUNQLEtBQUssQ0FBQyxDQUFDO0lBQ1AsR0FBRztBQUNIO0lBQ0EsRUFBRSxNQUFNLEdBQUc7SUFDWDtJQUNBO0lBQ0E7SUFDQSxJQUFJLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO0lBQ25ELGlCQUFpQixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN0RCxpQkFBaUIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdEQsaUJBQWlCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDeEQ7SUFDQSxJQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqRCxHQUFHO0FBQ0g7SUFDQSxFQUFFLEtBQUssR0FBRztJQUNWLElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdDLElBQUksS0FBSyxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRTtJQUNwRCxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQ2hDLEtBQUs7SUFDTCxHQUFHO0lBQ0g7O0lDbEdBLE1BQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQztJQUN2QixNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDeEI7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ08sTUFBTSxRQUFRLENBQUM7SUFDdEIsRUFBRSxNQUFNLElBQUksR0FBRztJQUNmLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3BELElBQUksSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEIsR0FBRztBQUNIO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQSxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUU7SUFDaEIsSUFBSSxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7SUFDdEMsSUFBSSxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztJQUN4QyxJQUFJLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDO0lBQzFDLElBQUksSUFBSSxRQUFRLEdBQUcsS0FBSyxHQUFHLEdBQUcsQ0FBQztJQUMvQixJQUFJLElBQUksU0FBUyxHQUFHLE1BQU0sR0FBRyxHQUFHLENBQUM7QUFDakM7SUFDQSxJQUFJLElBQUksS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxLQUFLLFFBQVEsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7SUFDckYsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUM7SUFDbkMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7QUFDckM7SUFDQSxNQUFNLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxVQUFVLEVBQUUsU0FBUyxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3BHLE1BQU0sSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3RCxNQUFNLElBQUks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RUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtJQUNsRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtJQUNsRSxLQUFLLENBQUM7SUFDTixJQUFJLE9BQU8sUUFBUSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdDLEdBQUc7QUFDSDtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtJQUM3QixJQUFJLE9BQU8sUUFBUSxDQUFDLHFCQUFxQixDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2hGLEdBQUc7QUFDSDtJQUNBO0lBQ0EsRUFBRSx3QkFBd0IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUU7SUFDOUM7SUFDQTtJQUNBO0lBQ0EsSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlDLFFBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUMsUUFBUSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QyxRQUFRLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlDLE1BQU0sT0FBTztBQUNiO0lBQ0EsSUFBSSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekIsSUFBSSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekIsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDeEMsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDeEMsSUFBSSxJQUFJLE9BQU8sR0FBRyxRQUFRLENBQUM7SUFDM0IsSUFBSSxJQUFJLE9BQU8sR0FBRyxRQUFRLENBQUM7QUFDM0I7SUFDQTtJQUNBO0lBQ0EsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUMxRCxNQUFNLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQztJQUNyRCxNQUFNLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO0lBQ3BDLFFBQVEsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ25DLFFBQVEsSUFBSSxFQUFFLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUNwRCxVQUFVLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDbkcsU0FBUztJQUNULE9BQU87SUFDUCxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVCLEtBQUs7SUFDTDtJQUNBLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7SUFDMUQsTUFBTSxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0RCxNQUFNLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO0lBQ3BDLFFBQVEsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ25DLFFBQVEsSUFBSSxFQUFFLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUNwRCxVQUFVLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBQ2xHLFNBQVM7SUFDVCxPQUFPO0lBQ1AsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1QixLQUFLO0lBQ0w7SUFDQSxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0lBQzFELE1BQU0sSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDO0lBQ3JELE1BQU0sSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUU7SUFDcEMsUUFBUSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkMsUUFBUSxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0lBQ3BELFVBQVUsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsR0FBRyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNuRyxTQUFTO0lBQ1QsT0FBTztJQUNQLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUIsS0FBSztJQUNMO0lBQ0EsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUMxRCxNQUFNLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RELE1BQU0sSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUU7SUFDcEMsUUFBUSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkMsUUFBUSxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0lBQ3BELFVBQVUsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsR0FBRyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDbEcsU0FBUztJQUNULE9BQU87SUFDUCxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVCLEtBQUs7QUFDTDtJQUNBO0lBQ0EsSUFBSSxJQUFJLE9BQU8sS0FBSyxRQUFRLElBQUksT0FBTyxLQUFLLFFBQVEsRUFBRSxPQUFPO0FBQzdEO0lBQ0E7SUFDQSxJQUFJLElBQUksT0FBTyxLQUFLLFFBQVEsSUFBSSxPQUFPLEtBQUssUUFBUSxFQUFFO0lBQ3RELE1BQU0sT0FBTyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25ELEtBQUs7SUFDTCxJQUFJLElBQUksT0FBTyxLQUFLLFFBQVEsSUFBSSxPQUFPLEtBQUssUUFBUSxFQUFFO0lBQ3RELE1BQU0sT0FBTyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25ELEtBQUs7QUFDTDtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFD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SUFDL0MsSUFBSSxJQUFJLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUMzQixNQUFNLE9BQU8sRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDaEUsS0FBSztJQUNMLEdBQUc7QUFDSDtJQUNBLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsV0FBVyxHQUFHLFFBQVEsRUFBRTtJQUMzQyxJQUFJLElBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3pFLElBQUksSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RDLElBQUksT0FBTyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtJQUM3QixNQUFNLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN6QyxNQUFNLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxTQUFTO0lBQ3pDLE1BQU0sTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDO0lBQzVCLE1BQU0sSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksV0FBVyxFQUFFLFNBQVM7SUFDaEQsTUFBTSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZGLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN2RixNQUFNLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDdkYsTUFBTSxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZGLEtBQUs7SUFDTCxJQUFJLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLEdBQUc7QUFDSDtJQUNBLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFO0lBQ2hDLElBQUksSUFBSSxFQUFFLEdBQUcsT0FBTyxLQUFLLEtBQUssVUFBVSxHQUFHLEtBQUssR0FBRyxNQUFNLEtBQUssQ0FBQztJQUMvRCxJQUFJLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRSxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRixHQUFHO0FBQ0g7SUFDQSxFQUFFLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQ3ZCLElBQUksSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO0lBQzNCLE1BQU0sSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7SUFDeEMsTUFBTSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRSxPQUFPLEtBQUssQ0FBQztJQUNqRyxLQUFLO0lBQ0wsSUFBSSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsQyxHQUFHO0lBQ0gsQ0FBQzs7SUM5WUQ7SUFDQTtJQUNBO0lBQ08sTUFBTSxHQUFHO0lBQ2hCO0lBQ0EsRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUNQLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDUCxFQUFFLEtBQUs7SUFDUCxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQ3RCLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQ3ZCLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQ3RCLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQ3ZCLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQ3ZCLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQ3hCLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQ3hCLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQ3ZCLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFO0lBQ3pCLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFO0lBQ3pCLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUU7SUFDM0IsRUFBRSxPQUFPO0lBQ1QsR0FBRyxFQUFFLEVBQUU7SUFDUCxLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLEVBQUU7SUFDUCxLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLEVBQUU7SUFDUCxLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLEVBQUU7SUFDUCxLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLEVBQUU7SUFDUCxLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLEVBQUU7SUFDUCxLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLEVBQUU7SUFDUCxLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLEVBQUU7SUFDUCxLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLEVBQUU7SUFDUCxLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLEVBQUU7SUFDUCxLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENBQUM7SUFDTixLQUFLLENB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QVEsRUFBRTtJQUNqQyxNQUFNLElBQUksTUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDdkMsS0FBSztJQUNMLEdBQUc7SUFDSCxDQUFDOztJQ2REO0lBQ0E7SUFDQTtJQUNPLE1BQU0sT0FBTyxDQUFDO0lBQ3JCLEVBQUUsV0FBVyxHQUFHO0lBQ2hCLElBQUksSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0lBQzlCLElBQUksSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0lBQzlCLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUN4QyxJQUFJLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDO0lBQ2xCLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDckIsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztBQUNyQjtJQUNBLElBQUksSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7SUFDcEIsR0FBRztBQUNIO0lBQ0EsRUFBRSxLQUFLLEdBQUc7SUFDVixJQUFJLFFBQVEsSUFBSSxDQUFDLEtBQUs7SUFDdEIsTUFBTSxLQUFLLFFBQVEsQ0FBQyxJQUFJO0lBQ3hCLFFBQVEsSUFBSSxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7SUFDdEQsVUFBVSxJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7SUFDdEMsU0FBUztJQUNULFFBQVEsTUFBTTtJQUNkLE1BQU0sS0FBSyxRQUFRLENBQUMsS0FBSztJQUN6QixRQUFRLElBQUksSUFBSSxHQUFHQSxRQUFD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QUM7SUFDN0IsRUFBRSxXQUFXLENBQUMsTUFBTSxFQUFFO0lBQ3RCLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNoQixJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO0lBQ3BCLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDakIsR0FBRztBQUNIO0lBQ0EsRUFBRSxLQUFLLEdBQUc7SUFDVixJQUFJLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDOUMsR0FBRztBQUNIO0lBQ0EsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFO0lBQ2pCLElBQUksS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3BELE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDbkQsTUFBTSxJQUFJLEtBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQzFCO0lBQ0EsTUFBTSxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxFQUFFO0lBQzNCLFFBQVEsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDaEQsUUFBUSxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN4RSxRQUFRLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzFFLFFBQVEsUUFBUSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0lBQ3JDLE9BQU87SUFDUCxLQUFLO0lBQ0wsR0FBRztJQUNIOztJQ3pCQTtJQUNPLE1BQU0sS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUM7QUFDbE47SUFDQTtJQUNPLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENB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QUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxXQUFXO0lBQzVFLEtBQUssQ0FBQztBQUNOO0lBQ0EsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QyxHQUFHO0FBQ0g7SUFDQSxFQUFFLElBQUksR0FBRztJQUNULElBQUksS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3hCO0lBQ0EsSUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7SUFDakMsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNwQixJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUN0QjtJQUNBLElBQUksSUFBSSxLQUFLLEdBQUdBLFFBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQzFEO0lBQ0E7SUFDQSxJQUFJLElBQUksQ0FBQyxHQUFHLEdBQUdBLFFBQUMsQ0FBQyxZQUFZLENBQUMsRUFBRSxHQUFHQSxRQUFDLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzVFLEdBQUc7QUFDSDtJQUNBLEVBQUUsTUFBTSxHQUFHO0lBQ1gsSUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7SUFDakMsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNyQixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3pELEdBQUc7QUFDSDtJQUNBLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRTtJQUNqQixJQUFJLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbEY7SUFDQSxJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLHlCQUF5QixDQUFDO0lBQ3pELElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUM3QixJQUFJLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFRCxTQUFDLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDeEUsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JDLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUMxQixJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2pDLEdBQUc7SUFDSDs7SUN2R0E7SUFDQTtJQUNBO0lBQ08sTUFBTSxRQUFRLENBQUM7SUFDdEIsRUFBRSxXQUFXLEdBQUc7SUFDaEIsSUFBSSxJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFDOUIsSUFBSSxJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFDOUIsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0lBQ3hDLElBQUksSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUM7SUFDbEIsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNyQixJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQ3BCO0lBQ0EsSUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztBQUNsQjtJQUNBLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDdkIsR0FBRztBQUNIO0lBQ0EsRUFBRSxLQUFLLEdBQUc7SUFDVixJQUFJLFFBQVEsSUFBSSxDQUFDLEtBQUs7SUFDdEIsTUFBTSxLQUFLLFFBQVEsQ0FBQyxJQUFJO0lBQ3hCO0lBQ0E7SUFDQSxRQUFRLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBR0EsU0FBQyxDQUFDLElBQUksQ0FBQztJQUMzQyxRQUFRLElBQUksS0FBSyxHQUFHQSxTQUFDLENBQUMsR0FBRyxHQUFHQSxTQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssSUFBSUEsU0FBQyxDQUFDLEdBQUcsQ0FBQztJQUNsRCxRQUFRLElBQUksS0FBSyxHQUFHQSxTQUFDLENBQUMsR0FBRyxHQUFHQSxTQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssSUFBSUEsU0FBQyxDQUFDLEdBQUcsQ0FBQztJQUNsRCxRQUFRLElBQUksQ0FBQyxNQUFNLEdBQUdDLFFBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUMsUUFBUSxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDL0IsUUFBUSxJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7SUFDcEMsUUFBUSxNQUFNO0lBQ2QsTUFBTSxLQUFLLFFBQVEsQ0FBQyxLQUFLO0lBQ3pCLFFBQVEsSUFBSSxXQUFXLEdBQUdBLFFBQUMsQ0FBQyxZQUFZLENBQUNBLFFBQUMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckYsUUFBUSxJQUFJLFFBQVEsR0FBR0EsUUFBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDaEQ7SUFDQTtJQUNBO0lBQ0E7SUFDQTtBQUNBO0lBQ0EsUUFBUSxJQUFJLENBQUMsR0FBR0EsUUFBQyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQzlCLFFBQVEsSUFBSSxDQUFDLEdBQUcsR0FBR0EsUUFBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNyQztJQUNBLFFBQVEsSUFBSSxJQUFJLEdBQUdBLFFBQUMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlELFFBQVEsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7SUFDeEQsVUFBVSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDN0UsU0FBUztBQUNUO0lBQ0EsUUFBUSxNQUFNO0lBQ2QsTUFBTSxLQUFLLFFBQVEsQ0FBQyxJQUFJO0lBQ3hCLFFBQVEsSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFDeEMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUN6QyxRQUFRLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNyQixRQUFRLElBQUksSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDN0MsUUFBUSxNQUFNO0lBQ2QsTUFBTTtJQUNOLFFBQVEsSUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO0lBQ25DLFFBQVEsTUFBTTtJQUNkLEtBQUs7SUFDTCxHQUFHO0FBQ0g7SUFDQSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUU7SUFDakI7SUFDQSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxRQUFRLENBQUMsSUFBSSxFQUFFO0lBQ3RDLE1BQU0sTUFBTSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMxRixLQUFLLE1BQU07SUFDWCxNQUFNLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwRyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDcEMsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ3BDO0lBQ0EsTUFBTSxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzFCLE1BQU0sUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ25DLE1BQU0sUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMxQyxNQUFNLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM3RCxNQUFNLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDN0IsTUFBTSxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbEUsS0FBSztJQUNMLEdBQUc7SUFDSDs7SUNqRk8sTUFBTSxJQUFJLEdBQUc7SUFDcEIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQ25CO0lBQ0EsUUFBUSxPQUFPO0FBdUJmO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7QUFDQTtBQUNBO0lBQ0E7QUFDQTtJQUNBO0lBQ0E7QUFDQTtJQUNBO0lBQ0E7QUFDQTtJQUNBLEtBQUs7SUFDTCxDQUFDOztJQzNDTSxNQUFNLHFCQUFxQixDQUFDO0lBQ25DLEVBQUUsV0FBVyxDQUFDLEdBQUcsRUFBRTtJQUNuQixJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDaEIsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNoQixJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDaEIsSUFBSSxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUNuQixHQUFHO0FBQ0g7SUFDQSxFQUFFLEtBQUssR0FBRztJQUNWLElBQUksSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUM5QyxHQUFHO0FBQ0g7SUFDQSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUU7SUFDakIsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO0lBQ3BDLE1BQU0sSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3JDLE1BQU0sTUFBTSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzFILEtBQUs7SUFDTCxHQUFHO0lBQ0g7O0lDbEJBO0lBQ0E7SUFDQTtJQUNPLE1BQU0sUUFBUSxHQUFHO0lBQ3hCLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRTtJQUNsQjtJQUNBLElBQUksSUFBSSxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3JGO0lBQ0E7SUFDQTtJQUNBO0lBQ0EsSUFBSSxLQUFLLElBQUksTUFBTSxHQUFHLENBQUMsRUFBRSxNQUFNLEdBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFO0lBQy9DO0lBQ0EsTUFBTSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDbEQsUUFBUSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDcEQsVUFBVSxJQUFJLENBQUMsMEJBQTBCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLFNBQVM7SUFDVCxPQUFPO0FBQ1A7SUFDQSxNQUFNLEtBQUssSUFBSSxNQUFNLElBQUksTUFBTSxFQUFFO0lBQ2pDLFFBQVEsSUFBSSxDQUFDLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlDLE9BQU87SUFDUCxLQUFLO0FBQ0w7SUFDQTtJQUNBLElBQUksS0FBSyxJQUFJLE1BQU0sSUFBSSxNQUFNLEVBQUU7SUFDL0IsTUFBTSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNuQyxNQUFNLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ25DLEtBQUs7SUFDTCxHQUFHO0FBQ0g7SUFDQSxFQUFFLDBCQUEwQixDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUU7SUFDNUMsSUFBSSxJQUFJLEdBQUcsR0FBR0EsUUFBQyxDQUFDLHNCQUFzQjtJQUN0QyxNQUFNLE1BQU0sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsR0FBRztJQUMzQyxNQUFNLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsR0FBRztJQUN4QyxLQUFLLENBQUM7SUFDTixJQUFJLElBQUksR0FBRyxFQUFFO0lBQ2IsTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtJQUN6QyxRQUFRLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3ZDLFFBQVEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDdkMsUUFBUSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckMsUUFBUSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckMsT0FBTyxNQUFNO0lBQ2I7SUFDQTtJQUNBLFFBQVEsSUFBSSxPQUFPLEdBQUdBLFFBQUMsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0lBQ25FLFFBQVEsSUFBSSxNQUFNLEdBQUdBLFFBQUMsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2xFLFFBQVEsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQzlDLFFBQVEsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQzVDLFFBQVEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLE9BQU8sR0FBRyxPQUFPLElBQUksT0FBTyxHQUFH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SUFBSSxFQUFFLENBQUM7QUFDM0I7SUFDQSxRQUFRLElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3JDLFFBQVEsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDOUM7SUFDQSxRQUFRLE1BQU0sTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzVCLFFBQVEsTUFBTSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDMUI7SUFDQSxRQUFRLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQzNCO0lBQ0EsUUFBUSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7SUFDbkMsUUFBUSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckMsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUlELFNBQUMsQ0FBQyxVQUFVLEdBQUdBLFNBQUMsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBQzVILFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJQSxTQUFDLENBQUMsVUFBVSxHQUFHQSxTQUFDLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztBQUM1SDtJQUNBLFFBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hDO0lBQ0EsUUFBUSxJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztBQUMvQjtJQUNBO0FBQ0E7SUFDQTtBQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtBQUNBO0lBQ0E7SUFDQTtBQUNBO0lBQ0E7QUFDQTtJQUNBO0FBQ0E7SUFDQTtJQUNBO0lBQ0E7QUFDQTtJQUNBO0FBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtBQUNBO0lBQ0E7QUFDQTtJQUNBO0FBQ0E7SUFDQTtJQUNBLEtBQUs7QUFDTDtJQUNBLElBQUksS0FBSyxHQUFHO0lBQ1osUUFBUSxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztBQUN2QjtJQUNBLFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDNUIsUUFBUSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDdEIsUUFBUSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUM3QjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtBQUNBO0lBQ0E7SUFDQSxRQUFRLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1RDtJQUNBLEtBQUs7QUFDTDtJQUNBLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtJQUN2QixRQUFRLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNyQixRQUFRLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUMxQixRQUFRLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN0QixRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLFFBQVEsTUFBTSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQ3BFLEtBQUs7QUFDTDtJQUNBLElBQUksTUFBTSxHQUFHO0lBQ2I7SUFDQSxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDNUI7SUFDQTtJQUNBLFFBQVEsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDdEM7SUFDQTtJQUNBLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDcEM7SUFDQTtJQUNBLFFBQVEsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDdEM7SUFDQTtJQUNBLFFBQVEsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDckU7SUFDQTtJQUNBLFFBQVEsSUFBSSxJQUFJLEdBQUc7SUFDbkIsWUFBWSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEQsWUFBWSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEQsU0FBUyxDQUFDO0lBQ1YsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDMUMsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDMUM7SUFDQTtBQUNBO0lBQ0EsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtJQUNo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RyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdGLFlBQVksSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5RixZQUFZLElBQUksT0FBTyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7SUFDeEMsWUFBWSxPQUFPLENBQUMsR0FBRyxHQUFHQSxRQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDNUMsWUFBWSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN4QyxTQUFTO0lBQ1QsS0FBSztBQUNMO0lBQ0EsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFO0lBQ2QsUUFBUSxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDM0MsUUFBUSxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2xEO0lBQ0EsUUFBUSxHQUFHLENBQUMsU0FBUyxHQUFHLGtCQUFrQixDQUFDO0lBQzNDLFFBQVEsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVELFFBQVEsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO0lBQy9CLFlBQVksR0FBRyxDQUFDLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQztJQUNoRCxZQUFZLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDbEYsWUFBWSxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN0RCxTQUFTO0FBQ1Q7SUFDQTtJQUNBO0FBQ0E7SUFDQSxRQUFRLEtBQUssSUFBSSxNQUFNLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtJQUMxQyxZQUFZLElBQUksTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwRCxTQUFTO0FBQ1Q7SUFDQSxRQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN0QztJQUNBLFFBQVEsS0FBSyxJQUFJLE1BQU0sSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO0lBQzFDLFlBQVksSUFBSSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqRSxTQUFTO0FBQ1Q7SUFDQSxRQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDMUI7SUFDQSxRQUFRLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDNUIsUUFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNsRSxRQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ25FO0lBQ0EsUUFBUSxLQUFLLElBQUksTUFBTSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7SUFDMUMsWUFBWSxJQUFJLE1BQU0sQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNsRSxTQUFTO0FBQ1Q7SUFDQTtJQUNBO0lBQ0E7QUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0FBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7QUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7QUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7QUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtBQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7QUFDQTtJQUNBO0FBQ0E7SUFDQTtBQUNBO0lBQ0E7SUFDQTtJQUNBO0FBQ0E7SUFDQTtBQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtBQUNBO0lBQ0E7QUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7QUFDQTtJQUNBO0lBQ0E7QUFDQTtJQUNBO0FBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0FBQ0E7SUFDQSxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDNUIsS0FBSztBQUNMO0lBQ0EsSUFBSSxRQUFRLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRTtJQUN4QixRQUFRLElBQUksTUFBTSxHQUFHO0lBQ3JCLFlBQVksQ0FBQyxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEQsWUFBWSxDQUFDLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwRCxTQUFTLENBQUM7QUFDVjtJQUNBLFFBQVEsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUNqRSxZQUFZLEVBQUUsR0FBRyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNO0lBQzVHLFlBQVksRUFBRSxHQUFHLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDakUsWUFBWSxFQUFFLEdBQUcsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ2hIO0lBQ0EsUUFBUSxLQUFLLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RDLFlBQVksS0FBSyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUMxQyxnQkFBZ0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDakUsZ0JBQWdCLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsU0FBUztBQUN2RTtJQUNBLGdCQUFnQixJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUM7SUFDckUsZ0JBQWdCLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkYsZ0JBQWdCLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDaEQsYUFBYTtJQUNiLFNBQVM7QUFDVDtJQUNBLFFBQVEsS0FBSyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUN0QyxZQUFZLEtBQUssSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDMUMsZ0JBQWdCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFD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QUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3BHLHFCQUFxQjtBQUNyQjtJQUNBLG9CQUFvQixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUdBLFNBQUMsQ0FBQyxVQUFVLEVBQUU7SUFDekQsd0JBQXdCLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDckcscUJBQXFCLE1BQU0sSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxFQUFFO0lBQ3pELHdCQUF3QixHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZHLHFCQUFxQjtBQUNyQjtJQUNBLG9CQUFvQixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUdBLFNBQUMsQ0FBQyxXQUFXLEVBQUU7SUFDMUQsd0JBQXdCLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxF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\n"]}